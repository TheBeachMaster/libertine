#!/bin/bash -
set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi +o xtrace;unset BASH_ENV;unset BASH_XTRACEFD;unset CDPATH;unset ENV;unset FCEDIT;unset FIGNORE;unset FUNCNEST;unset GLOBIGNORE;unset HISTCONTROL;unset HISTFILE;unset HISTFILESIZE;unset HISTIGNORE;unset HISTSIZE;unset HISTTIMEFORMAT;unset HOSTFILE;unset IGNOREEOF;unset INPUTRC;unset MAIL;unset MAILCHECK;unset MAILPATH;unset TMOUT;umask 022

function essentialProgramCheck()
{
	# This nasty hack exists because source'd files override the set -xxxx options!
	set -e
	
	local program
	for program in "$@"
	do
		if ! which "$program" 1>/dev/null 2>/dev/null; then
			echo "$ourName: FAIL: Program $program does not exist on path $PATH" 1>&2
			return 100
		fi
	done
}

function setDebugging()
{
	# is set -x on?
	if [[ "$-" == *x* ]]; then
		export LFS_BASH_DEBUGGING="yes"
	elif [ ! -z "$LFS_BASH_DEBUGGING" ]; then
		if [ "$LFS_BASH_DEBUGGING" = "yes" ]; then
			set -x
		fi
	fi
}

function findOurNameAndPath()
{
	readonly ourName="$(basename "$0")"
	pushd "$(dirname "$0")" >/dev/null
	readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exit 1
}

function exitHelp()
{
	echo -n -E "Usage: ${ourName} -h
Usage: ${ourName} [-c lfsConfigPath] machine

Defaults
    lfsConfigPath      ${lfsConfigPath}

A machine defines machine settings in <lfsConfigPath>/settings/machine/<machine>.settings

" 1>&2
	exit $1
}

function parseCommandLine()
{
	lfsConfigPath="${crudeOurPath}/config"
	
	machine="simple"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('machine')

	local OPTERR=1
	local OPTIND=1
	local OPTARG
	local option
	while getopts :hl:d:m:1:2:o: option
	do
		case "$option" in
			
			h)
				exitHelp 2
			;;
			
			c)
				lfsConfigPath="$OPTARG"
			;;
			
			'?')
				exitError "Invalid option -${OPTARG}"
			;;
			
		esac
	done
	
	shift $((OPTIND - 1))
	if [ $# -eq 1 ]; then
		machine="$1"
	else
		exitError "Please specify one machine"
	fi
}

function setLfsConfigPath()
{
	essentialProgramCheck mkdir awk
	
	if [ ! -d "$lfsConfigPath" ]; then
		exitError "Config path $lfsConfigPath does not exist or is not a directory"
	fi
	pushd "$lfsConfigPath">/dev/null
	lfsConfigPath="$(pwd)"
	popd >/dev/null
}

function sourceFunctions()
{
	readonly functionsPath="$lfsConfigPath"/functions
	if [ ! -d "$functionsPath" ]; then
		exitError "functions path $functionsPath does not exist or is not a directory"
	fi
	
	local fileToSource
	pushd "$functionsPath" >/dev/null
		
		for fileToSource in *.functions
		do
			source "$fileToSource"
		done
		
	popd >/dev/null
}

function setPaths()
{
	setLfsConfigPath
	
	sourceFunctions
	
	setPathsAfterSourcingFunctions
}

function main()
{
	setDebugging
	findOurNameAndPath
	parseCommandLine "$@"
	setPaths
	
	local LFS_PHASE
	local phasePath
	local recipeFile
	local baseFileName
	local uidgidFile
	local -i uidgid
	local -i maximumUidGid=0
	for LFS_PHASE in crosscompiler toolchain2 system
	do
		phasePath="$recipesPath"/"$LFS_PHASE"
		if [ ! -d "$phasePath" ]; then
			exitError "Phase $LFS_PHASE does not exist at path $phasePath"
		fi
		pushd "$phasePath" >/dev/null
		
			for recipeFile in *.recipe
			do
				if [ ! -f "$recipeFile" ]; then
					continue
				fi
				baseFileName="$(basename "$recipeFile" .recipe)"
				uidgidFile="$baseFileName".uidgid
				if [ ! -f "$uidgidFile" ]; then
					warning "Recipe file $recipeFile has no corresponding uidgid file $uidgidFile"
				fi
				
				uidgid="$(head -n 1 "$uidgidFile")"
				if [ $uidgid -gt $maximumUidGid ]; then
					maximumUidGid=$uidgid
				fi
			done
		
		popd >/dev/null
	done
	
	local -i nextUidGid=$((maximumUidGid+1))
	
	echo "$ourName: PASS: Next recipe uidgid to be used is $nextUidGid"
}

main "$@"
