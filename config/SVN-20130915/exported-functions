function progressMessage()
{
	if [ $# -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	SECONDS=0
	printf "$ourName: $1"
}

function progressMessageFailed()
{
	if [ $# -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	echo " FAILED (in ${SECONDS}s: $1)"
	exit 1
}

function progressMessageSucceeded()
{
	if [ $# -ne 0 ]; then
		exitError "Too many arguments"
	fi
	echo " PASSED (in ${SECONDS}s)"
}

function warning()
{
	if [ $# -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	echo "$ourName: WARNING: $1"
}

function printKey()
{
	if [ $# -ne 2 ]; then
		exitError "Too many arguments"
	fi
	
	local -r localSourcePackageName="$1"
	local -r localVersion="$2"
	# bash has problems with keys containing non-alphanumerics when the key has not previously been added to an associative array
	# this is a problem for existence checks
	# printf so as to avoid tr replacing a trailing \n (as would happen with a heredoc)
	printf '%s' "${localSourcePackageName}:${localVersion}" | tr --complement '[:alpha:][:digit:]' '_'
}

function printDistributionVersionKey()
{
	if [ $# -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	local -r localDistributionVersion="$1"
	printf '%s' "${localDistributionVersion}" | tr --complement '[:alpha:][:digit:]' '_'
}

function sourcePackagesKeyExists()
{
	if [ $# -ne 1 ]; then
		exitError "Too many arguments"
	fi
	
	local -r key="$1"
	local -i index
	for index in ${!sourcePackages_IndicesToKeys[@]}
	do
		if [ "$key" = "${sourcePackages_IndicesToKeys[$index]}" ]; then
			# key already exists
			return 0
		fi
	done
	return 1
}

# Exists because ${!sourcePackages_XXXX[@]} returns INDICES not KEYS; we can also use indices it seems against associative arrays
declare -a sourcePackages_IndicesToKeys=()
declare -A sourcePackages_SourcePackageName=()
declare -A sourcePackages_Version=()
declare -A sourcePackages_Url=()
declare -A sourcePackages_Compression=()
declare -A sourcePackages_FileName=()
declare -A sourcePackages_ExtractedTarballFolder=()
declare -A sourcePackages_Hashes=()
declare -A sourcePackages_Patches=()

function addSourcePackageDownload()
{
	if [ $# -lt 3 ]; then
		exitError "Not enough arguments"
	elif [ $# -gt 5 ]; then
		exitError "Too many arguments"
	fi
	
	local -r ourSourcePackageName="$LFS_SOURCE_PACKAGE_NAME"
	local -r ourVersion="$1"
	local -r ourUrl="$2"
	local -r ourHashes="$3"
	local -r ourFileName="$(basename "$ourUrl")"
	
	local -r compressionExtension="${filename##*.}"
	
	if [ $# -ge 4 ]; then
		local -r ourExtractedTarballFolder="$4"
	else
		local -r withoutCompressionExtension="${ourFileName%.*}"
		if [ -z "$compressionExtension" ]; then
			local -r ourExtractedTarballFolder="$withoutCompressionExtension"
		else
			case "$compressionExtension" in
				
				# The various abominations are also slackware packages (txz, tgz especially)
				tar|tgz|tbz|tbz2|txz|tlz|tlzma|tz|taz)
					local -r ourExtractedTarballFolder="$withoutCompressionExtension"
				;;
				
				*)
					local -r ourExtractedTarballFolder="${withoutCompressionExtension%.*}"
				;;
				
			esac
		fi
	fi
	
	# TODO:  cpio/cpgz  zip/jar/war/ear  ar/deb  shar  rpm (using rpm2cpio, so we can think of rpm as a compressed cpio file)
	# TODO: support non-tar formats, eg cpio/rpm, zip, ar/deb
	# TODO: split compression from tar for non-tar formats
	#
	
	if [ $# -eq 5 ]; then
		local -r ourCompression="$5"
	else
		case "$compressionExtension" in
			tar)
				local -r ourCompression=''
			;;
			
			gz|tgz)
				local -r ourCompression=ungzip
			;;
			
			bz2|bz|tbz2|tbz)
				local -r ourCompression=bzip2
			;;
			
			# Not included in dependencies by default
			# A faster compressor still is lz4
			lzo)
				local -r ourCompression=lzop
			;;
			
			# Not included in dependencies by default
			lz|tlz)
				local -r ourCompression=lzip
			;;
			
			lzma|tlzma)
				local -r ourCompression=lzma
			;;
			
			xz|txz)
				local -r ourCompression=xz
			;;
			
			# Not included in dependencies by default
			Z|tz|taz)
				# eg gzip downloads
				local -r ourCompression=uncompress
			;;
			
			*)
				if [ ! -z "$compressionExtension" ]; then
					exitError "Unknown file extension $compressionExtension for $ourSourcePackageName $ourVersion"
				fi
			;;
		esac
	fi
	
	
	local -r key="$(printKey "$ourSourcePackageName" "$ourVersion")"
	
	# There are very nasty bugs in bash that mean a key can 'already exist' but with the previously added key's value!
	if sourcePackagesKeyExists "$key"; then
		local -r existingUrl="${sourcePackages_Url["${key}"]}"
		if [ "$existingUrl" != "$ourUrl" ]; then
			if [ "${sourcePackages_Hashes["${key}"]}" != "$ourHashes" ]; then
				exitError "Override of URL for source package $ourSourcePackageName version $ourVersion specifies different hashes"
			fi
			warning "Overriding URL for source package $ourSourcePackageName version $ourVersion to $ourUrl from $existingUrl (hashes, etc not changed)"
			sourcePackages_Url["${key}"]="$ourUrl"
		fi
		return 0
	fi
	sourcePackages_IndicesToKeys["${#sourcePackages_IndicesToKeys[@]}"]="$key"
	
	sourcePackages_SourcePackageName["${key}"]="$ourSourcePackageName"
	sourcePackages_Version["${key}"]="$ourVersion"
	sourcePackages_Url["${key}"]="$ourUrl"
	sourcePackages_Compression["${key}"]="$ourCompression"
	sourcePackages_FileName[$key]="$ourFileName"
	sourcePackages_ExtractedTarballFolder["${key}"]="$ourExtractedTarballFolder"
	sourcePackages_Hashes["${key}"]="$ourHashes"
	# Need a key that is phase-
	sourcePackages_Patches["${key}"]=""
}

declare -a patches_Url=()
declare -a patches_FileName=()
declare -a patches_Hashes=()

function addPatchDownload()
{
	if [ $# -ne 3 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r ourSourcePackageName="$LFS_SOURCE_PACKAGE_NAME"
	local -r ourVersion="$1"
	local -r ourUrl="$2"
	local -r ourHashes="$3"
	local -r ourFileName="$(basename "$ourUrl")"
	
	local -r key="$(printKey "$ourSourcePackageName" "$ourVersion")"
	
	# Ensure a tar ball download exists
	if ! sourcePackagesKeyExists "$key"; then
		exitError "No source package exists for patch $ourFileName to $ourSourcePackageName version $ourVersion"
	fi
	
	# Check for duplicate patches
	local -i existingPatchNumber
	local -i patchExists=1
	for existingPatchNumber in ${sourcePackages_Patches["${key}"]}
	do
		if [ ${patches_FileName[$existingPatchNumber]} = "$ourFileName" ]; then
			if [ ${patches_Url[$existingPatchNumber]} != "$ourUrl" ]; then
				if [ "${patches_Hashes[$existingPatchNumber]}" != "$ourHashes" ]; then
					exitError "Override of URL for patch $ourFileName to $ourSourcePackageName version $ourVersion specifies different hashes"
				fi
				warning "Overriding URL for patch $ourFileName to $ourSourcePackageName version $ourVersion to $ourUrl (hashes, etc not changed)"
				patches_Url[$existingPatchNumber]="$ourUrl"
			fi
			patchExists=0
			break
		fi
	done
	
	if [ $patchExists -eq 0 ]; then
		return 0
	fi
	
	local -ir patchNumber=${#patches_Url[@]}
	patches_Url[$patchNumber]="$ourUrl"
	patches_FileName[$patchNumber]="$ourFileName"
	patches_Hashes[$patchNumber]="$ourHashes"
	sourcePackages_Patches["${key}"]="${sourcePackages_Patches["${key}"]} $patchNumber"
}

previousMirrors=""
function sourceMirror()
{
	if [ $# -ne 1 ]; then
		exitError "Not exactly 1 argument"
	fi
	
	local -r localMirror="$1"
	
	local previousMirror
	for previousMirror in $previousMirrors
	do
		if [ "$previousMirror" = "$localMirror" ]; then
			exitError "Recursion of mirrors - trying to use $localMirror after mirror stack of $previousMirrors"
		fi
	done
	previousMirrors="$previousMirrors $localMirror"
	
	if [ -f "$mirrorsPath"/"$localMirror".mirrors ]; then
		LFS_DISTRIBUTION_VERSION="$distributionVersion" source "$mirrorsPath"/"$localMirror".mirrors "$distributionVersion" "$localMirror"
	else
		exitError "mirrors $localMirror.mirrors does not exist in mirrors path $mirrorsPath or is not a file"
	fi
}

function sourceProfile()
{
	if [ $# -ne 1 ]; then
		exitError "Not exactly 1 argument"
	fi
	
	local -r localProfile="$1"
	
	if [ -f "$profilesPath"/"$localProfile".profile ]; then
		LFS_PHASE="$LFS_PHASE" LFS_DISTRIBUTION_VERSION="$distributionVersion" source "$profilesPath"/"$localProfile".profile "$LFS_PHASE" "$distributionVersion" "$localProfile"
	else
		exitError "profile $localProfile.profile does not exist in profile path $profilesPath or is not a file"
	fi
}

declare -a keyrings_Url=()
declare -a keyrings_FileName=()
declare -a keyrings_Hashes=()
function sourceKeyring()
{
	if [ $# -ne 2 ]; then
		exitError "Not exactly 2 arguments"
	fi
	
	local -r ourUrl="$1"
	local -r ourHashes="$2"
	local -r ourFileName="$(basename "$ourUrl")"
	
	if [ "${ourFileName##*.}" != "gpg" ]; then
		exitError "Only gpg keyrings are supported - which is not so for this url: $ourUrl"
	fi
	
	local -i existingKeyringNumber
	local -i keyringExists=1
	for existingKeyringNumber in ${!keyrings_FileName[@]}
	do
		if [ ${keyrings_FileName[$existingPatchNumber]} = "$ourFileName" ]; then
			if [ ${keyrings_Url[$existingPatchNumber]} != "$ourUrl" ]; then
				if [ "${keyrings_Hashes[$existingKeyringNumber]}" != "$ourHashes" ]; then
					exitError "Override of URL for keyring $ourFileName specifies different hashes"
				fi
				warning "Overriding URL for keyring $ourFileName to $ourUrl (hashes, etc not changed)"
				keyrings_Url[$existingKeyringNumber]="$ourUrl"
			fi
			keyringExists=0
			break
		fi
	done
	
	if [ $keyringExists -eq 0 ]; then
		return 0
	fi
	
	local -ir keyringNumber=${#patches_Url[@]}
	keyrings_Url[$keyringNumber]="$ourUrl"
	keyrings_FileName[$keyringNumber]="$ourFileName"
	keyrings_Hashes[$keyringNumber]="$ourHashes"
}

function sourceRecipe()
{
	if [ $# -ne 2 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r localSourcePackageName="$1"
	local -r ourVersion="$2"
	LFS_SOURCE_PACKAGE_NAME="$localSourcePackageName" LFS_VERSION="$ourVersion" source "$recipesPath"/"$localSourcePackageName".recipe "$localSourcePackageName"
	addToInstall "$localSourcePackageName" "$ourVersion" "$LFS_PHASE" "$LFS_DISTRIBUTION_VERSION"
}

declare -A installPhase_toolchain1=()
declare -A installPhase_toolchain2=()
declare -A installPhase_system=()
function addToInstall()
{
	if [ $# -ne 3 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r ourSourcePackageName="$1"
	local -r ourVersion="$2"
	local -r phase="$3"
	local -r key="$(printKey "$ourSourcePackageName" "$ourVersion")"
	
	# Use an override (versioned) installer, otherwise the default
	local -r installer_versioned=installPackage_${phase}_${ourSourcePackageName}_${ourVersion}
	local -r installer_unversioned=installPackage_${phase}_${ourSourcePackageName}
	if type "$installer_versioned" &>/dev/null; then
		local -r installer="$installer_versioned"
	elif type "$installer_unversioned" &>/dev/null; then
		local -r installer="$installer_unversioned"
	else
		exitError "No installer $installer_versioned or $installer_unversioned defined for $ourSourcePackageName version $ourVersion"
	fi
	
	# Ensure a tar ball download exists
	if ! sourcePackagesKeyExists "$key"; then
		exitError "No source package exists for $ourSourcePackageName version $ourVersion"
	fi
	
	# remaining variables are distribution versions (ie software that works together)
	shift 3
	local localDistributionVersion
	local localDistributionVersionKey
	local previousDependencies=""
	for localDistributionVersion in $@
	do
		localDistributionVersionKey="$(printDistributionVersionKey "$localDistributionVersion")"
		case "$phase" in
		
			toolchain1)
				previousDependencies="${installPhase_toolchain1["${localDistributionVersionKey}"]}"
				installPhase_toolchain1["${localDistributionVersionKey}"]="$previousDependencies $key"
			;;
		
			toolchain2)
				previousDependencies="${installPhase_toolchain2["${localDistributionVersionKey}"]}"
				installPhase_toolchain2["${localDistributionVersionKey}"]="$previousDependencies $key"
			;;
		
			system)
				previousDependencies="${installPhase_system["${localDistributionVersionKey}"]}"
				installPhase_system["${localDistributionVersionKey}"]="$previousDependencies $key"
			;;
		
			*)
				exitError "Unsupported phase $phase"
			;;
		
		esac
	done
}

# Also https://www.scaprepo.com/ is a good place to query
# One of the problems is we can only add CPEs post a version is made vulnerable
# eg addCPE 4.2 cpe:/a:gnu:bash:4.2
# Not all CPEs are predictable, eg for java:-
# cpe:/a:oracle:jdk:1.6.0:update_23
# However, in this case, we could 'guess' the CPE based on previously registered ones
# Other CPEs are unversioned, eg this one for gnu gzip:  cpe:/a:gnu:gzip  but also cpe:/a:gnu:gzip:1.2.4 and 
# for maximum confusion, cpe:/a:gnu:gzip:1.2.4a
function addCPE()
{
	if [ $# -ne 2 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r localVersion="$1"
	local -r localCpe="$2"
	
	local -r localSourcePackageName="$LFS_SOURCE_PACKAGE_NAME"
	local -r key="$(printKey "$localSourcePackageName" "$localVersion")"
	
	# Ensure a tar ball download exists
	if ! sourcePackagesKeyExists "$key"; then
		exitError "No source package exists for $ourSourcePackageName version $ourVersion"
	fi
}


# Called inside sourceRecipe
function addCVE()
{
	if [ $# -ne 2 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r localSourcePackageName="$LFS_SOURCE_PACKAGE_NAME"
	local -r cveProductId="$1"
	local -r cveProductName="$2"
	
	# https://cve.mitre.org/data/downloads/allitems.csv.gz
	#
	# https://nvd.nist.gov/download.cfm  eg
	# http://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-recent.xml
	# Contains entry elements, buried within which are cpe-lang expressions (oh, for f's sake, can't people make things simple)?
	# These ultimately reference things like cpe:/a:adobe:coldfusion:9.0 and cpe:/a:adobe:coldfusion:9.0.2 which presumably match affected packages
	# another example is  cpe:/a:eucalyptus:eucalyptus:3.2.1  
	#
	# A php XML parser for the list is at  http://homes.cerias.purdue.edu/~pmeunier/nvd_xml_parser.txt
	# A ruby one is at http://seclists.org/fulldisclosure/2011/Feb/356
	# An old perl one is at http://www.perlmonks.org/?node_id=625277
	
	# holds product definitions (but includes versions, too, irritating)
	# http://static.nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml
	#<cpe-item name="cpe:/a:gnu:bash:1.14.0">
	#	<title xml:lang="en-US">GNU Bourne-Again SHellbash (GNU Bash) 1.14.0</title>
	#	<cpe-23:cpe23-item name="cpe:2.3:a:gnu:bash:1.14.0:*:*:*:*:*:*:*"/>
	#</cpe-item>
	# https://web.nvd.nist.gov/view/cpe/search/results?searchChoice=keyword&searchText=bash
	#
	# Not all CVEs are fixed; there's an outstanding one for bash from 1999.
	#
	#
	# CPE -- vendor, product, version
	#
	#
}

function tarExtract()
{
	if [ $# -ne 3 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r tarball="$1"
	local -r tarballFolder="$2"
	local -r tarballCompression="$3"
	
	rm -rf "$tarballFolder"
	if [ -z "$ourCompression" ]; then
		tar --extract --file "$tarball"
	else
		tar --extract --file "$tarball" --$tarballCompression
	fi
}

function extractDependencies()
{
	if [ $# -eq 0 ]; then
		exitError "Not enough arguments"
	fi
	
	local dependencyKey
	local localSourcePackageName
	local localFileName
	local localExtractedTarballFolder
	local localCompression
	
	for dependencyKey in $@
	do
		localSourcePackageName=sourcePackages_SourcePackageName["${dependencyKey}"]
		localFileName=sourcePackages_FileName["${dependencyKey}"]
		localExtractedTarballFolder=sourcePackages_ExtractedTarballFolder["${dependencyKey}"]
		localCompression=sourcePackages_Compression["${dependencyKey}"]
		
		if [ -z "$localSourcePackageName" ]; then
			progressMessageFailed "No known source package definition for dependency key $dependencyKey"
		fi
		
		tarExtract ../"$localFileName" "$localExtractedTarballFolder" $localCompression
		mv "$localExtractedTarballFolder" "$localSourcePackageName"
	done
}

function installPackagePrototype()
{
	./configure --prefix=/"$LFS_TOOLS" $@
	
	make
	
	#make check
	
	make install
}

function createBuildFolderAndPushd()
{
	if [ $# -ne 0 ]; then
		exitError "Too many arguments"
	fi
	
	local -r buildFolder=../"$ourSourcePackageName"-build
	rm -rf "$buildFolder"
	mkdir -m 0755 -p "$buildFolder"
	pushd "$buildFolder" >/dev/null
}

function popdAndRemoveBuilderFolder()
{
	if [ $# -ne 0 ]; then
		exitError "Too many arguments"
	fi
	
	popd >/dev/null
	rm -rf "$buildFolder"
}
