function progressMessage()
{
	if [ $@ -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	SECONDS=0
	printf "$ourName: $1"
}

function progressMessageFailed()
{
	if [ $@ -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	echo " FAILED (in ${SECONDS}s: $1)"
	exit 1
}

function progressMessageSucceeded()
{
	if [ $@ -ne 0 ]; then
		exitError "Too many arguments"
	fi
	echo " PASSED (in ${SECONDS}s)"
}

function warning()
{
	if [ $@ -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	echo "$ourName: WARNING: $1"
}

function printKey()
{
	if [ $@ -ne 2 ]; then
		exitError "Too many arguments"
	fi
	
	local -r localSourcePackageName="$1"
	local -r localVersion="$2"
	# bash has problems with keys containing non-alphanumerics when the key has not previously been added to an associative array
	# this is a problem for existence checks
	# printf so as to avoid tr replacing a trailing \n (as would happen with a heredoc)
	printf '%s' "${localSourcePackageName}:${localVersion}" | tr --complement '[:alpha:][:digit:]' '_'
}

function printDistributionVersionKey()
{
	if [ $@ -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	local -r localDistributionVersion="$1"
	printf '%s' "${localDistributionVersion}" | tr --complement '[:alpha:][:digit:]' '_'
}

function sourcePackagesKeyExists()
{
	if [ $@ -ne 1 ]; then
		exitError "Too many arguments"
	fi
	
	local -r key="$1"
	local -i index
	for index in ${!sourcePackages_IndicesToKeys[@]}
	do
		if [ "$key" = "${sourcePackages_IndicesToKeys[$index]}" ]; then
			# key already exists
			return 0
		fi
	done
	return 1
}

# Exists because ${!sourcePackages_XXXX[@]} returns INDICES not KEYS; we can also use indices it seems against associative arrays
declare -a sourcePackages_IndicesToKeys=()
declare -A sourcePackages_SourcePackageName=()
declare -A sourcePackages_Version=()
declare -A sourcePackages_Url=()
declare -A sourcePackages_Compression=()
declare -A sourcePackages_FileName=()
declare -A sourcePackages_ExtractedTarballFolder=()
declare -A sourcePackages_MD5=()
declare -A sourcePackages_SHA1=()
declare -A sourcePackages_SHA224=()
declare -A sourcePackages_SHA256=()
declare -A sourcePackages_SHA384=()
declare -A sourcePackages_SHA512=()

# TODO: Raw C code downloads, eg http://www.sqlite.org/contrib/download/extension-functions.c?get=25
# TODO: zip package downloads, eg http://www.sqlite.org/2013/sqlite-doc-3071700.zip
# TODO: Binary file downloads, eg perl scripts and their ilk. Frankly, too bad.
# TODO: ar archives, and then deb (double-expansion, use ar x then one of the regular extractors)
# rpm, cpio, shar archives
# ? iso files ?

# TODO: Signatures for downloaded files
# TODO: Signatures, hashes for recipes

function addSourcePackageDownload()
{
	if [ $@ -lt 3 ]; then
		exitError "Not enough arguments"
	elif [ $@ -gt 5 ]; then
		exitError "Too many arguments"
	fi
	
	local -r ourSourcePackageName="$LFS_SOURCE_PACKAGE_NAME"
	local -r ourVersion="$1"
	local -r ourUrl="$2"
	local -r ourHashes="$3"
	local -r ourFileName="$(basename "$ourUrl")"
	
	local -r compressionExtension="${filename##*.}"
	
	if [ $@ -ge 4 ]; then
		local -r ourExtractedTarballFolder="$4"
	else
		local -r withoutCompressionExtension="${ourFileName%.*}"
		if [ -z "$compressionExtension" ]; then
			local -r ourExtractedTarballFolder="$withoutCompressionExtension"
		elif [ "$compressionExtension" = "tar" ]; then
			local -r ourExtractedTarballFolder="$withoutCompressionExtension"
		elif [ "$compressionExtension" = "tgz" ]; then
			local -r ourExtractedTarballFolder="$withoutCompressionExtension"
		else
			local -r ourExtractedTarballFolder="${withoutCompressionExtension%.*}"
		fi
	fi
	
	if [ $@ -eq 5 ]; then
		local -r ourCompression="$5"
	else
		case "$compressionExtension" in
			tar)
				local -r ourCompression=''
			;;
			
			gz|tgz)
				local -r ourCompression=gzip
			;;
			
			bz2)
				local -r ourCompression=bzip2
			;;
			
			# Not included in dependencies by default
			# A faster compressor still is lz4
			lzo)
				local -r ourCompression=lzop
			;;
			
			# Not included in dependencies by default
			lz)
				local -r ourCompression=lzip
			;;
			
			lzma)
				local -r ourCompression=lzma
			;;
			
			xz)
				local -r ourCompression=xz
			;;
			
			
			*)
				if [ ! -z "$compressionExtension" ]; then
					exitError "Unknown file extension $compressionExtension"
				fi
			;;
		esac
	fi
	
	
	local -r key="$(printKey "$ourSourcePackageName" "$ourVersion")"
	
	# There are very nasty bugs in bash that mean a key can 'already exist' but with the previously added key's value!
	if sourcePackagesKeyExists "$key"; then
		local -r existingUrl="${sourcePackages_Url["${key}"]}"
		warning "Overriding URL for $ourSourcePackageName version $ourVersion to $ourUrl from $existingUrl (hashes, etc not changed)"
		sourcePackages_Url["${key}"]="$ourUrl"
		# TODO: Verify hashes have not changed
		return 0
	fi
	sourcePackages_IndicesToKeys["${#sourcePackages_IndicesToKeys[@]}"]="$key"
	
	sourcePackages_SourcePackageName["${key}"]="$ourSourcePackageName"
	sourcePackages_Version["${key}"]="$ourVersion"
	sourcePackages_Url["${key}"]="$ourUrl"
	sourcePackages_Compression["${key}"]="$ourCompression"
	sourcePackages_FileName[$key]="$ourFileName"
	sourcePackages_ExtractedTarballFolder["${key}"]="$ourExtractedTarballFolder"
	
	local -r hashesStringSeparated="${ourHashes/,/ }"
	
	local hashNameAndValue
	local hashName
	local hashValue
	local -i hasHash=1
	for hashNameAndValue in $hashesStringSeparated
	do
		IFS=':' read -r -d$'\n' hashName hashValue <<<"$hashNameAndValue"
		case "$hashName" in
			
			MD5)
				sourcePackages_MD5["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA1)
				sourcePackages_SHA1["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA224)
				sourcePackages_SHA224["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA256)
				sourcePackages_SHA256["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA384)
				sourcePackages_SHA256["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA512)
				sourcePackages_SHA512["${key}"]="$hashValue"
				hasHash=0
			;;
			
			*)
				exitError "Unsupported hash algorithm $hashName"
			;;
			
		esac
	done
	
	if [ $hasHash -ne 0 ]; then
		exitError "No hash algorithms for $ourSourcePackageName $ourVersion"
	fi
}

function patchesKeyExists()
{
	if [ $@ -ne 1 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r key="$1"
	local -i index
	for index in ${!patches_IndicesToKeys[@]}
	do
		if [ "$key" = "${patches_IndicesToKeys[$index]}" ]; then
			# key already exists
			return 0
		fi
	done
	return 1
}

declare -a patches_IndicesToKeys=()
declare -A patches_Url=()
declare -A patches_FileName=()
declare -A patches_MD5=()
declare -A patches_SHA1=()
declare -A patches_SHA224=()
declare -A patches_SHA256=()
declare -A patches_SHA384=()
declare -A patches_SHA512=()

function addPatchDownload()
{
	if [ $@ -ne 3 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r ourSourcePackageName="$LFS_SOURCE_PACKAGE_NAME"
	local -r ourVersion="$1"
	local -r ourUrl="$2"
	local -r ourHashes="$3"
	local -r ourFileName="$(basename "$ourUrl")"
	
	local -r key="$(printKey "$ourSourcePackageName" "$ourVersion")"
	
	# Ensure a tar ball download exists
	if ! sourcePackagesKeyExists "$key"; then
		exitError "No source package exists for $ourSourcePackageName version $ourVersion"
	fi
	
	# There are very nasty bugs in bash that mean a key can 'already exist' but with the previously added key's value!
	if patchesKeyExists "$key"; then
		local -r existingUrl="${patches_Url["${key}"]}"
		warning "Overriding URL for $ourSourcePackageName version $ourVersion to $ourUrl from $existingUrl (hashes, etc not changed)"
		patches_Url["${key}"]="$ourUrl"
		# TODO: Verify hashes have not changed
		return 0
	fi
	patches_IndicesToKeys["${#patches_IndicesToKeys[@]}"]="$key"
	
	patches_FileName["${key}"]="$ourFileName"
	patches_Url["${key}"]="$ourUrl"
	local -r hashesStringSeparated="${ourHashes/,/ }"
	
	local hashNameAndValue
	local hashName
	local hashValue
	local -i hasHash=1
	for hashNameAndValue in $hashesStringSeparated
	do
		IFS=':' read -r -d$'\n' hashName hashValue <<<"$hashNameAndValue"
		case "$hashName" in
			
			MD5)
				patches_MD5["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA1)
				patches_SHA1["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA224)
				patches_SHA224["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA256)
				patches_SHA256["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA384)
				patches_SHA256["${key}"]="$hashValue"
				hasHash=0
			;;
			
			SHA512)
				patches_SHA512["${key}"]="$hashValue"
				hasHash=0
			;;
			
			*)
				exitError "Unsupported hash algorithm $hashName"
			;;
			
		esac
	done
	
	if [ $hasHash -ne 0 ]; then
		exitError "No hash algorithms for $ourSourcePackageName $ourVersion"
	fi
}

function sourceMirror()
{
	if [ $@ -ne 1 ]; then
		exitError "Not exactly 1 argument"
	fi
	
	local -r localMirror="$1"
	
	if [ -f "$mirrorsPath"/"$localMirror".mirrors ]; then
		LFS_DISTRIBUTION_VERSION="$distributionVersion" source "$mirrorsPath"/"$localMirror".mirrors "$distributionVersion" "$localMirror"
	else
		exitError "mirrors $localMirror.mirrors does not exist in mirrors path $mirrorsPath or is not a file"
	fi
}

function sourceProfile()
{
	if [ $@ -ne 1 ]; then
		exitError "Not exactly 1 argument"
	fi
	
	local -r localProfile="$1"
	
	if [ -f "$profilesPath"/"$profile".profile ]; then
		LFS_PHASE="$LFS_PHASE" LFS_DISTRIBUTION_VERSION="$distributionVersion" source "$profilesPath"/"$profile".profile "$LFS_PHASE" "$distributionVersion" "$profile"
	else
		exitError "profile $profile.profile does not exist in profile path $profilesPath or is not a file"
	fi
}

function sourceRecipe()
{
	if [ $@ -ne 2 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r localSourcePackageName="$1"
	local -r ourVersion="$2"
	LFS_SOURCE_PACKAGE_NAME="$localSourcePackageName" LFS_VERSION="$ourVersion" source "$recipesPath"/"$localSourcePackageName".recipe "$localSourcePackageName"
	addToInstall "$localSourcePackageName" "$ourVersion" "$LFS_PHASE" "$LFS_DISTRIBUTION_VERSION"
}

declare -A installPhase_toolchain1=()
declare -A installPhase_toolchain2=()
declare -A installPhase_system=()

function addToInstall()
{
	if [ $@ -ne 3 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r ourSourcePackageName="$1"
	local -r ourVersion="$2"
	local -r phase="$3"
	local -r key="$(printKey "$ourSourcePackageName" "$ourVersion")"
	
	# Use an override (versioned) installer, otherwise the default
	local -r installer_versioned=installPackage_${phase}_${ourSourcePackageName}_${ourVersion}
	local -r installer_unversioned=installPackage_${phase}_${ourSourcePackageName}
	if type "$installer_versioned" &>/dev/null; then
		local -r installer="$installer_versioned"
	elif type "$installer_unversioned" &>/dev/null; then
		local -r installer="$installer_unversioned"
	else
		exitError "No installer $installer_versioned or $installer_unversioned defined for $ourSourcePackageName version $ourVersion"
	fi
	
	# Ensure a tar ball download exists
	if ! sourcePackagesKeyExists "$key"; then
		exitError "No source package exists for $ourSourcePackageName version $ourVersion"
	fi
	
	# remaining variables are distribution versions (ie software that works together)
	shift 3
	local localDistributionVersion
	local localDistributionVersionKey
	local previousDependencies=""
	for localDistributionVersion in $@
	do
		localDistributionVersionKey="$(printDistributionVersionKey "$localDistributionVersion")"
		case "$phase" in
		
			toolchain1)
				previousDependencies="${installPhase_toolchain1["${localDistributionVersionKey}"]}"
				installPhase_toolchain1["${localDistributionVersionKey}"]="$previousDependencies $key"
			;;
		
			toolchain2)
				previousDependencies="${installPhase_toolchain2["${localDistributionVersionKey}"]}"
				installPhase_toolchain2["${localDistributionVersionKey}"]="$previousDependencies $key"
			;;
		
			system)
				previousDependencies="${installPhase_system["${localDistributionVersionKey}"]}"
				installPhase_system["${localDistributionVersionKey}"]="$previousDependencies $key"
			;;
		
			*)
				exitError "Unsupported phase $phase"
			;;
		
		esac
	done
}

function tarExtract()
{
	if [ $@ -ne 3 ]; then
		exitError "Not enough arguments"
	fi
	
	local -r tarball="$1"
	local -r tarballFolder="$2"
	local -r tarballCompression="$3"
	
	rm -rf "$tarballFolder"
	if [ -z "$ourCompression" ]; then
		tar --extract --file "$tarball"
	else
		tar --extract --file "$tarball" --$tarballCompression
	fi
}

function extractDependencies()
{
	if [ $@ -eq 0 ]; then
		exitError "Not enough arguments"
	fi
	
	local dependencyKey
	local localSourcePackageName
	local localFileName
	local localExtractedTarballFolder
	local localCompression
	
	for dependencyKey in $@
	do
		localSourcePackageName=sourcePackages_SourcePackageName["${dependencyKey}"]
		localFileName=sourcePackages_FileName["${dependencyKey}"]
		localExtractedTarballFolder=sourcePackages_ExtractedTarballFolder["${dependencyKey}"]
		localCompression=sourcePackages_Compression["${dependencyKey}"]
		
		if [ -z "$localSourcePackageName" ]; then
			progressMessageFailed "No known source package definition for dependency key $dependencyKey"
		fi
		
		tarExtract ../"$localFileName" "$localExtractedTarballFolder" $localCompression
		mv "$localExtractedTarballFolder" "$localSourcePackageName"
	done
}

function installPackagePrototype()
{
	./configure --prefix=/"$LFS_TOOLS" $@
	
	make
	
	#make check
	
	make install
}

function createBuildFolderAndPushd()
{
	if [ $@ -ne 0 ]; then
		exitError "Too many arguments"
	fi
	
	local -r buildFolder=../"$ourSourcePackageName"-build
	rm -rf "$buildFolder"
	mkdir -m 0755 -p "$buildFolder"
	pushd "$buildFolder" >/dev/null
}

function popdAndRemoveBuilderFolder()
{
	if [ $@ -ne 0 ]; then
		exitError "Too many arguments"
	fi
	
	popd >/dev/null
	rm -rf "$buildFolder"
}
