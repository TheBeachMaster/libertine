
function verifyDependency()
{
	if [ $# -lt 4 ]; then
		exitError "Needs at least 4 arguments"
	fi
	
	local -r sourcePackageName="$1"
	
	# May be incomplete, eg part of the left-hand regex
	# eg 4.2.25(1)-release might be 4.2
	local -r minimumVersion="$2"
	
	# Really only for warnings
	local -r maximumVersion="$3"
	
	local version
	read -r -d$'\n' version
	echo $version
	
	# 0 is equal, =
	# 1 is greater than, >
	# 2 is less than, <
	set +e
	vercomp "$version" "$minimumVersion"
	local -i comparison=$?
	set -e
	if [ $comparison -eq 2 ]; then
		exitError "Dependency $sourcePackageName has a version, $version, less than the minimum known to work, $minimumVersion"
	fi
	
	set +e
	vercomp "$version" "$maximumVersion"
	local -i comparison=$?
	set -e
	if [ $comparison -eq 1 ]; then
		warning "Dependency $sourcePackageName has a version, $version, greater than the maximum known to work, $maximumVersion"
	fi
}

# Derived from http://stackoverflow.com/questions/4023830/bash-how-compare-two-strings-in-version-format
function vercomp()
{
	if [[ $1 == $2 ]]; then
		return 0
	fi
	
	local IFS=.
	local i ver1=($1) ver2=($2)
	
	# fill empty fields in ver1 with zeros
	for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
	do
		ver1[i]=0
	done
	
	for ((i=0; i<${#ver1[@]}; i++))
	do
		if [[ -z ${ver2[i]} ]]; then
			# fill empty fields in ver2 with zeros
			ver2[i]=0
		fi
		if ((10#${ver1[i]} > 10#${ver2[i]})); then
			return 1
		fi
		if ((10#${ver1[i]} < 10#${ver2[i]})); then
			return 2
		fi
	done
	
	return 0
}

bash --version | awk 'NR==1 {print $(NF-1) }' | sed -e 's/-.*//g' -e 's/(\([0-9]*\))/\.\1/g' | verifyDependency bash 3.2 4.2.25
echo "/bin/sh -> $(readlink -f /bin/sh)"

ld --version | awk 'NR==1 {print ($NF) }' | verifyDependency binutils X Y
