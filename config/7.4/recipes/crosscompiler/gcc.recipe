set -o errexit +o hashall

version 4.8.1
{
	depends musl
	
	include mpfr 3.1.2
	include gmp 5.1.2
	include mpc 1.0.1
	include binutils 2.23.2
}

function installPackage_crosscompiler_gcc()
{
	local -r linuxInstallPath="${LFS}$(dependencyPath linux)"/install
	
	pushdDependencyFolder

		# http://stackoverflow.com/questions/1726042/recipe-for-compiling-binutils-gcc-together
		
		local dependencyName
		for dependencyName in mpfr gmp mpc
		do
			ln -sv ../"$dependencyName" "$dependencyName"
		done
		local binutilsFile
		for binutilsFile in ../binutils/*
		do
			# suppress existing entries
			ln -sv "$binutilsFile" 2>/dev/null || true
		done
		
		# Stack protection fix for glibc-2.18 / musl
		sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure
		
		# Disable .info files
		sed -i 's/BUILD_INFO=info/BUILD_INFO=/' gcc/configure
		
		createBuildFolderAndPushd
		
			CC="musl-gcc-external -Wl,-Bstatic -static-libgcc" \
			CXX="musl-g++-external -Wl,-Bstatic -static-libgcc" \
			../"$LFS_DEPENDENCY_NAME"/configure        \
			--target="$LFS_TARGET"                              \
			--prefix="$LFS_DEPENDENCY_PREFIX_PATH"           \
			--with-sysroot="$LFS"                            \
			--with-newlib                                    \
			--without-headers                                \
			--with-local-prefix="$LFS_DEPENDENCY_PREFIX_PATH"                       \
			--with-native-system-header-dir="$linuxInstallPath"/usr/include   \
			--disable-nls                                    \
			--disable-multilib \
			--disable-libmudflap \
			--disable-libsanitizer \
			--disable-libstdc++-v3                           \
			--enable-ld \
			--enable-gold=default \
			--enable-languages=c \
			--disable-lto-plugin
		
			PATH="$newPath" make

			PATH="$newPath" make DESTDIR="$LFS" install

			# Using --disable-shared means that the libgcc_eh.a file isn't created and installed. The Glibc package depends on this library as it uses -lgcc_eh within its build system.
			# This dependency can be satisfied by creating a symlink to libgcc.a, since that file will end up containing the objects normally contained in libgcc_eh.a: 
		
			#local -r gcc=${LFS}${$LFS_DEPENDENCY_PREFIX_PATH}/bin/${LFS_TARGET}-gcc
			#ln -sv libgcc.a "$(${gcc} -print-libgcc-file-name | sed 's/libgcc/&_eh/')"

		popdBuildFolder
		

		# TOIDO: un"fix" headers
		# rm -rf "$CC_PREFIX/lib/gcc/$TRIPLE"/*/include-fixed/ "$CC_PREFIX/lib/gcc/$TRIPLE"/*/include/stddef.h
		
	
	popdDepdendencyFolder
}
