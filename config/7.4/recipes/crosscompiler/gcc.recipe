set -o errexit +o hashall

version 4.8.1
{
	depends linux
	depends musl
	
	include mpfr 3.1.2
	include gmp 5.1.2
	include mpc 1.0.1
	include binutils 2.23.2
}

function dead()
{
	
	# Adjust paths to use /tools' ld (dynamic linker) instead of /lib,/lib32,/lib64 and remove /usr/include
	local file
	for file in $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
	do
		cp -uv "$file"{,.orig}
		sed -e "s@/lib\(64\)\?\(32\)\?/ld@/${LFS_TOOLS}&@g" -e "s@/usr@/${LFS_TOOLS}@g" "$file".orig >"$file"
		cat >>"$file" <<-EOF
			
			#undef STANDARD_STARTFILE_PREFIX_1
			#undef STANDARD_STARTFILE_PREFIX_2
			#define STANDARD_STARTFILE_PREFIX_1 "/${LFS_TOOLS}/lib/"
			#define STANDARD_STARTFILE_PREFIX_2 ""
		EOF
		touch "$file".orig
	done
}

function installPackage_crosscompiler_gcc()
{
	local -r linuxInstallPath="${LFS}$(dependencyPath linux)"/install

	local -r muslGccBinPath="${LFS_DEPENDENCY_RELATIVE_PATH_TO_ROOT_FROM_INSTALL_FOLDER}${dependency_Path["$dependency"]}"/install/bin
	pushd "$muslGccBinPath" >/dev/null
		local -r newPath="$(pwd):$PATH"
	popd >/dev/null
	
	pushdDependencyFolder

		# http://stackoverflow.com/questions/1726042/recipe-for-compiling-binutils-gcc-together
		
		local dependencyName
		for dependencyName in mpfr gmp mpc
		do
			ln -sv ../"$dependencyName" "$depdendencyName"
		done
		local binutilsFile
		for binutilsFile in ../binutils/*
		do
			# suppress existing entries
			ln -sv "$binutilsFile" || true
		done
		
		# Stack protection fix for glibc-2.18
		sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure
	
		createBuildFolderAndPushd
		
			../"$LFS_RECIPE_EXTRACTED_TARBALL_FOLDER"/configure        \
			--target="$LFS_TARGET"                              \
			--prefix="$LFS_DEPENDENCY_PREFIX_PATH"           \
			--with-sysroot="$LFS"                            \
			--with-newlib                                    \
			--without-headers                                \
			--with-local-prefix="$LFS_DEPENDENCY_PREFIX_PATH"                       \
			--with-native-system-header-dir="$linuxInstallPath"/usr/include   \
			--disable-nls                                    \
			--disable-shared                                 \
			--disable-multilib                               \
			--disable-decimal-float                          \
			--disable-threads                                \
			--disable-libatomic                              \
			--disable-libgomp                                \
			--disable-libitm                                 \
			--disable-libmudflap                             \
			--disable-libquadmath                            \
			--disable-libsanitizer                           \
			--disable-libssp                                 \
			--disable-libgcj \
			--disable-libada \
			--disable-libstdc++-v3                           \
			--enable-ld \
			--enable-gold=default \
			--enable-languages=c,c++ 
		
			make

			make DESTDIR="$LFS" install

			# Using --disable-shared means that the libgcc_eh.a file isn't created and installed. The Glibc package depends on this library as it uses -lgcc_eh within its build system.
			# This dependency can be satisfied by creating a symlink to libgcc.a, since that file will end up containing the objects normally contained in libgcc_eh.a: 
		
			local -r gcc=${LFS}${$LFS_DEPENDENCY_PREFIX_PATH}/bin/${LFS_TARGET}-gcc
			ln -sv libgcc.a "$(${gcc} -print-libgcc-file-name | sed 's/libgcc/&_eh/')"

		popdBuildFolder
	
	popdDepdendencyFolder
}
