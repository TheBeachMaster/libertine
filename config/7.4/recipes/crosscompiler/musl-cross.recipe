set -o errexit +o hashall

version 394a7ccf3b4b8ab02bf736ad54368f267b06d575
{
	localPackage_crosscompiler_musl_cross_gccVersion=4.8.1
	
	include binutils 2.23.2
	include gcc "$localPackage_crosscompiler_musl_cross_gccVersion"
	include gmp 5.1.2
	include elfutils 0.154
	include linux 3.10.10
	include mpc 1.0.1
	include mpfr 3.1.2
	include musl 0.9.14
	
	install_binaries_in_paths "$LFS_ARCHITECTURE"-linux-musl/bin "$LFS_ARCHITECTURE"-linux-musl/"$LFS_ARCHITECTURE"-linux-musl/bin
	
	make_executable_binary \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/cc1 \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/cc1plus \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/collect2 \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/lto1 \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/lto-wrapper \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/install-tools/fixincl \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/install-tools/fixinc.sh \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/install-tools/mkheaders \
		"$LFS_ARCHITECTURE"-linux-musl/libexec/gcc/"$LFS_ARCHITECTURE"-linux-musl/"$localPackage_crosscompiler_musl_cross_gccVersion"/install-tools/mkinstalldirs
	
	unset localPackage_crosscompiler_musl_cross_gccVersion
}

function install_crosscompiler_musl-cross()
{
	local gccVersion=""
	for index in ${dependency_SourcePackageIndices["$LFS_DEPENDENCY_KEY"]}
	do
		setLfsSourcePackageVariables $index
		if [ "$LFS_SOURCE_PACKAGE_NAME" = "gcc" ]; then
			gccVersion="$LFS_SOURCE_PACKAGE_VERSION"
			break
		fi
	done
	
	if [ -z "$gccVersion" ]; then
		exitError "No gcc version"
	fi
	
	local dependency
	local -i index
	local originalCompressionExtension
	local withoutCompressionExtension
	local newCompressionExtension
	local withNewCompressionExtension
	for dependency in binutils gcc gmp elfutils linux mpfr mpc musl
	do
		for index in ${dependency_SourcePackageIndices["$LFS_DEPENDENCY_KEY"]}
		do
			setLfsSourcePackageVariables $index
			if [ "$LFS_SOURCE_PACKAGE_NAME" = "$dependency" ]; then
				# Override fetch
				ln -s ../../"$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_DEPENDENCY_NAME"/tarballs/"$LFS_SOURCE_PACKAGE_FILENAME"
				
				# This logic ensures that mismatches in tarball compression between us and musl-cross are handled
				originalCompressionExtension="${LFS_SOURCE_PACKAGE_FILENAME##*.}"
				withoutCompressionExtension="$(basename "$LFS_SOURCE_PACKAGE_FILENAME" ."$originalCompressionExtension")"
				for newCompressionExtension in gz bz2 xz
				do
					if [ "$newCompressionExtension" = "$originalCompressionExtension" ]; then
						continue
					fi
					withNewCompressionExtension="$withoutCompressionExtension"."$newCompressionExtension"
					ln -s "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_DEPENDENCY_NAME"/tarballs/"$withNewCompressionExtension"
				done
				
				local muslCrossExtractedFolderName="$LFS_SOURCE_PACKAGE_NAME"-"$LFS_SOURCE_PACKAGE_VERSION"
				local muslCrossExtractedPath="$LFS_DEPENDENCY_NAME"/extra/"$muslCrossExtractedFolderName"
				
				# Override extracted tarball
				ln -s ../../"$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$muslCrossExtractedPath"
		
				# Override extract file name
				touch "$muslCrossExtractedPath"/extracted
				
				# gcc inner links (note binutils is NOT included, although it can be)
				case "$dependency" in
					
					gmp|mpfr|mpc)
						ln -s ../"$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$LFS_DEPENDENCY_NAME"/extra/gcc-"$gccVersion"/"$LFS_SOURCE_PACKAGE_NAME"
					;;
					
					*)
						:
					;;
					
				esac
			fi
		done
	done
	
	pushd "$LFS_DEPENDENCY_NAME" >/dev/null
	
		# Adjust sysroot and install
		cat >>defs.sh <<-'EOF'
			
			buildinstall()
			{
				# Override only for 2nd build, gcc, non-bootstrap
				if [ "$1" = "2" -a "$2" = gcc-$GCC_VERSION -a "$CC_PREFIX" != "$LFS_PREFIX_BASE"/bootstrap ]; then
					
					# We are going to override sysroot, local prefix (and prefix)
					
					# We also need a final build of binutils with this corrected sysroot, so we link in the binaries for an in-tree build
					# We do not need to build musl again, because it has no path dependencies (except for the musl-gcc wrapper and specs, which we won't require in any event)
					
					unset CDPATH
					cd "$MUSL_CC_BASE"/../gcc-$GCC_VERSION >/dev/null
					
						for binutilsFile in ../binutils-"$BINUTILS_VERSION"/*
						do
							# suppress existing entries
							ln -sv "$binutilsFile" 2>/dev/null || true
						done
						
						make distclean || true
					
					cd - >/dev/null
					
					echo ----
					echo $PATH
					echo $CC
					echo ----
					
					# Was --with-lib-path="$SYSROOT_PREFIX_FOR_GCC"/"$TRIPLE"/lib64:"$SYSROOT_PREFIX_FOR_GCC"/"$TRIPLE"/lib \
					# PREFIX is used inside build to do --prefix=$PREFIX, this should force it to be overridden
					# --disable-werror and --with-lib-path for embedded binutils
					local ourPrefix="$LFS_DEPENDENCY_PREFIX_PATH"/"$TRIPLE"
					PREFIX="$ourPrefix" build "$1" "$2" --target=$TRIPLE \
					--with-local-prefix=="$ourPrefix" \
					--with-sysroot="$ourPrefix" \
					--with-build-sysroot="$PREFIX"/"$TRIPLE" \
			        --enable-languages=$LANGUAGES --disable-multilib --disable-libmudflap \
			        --disable-libsanitizer \
					--with-lib-path="=/lib64:=/lib" \
					--disable-werror \
			        $GCC_CONFFLAGS
					
					doinstall "$1" "$2" DESTDIR="$LFS"
					
				else
					build "$@"
					doinstall "$1" "$2"
				fi
			}
		EOF
	
		pushd extra >/dev/null
		
			# 1 Fix HG_ID
			# 2 Remove deletion of share/ folder
			# 3 Remove tarball creation
			cp build-tarballs.sh build-tarballs.sh.orig
			sed -i -e "s/^HG_ID=.*$/HG_ID=$LFS_DEPENDENCY_VERSION/g" -e '/rm -rf "$TRIPLE/d' -e '/tar -cf - "$TRIPLE/d' build-tarballs.sh
		
			mv build-gcc-deps.sh build-gcc-deps.sh.orig
			#sed -i -e 's;^gitfetchextract '\''git://repo.or.cz/libelf-compat.git'\'' $LIBELF_VERSION libelf-$LIBELF_VERSION;fetchextract irrelevant elfutils-$LIBELF_VERSION .tar.gz;g' build-gcc-deps.sh
			#sed -i -e 's; buildmake libelf-; build '\'\'' libelf-;g' build-gcc-deps.sh
			#sed -i -e 's;libelf-$LIBELF_VERSION;elfutils-$LIBELF_VERSION;g' build-gcc-deps.sh
			grep -v libelf build-gcc-deps.sh.orig >build-gcc-deps.sh
			chmod +x build-gcc-deps.sh
	
			cp extraconfig.sh extraconfig.sh.orig
	
			cat >>extraconfig.sh <<-EOF
				BINUTILS_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["binutils"]}"
				GCC_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["gcc"]}"
				#GDB_VERSION=""
				GMP_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["gmp"]}"
				LIBELF_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["elfutils"]}"
				LINUX_HEADERS_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["linux"]}"
				MPC_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["mpc"]}"
				MPFR_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["mpfr"]}"
			
				MUSL_DEFAULT_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["musl"]}"
				MUSL_GIT_VERSION=c47e7062ddc1c3aa24db071db0f4d1dca792f325
				MUSL_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["musl"]}"
				MUSL_GIT=no
			
				LANG_CXX=yes
				LANG_OBJC=no
				LANG_FORTRAN=no
			
				MAKEFLAGS="$MAKEFLAGS"
			
				# Affects the bootstrap (1st) compiler
				GCC_BUILTIN_PREREQS=yes
			
				# Only affects the static cross-compilers; possibly might change
				NO_GCC_DEPS=yes
				
				# Added by us to defs.sh to try to force a chroot-local sysroot
				LFS_DEPENDENCY_PREFIX_PATH="$LFS_DEPENDENCY_PREFIX_PATH"
				LFS="$LFS"
				LFS_PREFIX_BASE="$LFS_DEPENDENCY_INSTALL_PATH"
			EOF
		
			# gcc -dumpmachine is preferrred but uname -m / MACHTYPE should work (which is LFS_ARCHITECTURE); gcc -dumpmachine is usually a triple/quad
			./build-tarballs.sh "$LFS_DEPENDENCY_INSTALL_PATH" "musl-cross-" "" "$LFS_ARCHITECTURE"
		
		popd >/dev/null
	
	popd >/dev/null
	
	pushd ../install/"$LFS_ARCHITECTURE"-linux-musl/"$LFS_ARCHITECTURE"-linux-musl/bin >/dev/null
	
		cat >toolchain2-gcc <<-EOF
			#!/bin/sh
			gcc "$@" --sysroot "$LFS_DEPENDENCY_INSTALL_PATH_MUSL_CROSS"
		EOF
		chmod +x toolchain2-gcc
	
		cat >toolchain2-g++ <<-EOF
			#!/bin/sh
			g++ "$@" --sysroot "$LFS_DEPENDENCY_INSTALL_PATH_MUSL_CROSS"
		EOF
		chmod +x toolchain2-g++
		
		# hard link to g++
		rm c++
		
		ln toolchain2-gcc cc
		ln toolchain2-g++ c++
		
	popd >/dev/null
	
	echo "IGNORING LDSCRIPTS FOR NOW"
	return 0
	
	pushd ../install/"$LFS_ARCHITECTURE"-linux-musl/"$LFS_ARCHITECTURE"-linux-musl/lib/ldscripts >/dev/null
		
		local ldscript
		# Prevents any spaces in LFS being expanded as separate argv
		local expression="$(echo -n 's:SEARCH_DIR("'${LFS}'/\(.*\)/lib\(.*\)"):SEARCH_DIR("/\1/lib\2"); SEARCH_DIR("/\1/lib"):g')"
		for ldscript in *
		do
			# Fix up ldscripts SEARCH_DIR to (a) remove global locations and (b) external non-chroot paths
			# paths starting '=' are replaced with the compiled-in SYSROOT prefix
			cp "$ldscript" "$ldscript".bak
			sed -i -e 's: SEARCH_DIR("=/usr/local/lib64");::g' -e 's: SEARCH_DIR("=/lib64");::g' -e 's: SEARCH_DIR("=/usr/lib64");::g' -e 's: SEARCH_DIR("=/usr/local/lib");::g' -e 's: SEARCH_DIR("=/lib");::g' -e 's: SEARCH_DIR("=/usr/lib");::g' -e "$expression" "$ldscript"
		done
		
	popd >/dev/null
}
