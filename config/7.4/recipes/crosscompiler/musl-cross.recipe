set -o errexit +o hashall

version 394a7ccf3b4b8ab02bf736ad54368f267b06d575
{
	localPackage_crosscompiler_musl_cross_gccVersion=4.8.1
	
	include binutils 2.23.2
	include gcc "$localPackage_crosscompiler_musl_cross_gccVersion"
	include gmp 5.1.2
	include elfutils 0.154
	include linux 3.10.10
	include mpc 1.0.1
	include mpfr 3.1.2
	include musl 0.9.14
	
	install_binaries_in_paths "$LFS_TRIPLE"/bin
	
	make_executable_binary \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/cc1 \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/cc1plus \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/collect2 \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/lto1 \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/lto-wrapper \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/install-tools/fixincl \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/install-tools/fixinc.sh \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/install-tools/mkheaders \
		"$LFS_TRIPLE"/libexec/gcc/"$LFS_TRIPLE"/"$localPackage_crosscompiler_musl_cross_gccVersion"/install-tools/mkinstalldirs
	
	unset localPackage_crosscompiler_musl_cross_gccVersion
}

function install_crosscompiler_musl-cross()
{
	local gccVersion=""
	for index in ${dependency_SourcePackageIndices["$LFS_DEPENDENCY_KEY"]}
	do
		setLfsSourcePackageVariables $index
		if [ "$LFS_SOURCE_PACKAGE_NAME" = "gcc" ]; then
			gccVersion="$LFS_SOURCE_PACKAGE_VERSION"
			break
		fi
	done
	
	if [ -z "$gccVersion" ]; then
		exitError "No gcc version"
	fi
	
	local dependency
	local -i index
	local originalCompressionExtension
	local withoutCompressionExtension
	local newCompressionExtension
	local withNewCompressionExtension
	for dependency in binutils gcc gmp elfutils linux mpfr mpc musl
	do
		for index in ${dependency_SourcePackageIndices["$LFS_DEPENDENCY_KEY"]}
		do
			setLfsSourcePackageVariables $index
			if [ "$LFS_SOURCE_PACKAGE_NAME" = "$dependency" ]; then
				# Override fetch
				ln -s ../../"$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_DEPENDENCY_NAME"/tarballs/"$LFS_SOURCE_PACKAGE_FILENAME"
				
				# This logic ensures that mismatches in tarball compression between us and musl-cross are handled
				originalCompressionExtension="${LFS_SOURCE_PACKAGE_FILENAME##*.}"
				withoutCompressionExtension="$(basename "$LFS_SOURCE_PACKAGE_FILENAME" ."$originalCompressionExtension")"
				for newCompressionExtension in gz bz2 xz
				do
					if [ "$newCompressionExtension" = "$originalCompressionExtension" ]; then
						continue
					fi
					withNewCompressionExtension="$withoutCompressionExtension"."$newCompressionExtension"
					ln -s "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_DEPENDENCY_NAME"/tarballs/"$withNewCompressionExtension"
				done
				
				local muslCrossExtractedFolderName="$LFS_SOURCE_PACKAGE_NAME"-"$LFS_SOURCE_PACKAGE_VERSION"
				local muslCrossExtractedPath="$LFS_DEPENDENCY_NAME"/extra/"$muslCrossExtractedFolderName"
				
				# Override extracted tarball
				ln -s ../../"$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$muslCrossExtractedPath"
		
				# Override extract file name
				touch "$muslCrossExtractedPath"/extracted
				
				# gcc inner links (note binutils is NOT included, although it can be)
				case "$dependency" in
					
					gmp|mpfr|mpc)
						ln -s ../"$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$LFS_DEPENDENCY_NAME"/extra/gcc-"$gccVersion"/"$LFS_SOURCE_PACKAGE_NAME"
					;;
					
					*)
						:
					;;
					
				esac
			fi
		done
	done
	
	pushd "$LFS_DEPENDENCY_NAME" >/dev/null
	
		# Adjust sysroot and install
		cat >>defs.sh <<-'EOF'
			
			buildinstall()
			{
				# Override only for 2nd build, gcc, non-bootstrap (final build)
				if [ "$1" = "2" -a "$2" = gcc-$GCC_VERSION -a "$CC_PREFIX" != "$LFS_PREFIX_BASE"/bootstrap ]; then
					
					# We are going to override sysroot, local prefix (and prefix)
					
					# We also need a final build of binutils with this corrected sysroot, so we link in the binaries for an in-tree build
					# We do not need to build musl again, because it has no path dependencies (except for the musl-gcc wrapper and specs, which we won't require in any event)
					
					unset CDPATH
					cd "$MUSL_CC_BASE"/../gcc-$GCC_VERSION >/dev/null
					
						for binutilsFile in ../binutils-"$BINUTILS_VERSION"/*
						do
							# suppress existing entries
							ln -sv "$binutilsFile" 2>/dev/null || true
						done
						
						make distclean || true
					
					cd - >/dev/null
					
					echo ---- 1>&2
					echo $PATH 1>&2
					echo $CC 1>&2
					echo $LFS_CFLAGS 1>&2
					echo $LFS_CXXFLAGS 1>&2
					echo ---- 1>&2
					
					export CFLAGS="$LFS_CFLAGS"
					export CXXFLAGS="$LFS_CXXFLAGS"
					
					# Was --with-lib-path="$SYSROOT_PREFIX_FOR_GCC"/"$TRIPLE"/lib64:"$SYSROOT_PREFIX_FOR_GCC"/"$TRIPLE"/lib \
					# PREFIX is used inside build to do --prefix=$PREFIX, this should force it to be overridden
					# --disable-werror and --with-lib-path for embedded binutils
					# --sysroot seems to be ignored, and g++ is built with --with-build-sysroot !
					local ourPrefix="$LFS_DEPENDENCY_PREFIX_PATH"/"$TRIPLE"
					PREFIX="$ourPrefix" build "$1" "$2" --target=$TRIPLE \
					--with-local-prefix=="$ourPrefix" \
					--with-sysroot="$ourPrefix" \
					--with-build-sysroot="$PREFIX"/"$TRIPLE" \
			        --enable-languages=$LANGUAGES --disable-multilib --disable-libmudflap \
			        --disable-libsanitizer \
					--with-lib-path="=/lib64:=/lib" \
					--disable-werror \
			        $GCC_CONFFLAGS
					
					doinstall "$1" "$2" DESTDIR="$LFS"
					
				else
					build "$@"
					doinstall "$1" "$2"
				fi
			}
		EOF
	
		pushd extra >/dev/null
		
			# 1 Fix HG_ID
			# 2 Remove deletion of share/ folder
			# 3 Remove tarball creation
			cp build-tarballs.sh build-tarballs.sh.orig
			sed -i -e "s/^HG_ID=.*$/HG_ID=$LFS_DEPENDENCY_VERSION/g" -e '/rm -rf "$TRIPLE/d' -e '/tar -cf - "$TRIPLE/d' build-tarballs.sh
		
			mv build-gcc-deps.sh build-gcc-deps.sh.orig
			#sed -i -e 's;^gitfetchextract '\''git://repo.or.cz/libelf-compat.git'\'' $LIBELF_VERSION libelf-$LIBELF_VERSION;fetchextract irrelevant elfutils-$LIBELF_VERSION .tar.gz;g' build-gcc-deps.sh
			#sed -i -e 's; buildmake libelf-; build '\'\'' libelf-;g' build-gcc-deps.sh
			#sed -i -e 's;libelf-$LIBELF_VERSION;elfutils-$LIBELF_VERSION;g' build-gcc-deps.sh
			grep -v libelf build-gcc-deps.sh.orig >build-gcc-deps.sh
			chmod +x build-gcc-deps.sh
	
			cp extraconfig.sh extraconfig.sh.orig
	
			cat >>extraconfig.sh <<-EOF
				BINUTILS_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["binutils"]}"
				GCC_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["gcc"]}"
				#GDB_VERSION=""
				GMP_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["gmp"]}"
				LIBELF_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["elfutils"]}"
				LINUX_HEADERS_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["linux"]}"
				MPC_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["mpc"]}"
				MPFR_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["mpfr"]}"
			
				MUSL_DEFAULT_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["musl"]}"
				MUSL_GIT_VERSION=c47e7062ddc1c3aa24db071db0f4d1dca792f325
				MUSL_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["musl"]}"
				MUSL_GIT=no
			
				LANG_CXX=yes
				LANG_OBJC=no
				LANG_FORTRAN=no
			
				MAKEFLAGS="$MAKEFLAGS"
			
				# Affects the bootstrap (1st) compiler
				GCC_BUILTIN_PREREQS=yes
			
				# Only affects the static cross-compilers; possibly might change
				NO_GCC_DEPS=yes
				
				# Added by us to defs.sh to try to force a chroot-local sysroot
				LFS_DEPENDENCY_PREFIX_PATH="$LFS_DEPENDENCY_PREFIX_PATH"
				LFS="$LFS"
				LFS_PREFIX_BASE="$LFS_DEPENDENCY_INSTALL_PATH"
				LFS_CFLAGS="$CFLAGS"
				LFS_CXXFLAGS="$CXXFLAGS"
			EOF
		
			# gcc -dumpmachine is preferrred but uname -m / MACHTYPE should work (which is LFS_ARCHITECTURE); gcc -dumpmachine is usually a triple/quad
			./build-tarballs.sh "$LFS_DEPENDENCY_INSTALL_PATH" "musl-cross-" "" "$LFS_ARCHITECTURE"
		
		popd >/dev/null
	
	popd >/dev/null
	
	# Create an override specs file to make gcc a little happier
	# obtained by -dumpspecs when the specs file didn't exist
	# fully intended for this to evolve into everything required
	cat >../install/"$LFS_TRIPLE"/lib/gcc/x86_64-linux-musl/"${LFS_DEPENDENCY_INCLUDE_VERSIONS["gcc"]}"/specs <<-EOF
		*asm:
		%{m32:--32}  %{m32|mx32:;:--64}  %{mx32:--x32}  %{!mno-sse2avx:%{mavx:-msse2avx}} %{msse2avx:%{!mavx:-msse2avx}}

		*asm_debug:
		%{!g0:%{gstabs*:--gstabs}%{!gstabs*:%{g*:--gdwarf2}}} %{fdebug-prefix-map=*:--debug-prefix-map %*}

		*asm_final:
		%{gsplit-dwarf: 
		       objcopy --extract-dwo 	 %{c:%{o*:%*}%{!o*:%b%O}}%{!c:%U%O} 	 %{c:%{o*:%:replace-extension(%{o*:%*} .dwo)}%{!o*:%b.dwo}}%{!c:%b.dwo} 
		       objcopy --strip-dwo 	 %{c:%{o*:%*}%{!o*:%b%O}}%{!c:%U%O}     }

		*asm_options:
		%{-target-help:%:print-asm-header()} %{v} %{w:-W} %{I*} %a %Y %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}

		*invoke_as:
		%{!fwpa:   %{fcompare-debug=*|fdump-final-insns=*:%:compare-debug-dump-opt()}   %{!S:-o %|.s |
		 as %(asm_options) %m.s %A }  }

		*cpp:
		%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}

		*cpp_options:
		%(cpp_unique_options) %1 %{m*} %{std*&ansi&trigraphs} %{W*&pedantic*} %{w} %{f*} %{g*:%{!g0:%{g*} %{!fno-working-directory:-fworking-directory}}} %{O*} %{undef} %{save-temps*:-fpch-preprocess}

		*cpp_debug_options:
		%{d*}

		*cpp_unique_options:
		%{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*&F*} %{P} %I %{MD:-MD %{!o:%b.d}%{o*:%.d%*}} %{MMD:-MMD %{!o:%b.d}%{o*:%.d%*}} %{M} %{MM} %{MF*} %{MG} %{MP} %{MQ*} %{MT*} %{!E:%{!M:%{!MM:%{!MT:%{!MQ:%{MD|MMD:%{o*:-MQ %*}}}}}}} %{remap} %{g3|ggdb3|gstabs3|gcoff3|gxcoff3|gvms3:-dD} %{!iplugindir*:%{fplugin*:%:find-plugindir()}} %{H} %C %{D*&U*&A*} %{i*} %Z %i %{fmudflap:-D_MUDFLAP -include mf-runtime.h} %{fmudflapth:-D_MUDFLAP -D_MUDFLAPTH -include mf-runtime.h} %{E|M|MM:%W{o*}}

		*trad_capable_cpp:
		cc1 -E %{traditional|traditional-cpp:-traditional-cpp}

		*cc1:
		%{!mandroid|tno-android-cc:%(cc1_cpu) %{profile:-p};:%(cc1_cpu) %{profile:-p} %{!mglibc:%{!muclibc:%{!mbionic: -mbionic}}} %{!fno-pic:%{!fno-PIC:%{!fpic:%{!fPIC: -fPIC}}}}}

		*cc1_options:
		%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}} %{!iplugindir*:%{fplugin*:%:find-plugindir()}} %1 %{!Q:-quiet} %{!dumpbase:-dumpbase %B} %{d*} %{m*} %{aux-info*} %{fcompare-debug-second:%:compare-debug-auxbase-opt(%b)}  %{!fcompare-debug-second:%{c|S:%{o*:-auxbase-strip %*}%{!o*:-auxbase %b}}}%{!c:%{!S:-auxbase %b}}  %{g*} %{O*} %{W*&pedantic*} %{w} %{std*&ansi&trigraphs} %{v:-version} %{pg:-p} %{p} %{f*} %{undef} %{Qn:-fno-ident} %{Qy:} %{-help:--help} %{-target-help:--target-help} %{-version:--version} %{-help=*:--help=%*} %{!fsyntax-only:%{S:%W{o*}%{!o*:-o %b.s}}} %{fsyntax-only:-o %j} %{-param*} %{fmudflap|fmudflapth:-fno-builtin -fno-merge-constants} %{coverage:-fprofile-arcs -ftest-coverage}

		*cc1plus:


		*link_gcc_c_sequence:
		%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}

		*link_ssp:
		%{fstack-protector:}

		*endfile:
		%{!mandroid|tno-android-ld:%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s}    %{mpc32:crtprec32.o%s}    %{mpc64:crtprec64.o%s}    %{mpc80:crtprec80.o%s} %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s;:%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s}    %{mpc32:crtprec32.o%s}    %{mpc64:crtprec64.o%s}    %{mpc80:crtprec80.o%s} %{shared: crtend_so%O%s;: crtend_android%O%s}}

		*link:
		%{!static:--eh-frame-hdr} %{!mandroid|tno-android-ld:%{m32|mx32:;:-m elf_x86_64}                    %{m32:-m elf_i386}                    %{mx32:-m elf32_x86_64}   %{shared:-shared}   %{!shared:     %{!static:       %{rdynamic:-export-dynamic}       %{m32:-dynamic-linker %{mglibc:/lib/ld-linux.so.2;:%{muclibc:/lib/ld-uClibc.so.0;:%{mbionic:/system/bin/linker;:/lib/ld-musl-i386.so.1}}}}       %{m32|mx32:;:-dynamic-linker %{mglibc:/lib64/ld-linux-x86-64.so.2;:%{muclibc:/lib/ld64-uClibc.so.0;:%{mbionic:/system/bin/linker64;:/lib/ld-musl-x86_64.so.1}}}}       %{mx32:-dynamic-linker %{mglibc:/libx32/ld-linux-x32.so.2;:%{muclibc:/lib/ldx32-uClibc.so.0;:%{mbionic:/system/bin/linkerx32;:/lib/ld-musl-x32.so.1}}}}}     %{static:-static}};:%{m32|mx32:;:-m elf_x86_64}                    %{m32:-m elf_i386}                    %{mx32:-m elf32_x86_64}   %{shared:-shared}   %{!shared:     %{!static:       %{rdynamic:-export-dynamic}       %{m32:-dynamic-linker %{mglibc:/lib/ld-linux.so.2;:%{muclibc:/lib/ld-uClibc.so.0;:%{mbionic:/system/bin/linker;:/lib/ld-musl-i386.so.1}}}}       %{m32|mx32:;:-dynamic-linker %{mglibc:/lib64/ld-linux-x86-64.so.2;:%{muclibc:/lib/ld64-uClibc.so.0;:%{mbionic:/system/bin/linker64;:/lib/ld-musl-x86_64.so.1}}}}       %{mx32:-dynamic-linker %{mglibc:/libx32/ld-linux-x32.so.2;:%{muclibc:/lib/ldx32-uClibc.so.0;:%{mbionic:/system/bin/linkerx32;:/lib/ld-musl-x32.so.1}}}}}     %{static:-static}} %{shared: -Bsymbolic}}

		*lib:
		%{!mandroid|tno-android-ld:%{pthread:-lpthread}    %{shared:-lc}    %{!shared:%{mieee-fp:-lieee} %{profile:-lc_p}%{!profile:-lc}};:%{pthread:-lpthread}    %{shared:-lc}    %{!shared:%{mieee-fp:-lieee} %{profile:-lc_p}%{!profile:-lc}} %{!static: -ldl}}

		*mfwrap:
		 %{static: %{fmudflap|fmudflapth:  --wrap=malloc --wrap=free --wrap=calloc --wrap=realloc --wrap=mmap --wrap=mmap64 --wrap=munmap --wrap=alloca} %{fmudflapth: --wrap=pthread_create}} %{fmudflap|fmudflapth: --wrap=main}

		*mflib:
		%{fmudflap|fmudflapth: -export-dynamic}

		*link_gomp:


		*libgcc:
		%{static|static-libgcc:-lgcc -lgcc_eh}%{!static:%{!static-libgcc:%{!shared-libgcc:-lgcc --as-needed -lgcc_s --no-as-needed}%{shared-libgcc:-lgcc_s%{!shared: -lgcc}}}}

		*startfile:
		%{!mandroid|tno-android-ld:%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}}    crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s};:%{shared: crtbegin_so%O%s;:  %{static: crtbegin_static%O%s;: crtbegin_dynamic%O%s}}}

		*cross_compile:
		1

		*version:
		4.8.1

		*multilib:
		. !m64 !m32;.:../lib64 m64 !m32;.:../lib !m64 m32;

		*multilib_defaults:
		m64

		*multilib_extra:


		*multilib_matches:
		m64 m64;m32 m32;

		*multilib_exclusions:


		*multilib_options:
		m64/m32

		*multilib_reuse:


		*linker:
		collect2

		*linker_plugin_file:


		*lto_wrapper:


		*lto_gcc:


		*link_libgcc:
		%D

		*md_exec_prefix:


		*md_startfile_prefix:


		*md_startfile_prefix_1:


		*startfile_prefix_spec:


		*sysroot_spec:
		--sysroot=%R

		*sysroot_suffix_spec:


		*sysroot_hdrs_suffix_spec:


		*self_spec:


		*cc1_cpu:
		%{march=native:%>march=native %:local_cpu_detect(arch)   %{!mtune=*:%>mtune=native %:local_cpu_detect(tune)}} %{mtune=native:%>mtune=native %:local_cpu_detect(tune)}

		*link_command:
		%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:    %(linker) %{fuse-linker-plugin:    %e-fuse-linker-plugin is not supported in this configuration}%{flto|flto=*:%<fcompare-debug*}     %{flto} %{flto=*} %l %{pie:-pie} %{fuse-ld=*:-fuse-ld=%*}    %X %{o*} %{e*} %{N} %{n} %{r}    %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!nostartfiles:%S}}    %{static:} %{L*} %(mfwrap) %(link_libgcc) %{!nostdlib:%{!nodefaultlibs:%{fsanitize=address:%{!shared:libasan_preinit%O%s} %{static-libasan:%{!shared:-Bstatic --whole-archive -lasan --no-whole-archive -Bdynamic}}%{!static-libasan:-lasan}}     %{fsanitize=thread:%{static-libtsan:%{!shared:-Bstatic --whole-archive -ltsan --no-whole-archive -Bdynamic}}%{!static-libtsan:-ltsan}}}} %o    %{fopenmp|ftree-parallelize-loops=*:%:include(libgomp.spec)%(link_gomp)}    %{fgnu-tm:%:include(libitm.spec)%(link_itm)}    %(mflib)  %{fsplit-stack: --wrap=pthread_create}    %{fprofile-arcs|fprofile-generate*|coverage:-lgcov} %{!nostdlib:%{!nodefaultlibs:%{fsanitize=address: %{static-libasan:-ldl -lpthread}    %{static:%ecannot specify -static with -fsanitize=address}    %{fsanitize=thread:%e-fsanitize=address is incompatible with -fsanitize=thread}}    %{fsanitize=thread: %{static-libtsan:-ldl -lpthread}    %{!pie:%{!shared:%e-fsanitize=thread linking must be done with -pie or -shared}}}}}     %{!nostdlib:%{!nodefaultlibs:%(link_ssp) %(link_gcc_c_sequence)}}    %{!nostdlib:%{!nostartfiles:%E}} %{T*} }}}}}}

	
	EOF
	
	pushd ../install/"$LFS_TRIPLE"/bin >/dev/null
		
		local -r allArgs='$@'
		
		# NOTE: It is essential we link to the cross-compiler name. gcc uses the location of its binary (not symlink) to determine the location
		# of its libexec/ (in essence, bin/gcc => bin/../libexec/gcc/ .... )
		# and its lib (eg for specs bin/gcc => bin/../lib/gcc/x86_64-linux-musl/4.8.1/specs)
		cat >toolchain2-gcc <<-EOF
			#!/bin/sh
			"$LFS_TRIPLE"-gcc --sysroot "$LFS_DEPENDENCY_INSTALL_PATH_MUSL_CROSS"/"$LFS_TRIPLE" "$allArgs"
		EOF
		ln toolchain2-gcc cc
		chmod +x toolchain2-gcc
		
		cat >toolchain2-g++ <<-EOF
			#!/bin/sh
			"$LFS_TRIPLE"-g++ --sysroot "$LFS_DEPENDENCY_INSTALL_PATH_MUSL_CROSS"/"$LFS_TRIPLE" "$allArgs"
		EOF
		ln toolchain2-g++ c++
		chmod +x toolchain2-g++
		
	popd >/dev/null
	
	echo "IGNORING LDSCRIPTS FOR NOW"
	return 0
	
	pushd ../install/"$LFS_TRIPLE"/"$LFS_TRIPLE"/lib/ldscripts >/dev/null
		
		local ldscript
		# Prevents any spaces in LFS being expanded as separate argv
		local expression="$(echo -n 's:SEARCH_DIR("'${LFS}'/\(.*\)/lib\(.*\)"):SEARCH_DIR("/\1/lib\2"); SEARCH_DIR("/\1/lib"):g')"
		for ldscript in *
		do
			# Fix up ldscripts SEARCH_DIR to (a) remove global locations and (b) external non-chroot paths
			# paths starting '=' are replaced with the compiled-in SYSROOT prefix
			cp "$ldscript" "$ldscript".bak
			sed -i -e 's: SEARCH_DIR("=/usr/local/lib64");::g' -e 's: SEARCH_DIR("=/lib64");::g' -e 's: SEARCH_DIR("=/usr/lib64");::g' -e 's: SEARCH_DIR("=/usr/local/lib");::g' -e 's: SEARCH_DIR("=/lib");::g' -e 's: SEARCH_DIR("=/usr/lib");::g' -e "$expression" "$ldscript"
		done
		
	popd >/dev/null
}
