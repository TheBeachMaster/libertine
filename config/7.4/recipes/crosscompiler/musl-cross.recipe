set -o errexit +o hashall

version 394a7ccf3b4b8ab02bf736ad54368f267b06d575
{
	localPackage_crosscompiler_musl_cross_gccVersion=4.8.1
	
	include binutils 2.23.2
	include gcc "$localPackage_crosscompiler_musl_cross_gccVersion"
	include gmp 5.1.2
	include elfutils 0.154
	include linux 3.10.10
	include mpc 1.0.1
	include mpfr 3.1.2
	include musl 0.9.14
	
	function installPackage_crosscompiler_musl_cross_binaries()
	{
		local -ir installLdd=$1
		local -r triple="$2"
	
		local -r binPath="$triple"/bin
		local -r prefix="$binPath"/"$triple"-
		local -r libexec="$triple"/libexec/gcc/"$triple"/"$localPackage_crosscompiler_musl_cross_gccVersion"
	
		install_binaries_in_paths \
			"${prefix}"addr2line \
			"${prefix}"ar \
			"${prefix}"as \
			"${prefix}"c++filt \
			"${prefix}"elfedit \
			"${prefix}"g++ \
			"${prefix}"gcc \
			"${prefix}"gcov \
			"${prefix}"gprof \
			"${prefix}"ld \
			"${prefix}"nm \
			"${prefix}"objcopy \
			"${prefix}"objdump \
			"${prefix}"ranlib \
			"${prefix}"readelf \
			"${prefix}"size \
			"${prefix}"strings \
			"${prefix}"strip \
			"${prefix}"ldd
		
		if [ $installLdd -eq 1 ]; then
			install_binaries_in_paths "$binPath"/ldd
		fi
	
		make_executable_binary \
			"$libexec"/cc1 \
			"$libexec"/cc1plus \
			"$libexec"/collect2 \
			"$libexec"/lto1 \
			"$libexec"/lto-wrapper \
			"$libexec"/install-tools/fixincl \
			"$libexec"/install-tools/fixinc.sh \
			"$libexec"/install-tools/mkheaders \
			"$libexec"/install-tools/mkinstalldirs \
			"$triple"/"$triple"/lib/libc.so
	}
	
	if [ "$LFS_NATIVE_TRIPLE" = "$LFS_FOREIGN_TRIPLE" ]; then
		installPackage_crosscompiler_musl_cross_binaries 1 "$LFS_NATIVE_TRIPLE"
	else
		installPackage_crosscompiler_musl_cross_binaries 0 "$LFS_NATIVE_TRIPLE"
		installPackage_crosscompiler_musl_cross_binaries 1 "$LFS_FOREIGN_TRIPLE"
	fi
	
	unset localPackage_crosscompiler_musl_cross_gccVersion
}

function install_crosscompiler_musl-cross()
{
	local gccVersion=""
	for index in ${dependency_SourcePackageIndices["$LFS_DEPENDENCY_KEY"]}
	do
		setLfsSourcePackageVariables $index
		if [ "$LFS_SOURCE_PACKAGE_NAME" = "gcc" ]; then
			gccVersion="$LFS_SOURCE_PACKAGE_VERSION"
			break
		fi
	done
	
	if [ -z "$gccVersion" ]; then
		exitError "No gcc version"
	fi
	
	local dependency
	local -i index
	local originalCompressionExtension
	local withoutCompressionExtension
	local newCompressionExtension
	local withNewCompressionExtension
	for dependency in binutils gcc gmp elfutils linux mpfr mpc musl
	do
		for index in ${dependency_SourcePackageIndices["$LFS_DEPENDENCY_KEY"]}
		do
			setLfsSourcePackageVariables $index
			if [ "$LFS_SOURCE_PACKAGE_NAME" = "$dependency" ]; then
				# Override fetch
				ln -s ../../"$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_DEPENDENCY_NAME"/tarballs/"$LFS_SOURCE_PACKAGE_FILENAME"
				
				# This logic ensures that mismatches in tarball compression between us and musl-cross are handled
				originalCompressionExtension="${LFS_SOURCE_PACKAGE_FILENAME##*.}"
				withoutCompressionExtension="$(basename "$LFS_SOURCE_PACKAGE_FILENAME" ."$originalCompressionExtension")"
				for newCompressionExtension in gz bz2 xz
				do
					if [ "$newCompressionExtension" = "$originalCompressionExtension" ]; then
						continue
					fi
					withNewCompressionExtension="$withoutCompressionExtension"."$newCompressionExtension"
					ln -s "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_DEPENDENCY_NAME"/tarballs/"$withNewCompressionExtension"
				done
				
				local muslCrossExtractedFolderName="$LFS_SOURCE_PACKAGE_NAME"-"$LFS_SOURCE_PACKAGE_VERSION"
				local muslCrossExtractedPath="$LFS_DEPENDENCY_NAME"/extra/"$muslCrossExtractedFolderName"
				
				# Override extracted tarball
				ln -s ../../"$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$muslCrossExtractedPath"
		
				# Override extract file name
				touch "$muslCrossExtractedPath"/extracted
				
				# gcc inner links (note binutils is NOT included, although it can be)
				case "$dependency" in
					
					gmp|mpfr|mpc)
						ln -s ../"$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$LFS_DEPENDENCY_NAME"/extra/gcc-"$gccVersion"/"$LFS_SOURCE_PACKAGE_NAME"
					;;
					
					*)
						:
					;;
					
				esac
			fi
		done
	done
	
	# Prepare a copy of this file for later default search path replacement
	pushd musl/src/ldso >/dev/null
		
		cp dynlink.c dynlink.c.orig
	
	popd >/dev/null
	
	pushd "$LFS_DEPENDENCY_NAME" >/dev/null
	
		pushd extra >/dev/null
	
			# 1 Fix HG_ID
			# 2 Remove deletion of share/ folder
			# 3 Remove tarball creation
			cp build-tarballs.sh build-tarballs.sh.orig
			sed -i -e "s/^HG_ID=.*$/HG_ID=$LFS_DEPENDENCY_VERSION/g" -e '/rm -rf "$TRIPLE/d' -e '/tar -cf - "$TRIPLE/d' build-tarballs.sh
	
			mv build-gcc-deps.sh build-gcc-deps.sh.orig
			#sed -i -e 's;^gitfetchextract '\''git://repo.or.cz/libelf-compat.git'\'' $LIBELF_VERSION libelf-$LIBELF_VERSION;fetchextract irrelevant elfutils-$LIBELF_VERSION .tar.gz;g' build-gcc-deps.sh
			#sed -i -e 's; buildmake libelf-; build '\'\'' libelf-;g' build-gcc-deps.sh
			#sed -i -e 's;libelf-$LIBELF_VERSION;elfutils-$LIBELF_VERSION;g' build-gcc-deps.sh
			grep -v libelf build-gcc-deps.sh.orig >build-gcc-deps.sh
			chmod +x build-gcc-deps.sh

			cp extraconfig.sh extraconfig.sh.orig

			cat >>extraconfig.sh <<-EOF
				BINUTILS_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["binutils"]}"
				GCC_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["gcc"]}"
				#GDB_VERSION=""
				GMP_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["gmp"]}"
				LIBELF_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["elfutils"]}"
				LINUX_HEADERS_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["linux"]}"
				MPC_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["mpc"]}"
				MPFR_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["mpfr"]}"
		
				MUSL_DEFAULT_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["musl"]}"
				MUSL_GIT_VERSION=c47e7062ddc1c3aa24db071db0f4d1dca792f325
				MUSL_VERSION="${LFS_DEPENDENCY_INCLUDE_VERSIONS["musl"]}"
				MUSL_GIT=no
		
				LANG_CXX=yes
				LANG_OBJC=no
				LANG_FORTRAN=no
		
				# Affects the bootstrap (1st) compiler
				GCC_BUILTIN_PREREQS=yes
		
				# Only affects the static cross-compilers; possibly might change
				NO_GCC_DEPS=yes
			
				# Compilation optimisation (all except final cross compiler)
				export MAKEFLAGS="--jobs $LFS_MAKE_JOBS --debug --print-directory"
				export CFLAGS="-pipe"
				export CXXFLAGS="-pipe"
			
				# Added by us to defs.sh to try to force a chroot-local sysroot
				LFS="$LFS"
				LFS_DEPENDENCY_PREFIX_PATH="$LFS_DEPENDENCY_PREFIX_PATH"
				LFS_DEPENDENCY_INSTALL_PATH="$LFS_DEPENDENCY_INSTALL_PATH"
				LFS_NATIVE_TRIPLE="$LFS_NATIVE_TRIPLE"
			
				# Added by us for the final install to harden and optimise the compiler
				LFS_NATIVE_CFLAGS="$LFS_LDFLAGS_MUSL ${settings_string[LFS_CFLAGS_NATIVE_CPU_OPTIMISATION]} -pipe -O1 $LFS_CFLAGS_HARDENING $LFS_LDFLAGS_OPTIMISATION"
				LFS_NATIVE_CXXFLAGS="$LFS_LDFLAGS_MUSL ${settings_string[LFS_CFLAGS_NATIVE_CPU_OPTIMISATION]} -pipe -O1 $LFS_CFLAGS_HARDENING $LFS_LDFLAGS_OPTIMISATION"
				LFS_FOREIGN_CFLAGS="$LFS_LDFLAGS_MUSL ${settings_string[LFS_CFLAGS_FOREIGN_CPU_OPTIMISATION]} -pipe -O1 $LFS_CFLAGS_HARDENING $LFS_LDFLAGS_OPTIMISATION"
				LFS_FOREIGN_CXXFLAGS="$LFS_LDFLAGS_MUSL ${settings_string[LFS_CFLAGS_FOREIGN_CPU_OPTIMISATION]} -pipe -O1 $LFS_CFLAGS_HARDENING $LFS_LDFLAGS_OPTIMISATION"
			EOF
		
		popd >/dev/null
		
			
		function symlinkLibVariantsBeforeBuilding()
		{
			local -r triple="$1"
			
			mkdir -m 0755 -p "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/lib
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/lib64
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/lib32
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/libx32
			
			mkdir -m 0755 -p "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/$triple/lib
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/$triple/lib64
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/$triple/lib32
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/$triple/libx32
			
			# For completeness, even though it's not used (note $triple/$triple/usr is created by musl-cross)
			ln -s . "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/usr
			
			# Just in case, ensures usr/local redirects
			ln -s . "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/local
			ln -s . "$LFS_DEPENDENCY_INSTALL_PATH"/$triple/$triple/local
		}
		
		symlinkLibVariantsBeforeBuilding "$LFS_NATIVE_TRIPLE"
		if [ "$LFS_NATIVE_ARCHITECTURE" != "$LFS_FOREIGN_ARCHITECTURE" ]; then
			symlinkLibVariantsBeforeBuilding "$LFS_FOREIGN_TRIPLE"
		fi
		
		# Adjust patch so that dynamic linker path /lib/ld-musl- is actually our path
		local patchFile=patches/gcc-"$gccVersion"-musl.diff
		cp "$patchFile" "$patchFile".orig
		
		# Adjust sysroot and install
		cat >>defs.sh <<-'EOF'
		
			unset CDPATH
			
			buildinstall()
			{
				echo "XXX buildinstall XXX $1 XXX $2 XXX $TRIPLE XXX $CC_PREFIX XXX"
				
				# Override musl build for non-bootstrap to specify dynamic linker search path
				if [ "$1" = '' -a "$2" = musl-$MUSL_VERSION -a "$CC_PREFIX" != "$LFS_DEPENDENCY_INSTALL_PATH"/bootstrap ]; then

					echo "XXX musl XXX $TRIPLE XXX"
					
					# Adjust patch so that dynamic linker path /lib/ld-musl- is actually our path
					# this dynamic linker path will only work inside the chroot
					cd "$LFS_DEPENDENCY_INSTALL_PATH"/../source/musl-cross/patches >/dev/null
					
						local patchFile=gcc-"$GCC_VERSION"-musl.diff
						rm "$patchFile"
						cp "$patchFile".orig "$patchFile"
						sed -i -e "s;/lib/ld-musl-;$LFS_DEPENDENCY_PREFIX_PATH/$TRIPLE/$TRIPLE/lib/ld-musl-;g" "$patchFile"
						
					cd - >/dev/null

					# replaces the default search path in ld-musl-XXX (the dynamic linker) so that we're safe from 'drop in /lib' attacks
					# this search path will only work inside the chroot
					cd "$LFS_DEPENDENCY_INSTALL_PATH"/../source/musl-"$MUSL_VERSION"/src/ldso >/dev/null

						rm dynlink.c
						cp dynlink.c.orig dynlink.c
						# technically, we should have /lib64, but we symlink it (above)
						sed -i -e "s;/lib:/usr/local/lib:/usr/lib;$LFS_DEPENDENCY_PREFIX_PATH/$TRIPLE/$TRIPLE/lib;g" dynlink.c
					
					cd - >/dev/null
					
					build "$@"
					doinstall "$1" "$2"
					
				elif [ "$1" = "2" -a "$2" = gcc-$GCC_VERSION -a "$CC_PREFIX" != "$LFS_DEPENDENCY_INSTALL_PATH"/bootstrap ]; then

					echo "XXX gcc XXX"
					
					# We are going to override sysroot, local prefix (and prefix)
					
					# We also need a final build of binutils with this corrected sysroot, so we link in the binaries for an in-tree build
					# We do not need to build musl again, because it has no path dependencies (except for the musl-gcc wrapper and specs, which we won't require in any event)
					
					cd "$MUSL_CC_BASE"/../gcc-$GCC_VERSION >/dev/null
						
						make clean || true
					
						for binutilsFile in ../binutils-"$BINUTILS_VERSION"/*
						do
							# suppress existing entries
							ln -sv "$binutilsFile" 2>/dev/null || true
						done
						
						make clean || true
					
					cd - >/dev/null
					
					if [ "$CC_PREFIX" = "$LFS_DEPENDENCY_INSTALL_PATH"/"$LFS_NATIVE_TRIPLE" ]; then
						local ourCFLAGS="$LFS_NATIVE_CFLAGS"
						local ourCXXFLAGS="$LFS_NATIVE_CXXFLAGS"
					else
						local ourCFLAGS="$LFS_FOREIGN_CFLAGS"
						local ourCXXFLAGS="$LFS_FOREIGN_CXXFLAGS"
					fi
					
					# Was --with-lib-path="$SYSROOT_PREFIX_FOR_GCC"/"$TRIPLE"/lib64:"$SYSROOT_PREFIX_FOR_GCC"/"$TRIPLE"/lib \
					# PREFIX is used inside build to do --prefix=$PREFIX, this should force it to be overridden
					# --disable-werror and --with-lib-path for embedded binutils
					# --with-lib-path did have =/lib64 but we now symlink =/lib64 to =/lib
					# --sysroot seems to be ignored, and g++ is built with --with-build-sysroot !
					local ourPrefix="$LFS_DEPENDENCY_PREFIX_PATH"/"$TRIPLE"
					
					PREFIX="$ourPrefix" build "$1" "$2" \
						CFLAGS_FOR_BUILD="$ourCFLAGS" \
						CXXFLAGS_FOR_BUILD="$ourCXXFLAGS" \
						--target="$TRIPLE" \
						--with-local-prefix="$ourPrefix" \
						--with-sysroot="$ourPrefix" \
						--with-build-sysroot="$PREFIX"/"$TRIPLE" \
				        --enable-languages="$LANGUAGES" \
						--disable-multilib \
						--disable-libmudflap \
				        --disable-libsanitizer \
							--disable-werror \
							--with-lib-path="=/lib" \
			        $GCC_CONFFLAGS
					
					doinstall "$1" "$2" DESTDIR="$LFS"
					
				else

					echo "XXX allothers XXX"
					
					build "$@"
					doinstall "$1" "$2"
					
				fi
			}
		EOF
		
		pushd extra >/dev/null
			
			if [ "$LFS_NATIVE_ARCHITECTURE" = "$LFS_FOREIGN_ARCHITECTURE" ]; then
				./build-tarballs.sh "$LFS_DEPENDENCY_INSTALL_PATH" "prefix-" "-suffix" "$LFS_NATIVE_ARCHITECTURE"
			else
				./build-tarballs.sh "$LFS_DEPENDENCY_INSTALL_PATH" "prefix-" "-suffix" "$LFS_NATIVE_ARCHITECTURE" "$LFS_FOREIGN_ARCHITECTURE"
			fi
		
		popd >/dev/null
	
	popd >/dev/null
	
	function package_crosscompiler_musl-cross_patchUpFileSystem()
	{
		local -r architecture="$1"
		local -r triple="$2"
		
		pushd "$triple" >/dev/null
	
			# Remove gcc, g++, ar, ld, etc hardlinks and replace with softlinks (1)
			local binary
			for binary in addr2line ar as c++filt elfedit gcov gprof ld nm objcopy objdump ranlib readelf size strings strip
			do
				ln -s ../../../../bin/"$triple"-"$binary" libexec/gcc/"$triple"/"$gccVersion"/"$binary"
			done
			
			# Create libc.so
			pushd "$triple" >/dev/null
				
				# Remove gcc, g++, ar, ld, etc hardlinks and replace with softlinks (2)
				rm -rf bin/*
				
				pushd lib >/dev/null
					chmod +x libc.so
					ln -s libc.so ld-musl-"$architecture".so.1
				popd >/dev/null
				
			popd >/dev/null
			
			pushd bin >/dev/null
			
				# Create ldd
				ln -s ../"$triple"/lib/libc.so "$triple"-ldd
				ln -s "$triple"-ldd ldd
				
				# Remove musl-cross reverse symlinks
				rm -rf -- "$architecture"-musl-*
				
				# Remove gcc binutils
				rm -rf -- "$triple"-gcc-ar "$triple"-gcc-nm "$triple"-gcc-ranlib
				
				# Remove gcc version
				rm -rf -- "$triple"-gcc-"$gccVersion"
				
				# Remove ld.bfd
				rm -rf -- "$triple"-ld.bfd
				
				# Remove c++
				rm -rf -- "$triple"-c++ "$triple"-cpp
				
			popd >/dev/null
			
		popd >/dev/null
	}
	
	pushd ../install >/dev/null
	
		# Remove bootstrap
		rm -rf -- bootstrap
		
		package_crosscompiler_musl-cross_patchUpFileSystem "$LFS_NATIVE_ARCHITECTURE" "$LFS_NATIVE_TRIPLE"
		if [ "$LFS_NATIVE_ARCHITECTURE" != "$LFS_FOREIGN_ARCHITECTURE" ]; then
			package_crosscompiler_musl-cross_patchUpFileSystem "$LFS_FOREIGN_ARCHITECTURE" "$LFS_FOREIGN_TRIPLE"
		fi
		
	popd >/dev/null
}
