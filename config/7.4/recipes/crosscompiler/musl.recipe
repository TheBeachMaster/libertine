set -o errexit +o hashall

# Unlinke glibc, musl does not depend on the linux headers!
version 0.9.14
{
	depends gcc-cross
	
	install_binaries_in_paths bin
}

# libcxx, libcxxabi (includes libunwind), libc++ etc
#  http://wiki.musl-libc.org/wiki/BuildingLLVM
#  http://comments.gmane.org/gmane.comp.compilers.clang.devel/30074
# http://solarianprogrammer.com/2013/01/17/building-clang-libcpp-ubuntu-linux/

# Install libc++ headers (libcxx)
# Build libc++abi (libcxxabi)
# Build libc++ (libcxx)

# OR (see here http://libcxx.llvm.org/)

# Build cmake
# Build libunwind
# Build libcxxrt (libc++rt) against musl
# Build libc++ (libcxx)

# OR http://ellcc.org/blog/?p=251

function dead()
{
	local dependencyKey
	local gccCrossDependencyKey
	for dependencyKey in ${dependency_Dependencies["$LFS_DEPENDENCY_KEY"]}
	do
		if [ "${dependency_Name["$dependencyKey"]}" = "gcc-cross" ]; then
			gccCrossDependencyKey="$dependencyKey"
			break
		fi
	done
	
	if [ -z "$gccCrossDependencyKey" ]; then
		exitError "gcc-cross dependency not found"
	fi
	
	echo $(pwd)
	
	local -r gccCrossBinPath="${LFS_DEPENDENCY_RELATIVE_PATH_TO_ROOT_FROM_INSTALL_FOLDER}${dependency_Path["$gccCrossDependencyKey"]}"/install/"$LFS_TARGET"
	pushd "$gccCrossBinPath" >/dev/null
		local -r newPath="$(pwd):$PATH"
	popd >/dev/null
}

function installPackage_crosscompiler_musl()
{
	pushdDependencyFolder
	
		# syslibdir is where the dynamic linker will go, and is baked in by musl-gcc
		# includedir defaults to PREFIX/include, not PREFIX/usr/include (logical, if a violation of FHS)
		CC="${LFS_TARGET}-gcc" ./configure \
		--prefix="$LFS_DEPENDENCY_PREFIX_PATH" \
		--exec-prefix="$LFS_DEPENDENCY_PREFIX_PATH" \
		--syslibdir="$LFS_DEPENDENCY_PREFIX_PATH"/lib \
		--target="$LFS_TARGET" \

		make

		make DESTDIR="$LFS" install
		
		rm "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/lib/ld-musl-""$LFS_ARCHITECTURE"".so.1
		ln -s libc.so "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/lib/ld-musl-""$LFS_ARCHITECTURE"".so.1
		
		ln -s ../lib/ld-musl-""$LFS_ARCHITECTURE"".so.1 "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/bin/ldd
	
		# Create a second set of specs to support musl compilation when running from outside of the chroot
		cp "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/bin/musl-gcc "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/bin/musl-gcc-external
		sed -i -e "s;/opt/;${LFS}/opt/;g" "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/bin/musl-gcc-external
		sed -i -e "s;musl-gcc.specs;musl-gcc-external.specs;g" "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/bin/musl-gcc-external
	
		cp "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/lib/musl-gcc.specs "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/lib/musl-gcc-external.specs
		sed -i -e "s;/opt/;${LFS}/opt/;g" "${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/lib/musl-gcc-external.specs
	
	popdDepdendencyFolder
	
	installBinariesToPath bin
}