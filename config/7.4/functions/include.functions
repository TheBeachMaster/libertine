set -o errexit +o hashall

function includeMirrors()
{
	progressMessage "Including mirror $mirrors"
	
	pushd "$mirrorsPath" >/dev/null
		
		include_mirror "$mirrors"
		
	popd >/dev/null
	
	local requiredMirrorName
	for requiredMirrorName in "${!signatures_Mirror[@]}" "${!keyrings_Mirror[@]}" "${!keys_Mirror[@]}" "${!sourcePackages_Mirror[@]}" "${!patches_Mirror[@]}"
	do
		if ! mirrorExists "$requiredMirrorName"; then
			progressMessageFailed "Mirror $requiredMirrorName is not defined in mirrors $mirrors"
		fi
	done
	
	progressMessageSucceeded
}

function machineSettingDefaults()
{
	setting_string LFS_HOSTNAME "$1"
	
	setting_string LFS_NATIVE_ARCHITECTURE x86_64
	setting_string LFS_FOREIGN_ARCHITECTURE x86_64
	setting_string LFS_CFLAGS_NATIVE_CPU_OPTIMISATION "-march=bdver2 -mtune=bdver2"
	setting_string LFS_CFLAGS_FOREIGN_CPU_OPTIMISATION "-march=bdver2 -mtune=bdver2"
	setting_string LFS_LDFLAGS_DEBUGGING "-Wl,--strip-debug"

	setting_string LFS_AUTOTOOLS_CONFIG_VERSION "5e4de70bb0064d974a848fbe3a445d5dafaf7b48"
	setting_string LFS_AUTOTOOLS_GNULIB_VERSION "43fd1e7b5a01623bc59fcf68254ce5be8e0b8d42"

	setting_string LFS_DISTRIBUTION_ID "Linux From Scratch"
	setting_string LFS_DISTRIBUTION_CODENAME "stormmq"
	setting_string LFS_DISTRIBUTION_DESCRIPTION "Linux From Scratch"

	setting_integer LFS_INCLUSIVE_SYSTEM_UID 1000
	setting_integer LFS_INCLUSIVE_SYSTEM_GID 1000
	setting_integer LFS_INCLUSIVE_USER_UID 10000
	setting_integer LFS_INCLUSIVE_USER_GID 10000
}

function verifyMachineSettings()
{
	verifyStringSetting LFS_HOSTNAME simple
	
	verifyStringSetting LFS_NATIVE_ARCHITECTURE
	verifyStringSetting LFS_FOREIGN_ARCHITECTURE
	verifyStringSetting LFS_CFLAGS_NATIVE_CPU_OPTIMISATION
	verifyStringSetting LFS_LDFLAGS_DEBUGGING

	verifyStringSetting LFS_AUTOTOOLS_CONFIG_VERSION
	verifyStringSetting LFS_AUTOTOOLS_GNULIB_VERSION

	verifyStringSetting LFS_DISTRIBUTION_ID
	verifyStringSetting LFS_DISTRIBUTION_CODENAME
	verifyStringSetting LFS_DISTRIBUTION_DESCRIPTION
	
	verifyIntegerSetting LFS_INCLUSIVE_SYSTEM_UID
	verifyIntegerSetting LFS_INCLUSIVE_SYSTEM_GID
	verifyIntegerSetting LFS_INCLUSIVE_USER_UID
	verifyIntegerSetting LFS_INCLUSIVE_USER_GID
}

function includeMachineSettings()
{
	machineSettingDefaults "$machine"
	
	machineSettingsFile="$machinesPath"/"$machine".settings
	if [ ! -f "$machineSettingsFile" ]; then
		exitError "No settings file $machineSettingsFile for machine $machine"
	fi
	source "$machineSettingsFile"
	
	verifyMachineSettings
	
	declare_for_chroot LFS_MACHINE_SETTINGS_HASH
	LFS_MACHINE_SETTINGS_HASH="$(sha256sum "$machineSettingsFile" | awk 'NR==1 {print $1}')"
}

function includeLeafRecipe()
{
	local -r phase="$1"
	shift 1
	
	declare -A LFS_RECIPE_VERSIONS
	declare -A LFS_RECIPE_VERSION
	
	LFS_PHASE="$phase" depends "$@" 'zzz-lfs'
	
	declare -A LFS_RECIPE_VERSION
	unset LFS_RECIPE_VERSIONS
}

function doInclude()
{
	includeMirrors
	
	includeMachineSettings
	
	setArchitectures
	setCFlags
	
	includeLeafRecipe crosscompiler
	includeLeafRecipe toolchain2
	includeLeafRecipe system 
}
