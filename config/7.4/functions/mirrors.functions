set -o errexit +o hashall

# NOTE: fileName should match the commonly known name - usually that used by Debian's openssl certs package
declare_for_chroot -A certificateAuthorities_Parent
declare_for_chroot -A certificateAuthorities_Mirror
declare_for_chroot -A certificateAuthorities_RelativePath
declare_for_chroot -A certificateAuthorities_FileName
declare_for_chroot -A certificateAuthorities_Hashes
declare_for_chroot -A certificateAuthorities_Compression
declare_for_chroot -A certificateAuthorities_Post
declare_for_chroot -A certificateAuthorities_Format

function certificate_authority()
{
	if [ $# -lt 5 ]; then
		exitError "Needs 5, 6 or 7 arguments"
	elif [ $# -gt 7 ]; then
		exitError "Needs 5, 6 or 7 arguments"
	fi
	
	local -r parentCertificateAuthorityName="$1"
	
	local -r certificateAuthorityName="$2"
	local -r mirrorName="$3"
	local -r relativePath="$4"
	local -r ourHashes="$5"
	
	if [ $# -gt 5 ]; then
		local -r fileName="$6"
	else
		local -r fileName="$(purebash_basename "$relativePath")"
	fi
	
	if [ $# -eq 7 ]; then
		local -r format="$7"
	else
		local -r format="PEM"
	fi
	
	if [ "$certificateAuthorityName" = "root" ]; then
		exitError "A certificate authority may not be called 'root'"
	fi
	
	if ! mirrorExists "$mirrorName"; then
		exitError "Mirror $mirrorName does not exist for certificate authority $certificateAuthorityName"
	fi
	
	if [ "$parentCertificateAuthorityName" != "root" ]; then
		if ! certificateAuthorityExists "$parentCertificateAuthorityName"; then
			exitError "Parent certificate authority $parentCertificateAuthorityName does not exist for certificate authority $certificateAuthorityName"
		fi
	fi
	
	certificateAuthorities_Parent["${certificateAuthorityName}"]="$parentCertificateAuthorityName"
	certificateAuthorities_Mirror["${certificateAuthorityName}"]="$mirrorName"
	certificateAuthorities_RelativePath["${certificateAuthorityName}"]="$relativePath"
	certificateAuthorities_FileName["${certificateAuthorityName}"]="$fileName"
	certificateAuthorities_Hashes["${certificateAuthorityName}"]="${ourHashes//,/ }"
	certificateAuthorities_Compression["${certificateAuthorityName}"]=""
	certificateAuthorities_Format["${certificateAuthorityName}"]="$format"
	certificateAuthorities_Post["${certificateAuthorityName}"]="$LFS_DOWNLOAD_POST"
}

function certificateAuthorityExists()
{
	local -r requiredCertificateAuthorityName="$1"
	local certificateAuthorityName
	for certificateAuthorityName in "${!certificateAuthorities_Mirror[@]}"
	do
		if [ "$certificateAuthorityName" = "$requiredCertificateAuthorityName" ]; then
			return 0
		fi
	done
	return 1
}

declare_for_chroot -A mirrors_Url
declare_for_chroot -A mirrors_CertificateAuthority
function mirror
{
	case $# in
		
		2|3)
			local -r mirrorName="$1"
			local -r url="$2"
		;;
		
		*)
			exitError "Needs 2 or 3 arguments"
		;;
		
	esac
	
	mirrors_Url["${mirrorName}"]="$url"
	
	if [ $# -eq 3 ]; then
		local -r certificateAuthorityName="$3"
		if ! certificateAuthorityExists "$certificateAuthorityName"; then
			exitError "Certificate Authority $certificateAuthorityName does not exist for mirror $mirrorName"
		fi
	else
		local -r certificateAuthorityName=""
	fi
	mirrors_CertificateAuthority["${mirrorName}"]="$certificateAuthorityName"
}

function mirrorExists()
{
	local -r requiredMirrorName="$1"
	local mirrorName
	for mirrorName in "${!mirrors_Url[@]}"
	do
		if [ "$mirrorName" = "$requiredMirrorName" ]; then
			return 0
		fi
	done
	return 1
}




# Defunct
function rehashCertificateAuthorities()
{
	# See https://docs.google.com/a/stormmq.com/spreadsheet/pub?key=0Ah-tHXMAwqU3dGx0cGFObG9QM192NFM4UWNBMlBaekE&single=true&gid=1&output=html for CAs
	
	if ! which openssl 1>/dev/null 2>/dev/null; then
		warning "openssl isn't present, so we can't rehash certificate authorities (only matters if curl is linked to openssl and you have changed the certificate authorities)"
		return 0
	fi
	
	pushd "$certificateAuthoritiesPath" >/dev/null
		local values
		local hashValue
		local sha1ColonSeparated
		local hashIndex
		local hashFile
		local hashValue2
		local sha1ColonSeparated2
		for certificateAuthority in *.pem
		do
			values="$(openssl x509 -subject_hash -fingerprint -noout -in "$certificateAuthority" | awk 'BEGIN { FS="\n"; RS=""; OFS="\t"} {print $1,substr($2,18)}')"
			IFS=$'\t' read -r -d $'\n' hashValue sha1ColonSeparated <<<"$values"
			hashIndex=0
			while :
			do
				hashFile="$hashValue"."$hashIndex"
				
				if [ -L "$hashFile" ]; then
					# It's possible this is a symlink to the same (or similar) file)
					values="$(openssl x509 -subject_hash -fingerprint -noout -in "$certificateAuthority" | awk 'BEGIN { FS="\n"; RS=""; OFS="\t"} {print $1,substr($2,18)}')"
					IFS=$'\t' read -r -d $'\n' hashValue2 sha1ColonSeparated2 <<<"$values"
					if [ "$sha1ColonSeparated2" = "$sha1ColonSeparated" ]; then
						break
					fi
					hashIndex=$((hashIndex+1))
					continue
				fi
				
				if [ -e "$hashFile" ]; then
					rm -rf -- "$hashFile"
				fi
				
				ln --symbolic "$certificateAuthority" "$hashFile"
				break
			done
		done
	popd >/dev/null
}
