set -o errexit +o hashall

function setLocale()
{
	export LC_ALL=POSIX
}

function setMakeFlags()
{
	essentialProgramCheck make grep
	
	if [ -f /proc/cpuinfo ]; then
		local -i cpuCount=$(grep -c '^processor'$'\t' /proc/cpuinfo)
	else
		local -ir cpuCount=1
	fi
	
	declare_for_chroot -i LFS_MAKE_JOBS
	LFS_MAKE_JOBS=$((cpuCount*2))
	
	declare_for_chroot -x MAKEFLAGS
	export MAKEFLAGS="--jobs $((cpuCount*2)) --debug"
}

function setArchitectures()
{
	LFS_NATIVE_ARCHITECTURE="${settings_string[LFS_NATIVE_ARCHITECTURE]}"
	LFS_FOREIGN_ARCHITECTURE="${settings_string[LFS_FOREIGN_ARCHITECTURE]}"
	
	LFS_NATIVE_TRIPLE="$LFS_NATIVE_ARCHITECTURE"-linux-musl
	LFS_FOREIGN_TRIPLE="$LFS_FOREIGN_ARCHITECTURE"-linux-musl
	
	LFS_CROSS_COMPILER_PREFIX="$LFS_FOREIGN_ARCHITECTURE"-linux-musl-
}

function setCFlags()
{
	# musl prefers hash-style=both
	# disable-new-dtags forces the use DT_RPATH rather than DT_RUNPATH for rpath; musl only uses DT_RPATH
	LFS_LDFLAGS_MUSL="-Wl,--hash-style=both -Wl,--disable-new-dtags"

	local -r cOptimisation="-O2 -fno-omit-frame-pointer -pipe"
	
	local -r cNativeTuningFlags="${settings_string[LFS_CFLAGS_NATIVE_CPU_OPTIMISATION]}"
	if [ -z "$cNativeTuningFlags" ]; then
		LFS_CFLAGS_NATIVE_OPTIMISATION="$cOptimisation"
	else
		LFS_CFLAGS_NATIVE_OPTIMISATION="$cNativeTuningFlags $cOptimisation"
	fi
	local -r cForeignTuningFlags="${settings_string[LFS_CFLAGS_NATIVE_CPU_OPTIMISATION]}"
	if [ -z "$cForeignTuningFlags" ]; then
		LFS_CFLAGS_FOREIGN_OPTIMISATION="$cOptimisation"
	else
		LFS_CFLAGS_FOREIGN_OPTIMISATION="$cForeignTuningFlags $cOptimisation"
	fi
	
	# musl ignores this value currently
	LFS_CFLAGS_HARDENING="-D_FORTIFY_SOURCE=2"
	
	local -r ldOptimisationFlags="-Wl,-O1"
	local -r ldDebugFlags="${settings_string[LFS_LDFLAGS_DEBUGGING]}"
	if [ -n "$ldDebugFlags" ]; then
		LFS_LDFLAGS_OPTIMISATION="$ldOptimisationFlags $ldDebugFlags"
	else
		LFS_LDFLAGS_OPTIMISATION="$ldOptimisationFlags"
	fi
	
	# http://tk-blog.blogspot.co.uk/2009/02/relro-not-so-well-known-memory.html
	# http://www.tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html
	# https://wiki.debian.org/ToolChain/DSOLinking#Only_link_with_needed_libraries
	# https://wiki.ubuntu.com/ToolChain/CompilerFlags?action=show&redirect=CompilerFlags
	# --as-needed MAY cause a few problems for old packages
	# --no-copy-dt-needed-entries is believed to now be default and so is not specified
	LFS_LDFLAGS_HARDENING="-Wl,-z,relro -Wl,-z,now -Wl,--as-needed"
	
	#LFS_LDFLAGS_STATIC="-static -static-libgcc -static-libstdc++ -Wl,-Bstatic"
	LFS_LDFLAGS_STATIC="-static"
	
	# Advice taken from https://wiki.gentoo.org/wiki/GCC_optimization and http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options
	declare_for_chroot CFLAGS
	declare_for_chroot CFLAGS_FOR_BUILD
	CFLAGS="$LFS_CFLAGS_NATIVE_OPTIMISATION "$LFS_CFLAGS_HARDENING" $LFS_LDFLAGS_MUSL $LFS_LDFLAGS_OPTIMISATION $LFS_LDFLAGS_HARDENING"
	CFLAGS_FOR_BUILD="$CFLAGS"
	
	declare_for_chroot CXXFLAGS
	declare_for_chroot CXXFLAGS_FOR_BUILD
	CXXFLAGS="$CFLAGS"
	CXXFLAGS_FOR_BUILD="$CXXFLAGS"
}
