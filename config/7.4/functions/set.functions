set -o errexit +o hashall

function doSets()
{
	setLocale
	setArchitectures
	setMakeFlags
	setCFlags
}

function setLocale()
{
	export LC_ALL=POSIX
}

function setArchitectures()
{
	# MACHTYPE might be x86_64-pc-linux-gnu or i386-apple-darwin9 (CPU, company, OS [eg linux-gnu])
	# known as 3 component and 4 component triples (such as x86_64-unknown-linux-gnu)
	# 
	
	# Or gcc -dumpmachine | sed 's/-.*//'
	# Or uname -m

	# LFS_CPU is used for -march=LFS_CPU
	case "$(echo $MACHTYPE | awk -v FS=- '{print $1}')" in
		
		i386|i486|i586|i686)
			LFS_ARCHITECTURE=i386
			LFS_CPU=native
		;;
		
		x86_64)
			LFS_ARCHITECTURE=x86_64
			LFS_CPU=bdver2
		;;
		
		arm*)
			LFS_ARCHITECTURE=arm
			LFS_CPU=native
		;;
		
		mips*)
			LFS_ARCHITECTURE=mips
			LFS_CPU=native
		;;
		
		powerpc* | ppc*)
			LFS_ARCHITECTURE=powerpc
			LFS_CPU=native
		;;
		
		*)
			exitError "Unsupported architecture in $MACHTYPE"
		;;
		
	esac
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_ARCHITECTURE')
	
	# Four-component style
	LFS_TARGET="$LFS_ARCHITECTURE"-lfs-linux-gnu
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_TARGET')
	
	# Triple
	LFS_TRIPLE="$LFS_ARCHITECTURE"-linux-musl
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_TRIPLE')
}

function setMakeFlags()
{
	essentialProgramCheck make grep
	
	if [ -f /proc/cpuinfo ]; then
		local -i cpuCount=$(grep -c '^processor'$'\t' /proc/cpuinfo)
	else
		local -ir cpuCount=1
	fi
	
	declare_for_chroot -x MAKEFLAGS
	export MAKEFLAGS="--jobs $((cpuCount*2)) --debug=bijm"
}

function setCFlags()
{
	# Also, https://wiki.ubuntu.com/Security/Features
	
	LFS_CFLAGS_OPTIMISATION="-march=${LFS_CPU} -O2 -fno-omit-frame-pointer -pipe"
	
	LFS_CFLAGS_HARDENING="-D_FORTIFY_SOURCE=2"
	
	LFS_LDFLAGS_OPTIMISATION="-Wl,--strip-debug"
	
	LFS_LDFLAGS_HARDENING="-Wl,-z,relro,-z,now"
	
	LFS_LDFLAGS_STATIC="-static -Wl,-Bstatic -static-libgcc -static-libstdc++"
	
	# Advice taken from https://wiki.gentoo.org/wiki/GCC_optimization and http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options
	declare_for_chroot CFLAGS
	declare_for_chroot CFLAGS_FOR_BUILD
	CFLAGS="$LFS_CFLAGS_OPTIMISATION "$LFS_CFLAGS_HARDENING" $LFS_LDFLAGS_OPTIMISATION $LFS_LDFLAGS_HARDENING"
	CFLAGS_FOR_BUILD="$CFLAGS"
	
	declare_for_chroot CXXFLAGS
	declare_for_chroot CXXFLAGS_FOR_BUILD
	CXXFLAGS="$CFLAGS"
	CXXFLAGS_FOR_BUILD="$CXXFLAGS"
}
