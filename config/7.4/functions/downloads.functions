set -o errexit +o hashall

function doDownloads()
{
	# Download certificate authorities in parallel
	local certificateAuthorityName
	for certificateAuthorityName in "${!certificateAuthorities_Mirror[@]}"
	do
		( downloadFileAndCheckHash "certificate authority" "${certificateAuthorities_Mirror["${certificateAuthorityName}"]}" "${certificateAuthorities_RelativePath["${certificateAuthorityName}"]}" "$certificateAuthoritiesPath" "${certificateAuthorities_FileName["${certificateAuthorityName}"]}" "${certificateAuthorities_Compression["${certificateAuthorityName}"]}" "${certificateAuthorities_Post["${certificateAuthorityName}"]}" "no" "${certificateAuthorities_Hashes["${certificateAuthorityName}"]}" ) &
	done
	wait
	
	# Download signatures, keyrings and keys in parallel
	local -i index
	for index in ${!signatures_Mirror[@]}
	do
		( downloadFileAndCheckHash "signature" "${signatures_Mirror[$index]}" "${signatures_RelativePath[$index]}" "$signaturesPath" "${signatures_FileName[$index]}" "${signatures_Compression[$index]}" "${signatures_Post[$index]}" "yes" "" ) &
	done
	local -i index
	for index in ${!keyrings_Mirror[@]}
	do
		( downloadFileAndCheckHash "keyring" "${keyrings_Mirror[$index]}" "${keyrings_RelativePath[$index]}" "$keyringsPath" "${keyrings_FileName[$index]}" "${keyrings_Compression[$index]}" "${keyrings_Post[$index]}" "no" "${keyrings_Hashes[$index]}" ) &
	done
	local -i index
	for index in ${!keys_Mirror[@]}
	do
		( downloadFileAndCheckHash "key" "${keys_Mirror[$index]}" "${keys_RelativePath[$index]}" "$keysPath" "${keys_FileName[$index]}" "${keys_Compression[$index]}" "${keys_Post[$index]}" "yes" "${keys_Hashes[$index]}" ) &
	done
	wait
	
	# Download packages and patches in parallel
	local -i index
	for index in ${!sourcePackages_Mirror[@]}
	do
		( downloadFileAndCheckHash "source package" "${sourcePackages_Mirror[$index]}" "${sourcePackages_RelativePath[$index]}" "/dev/null" "${sourcePackages_FileName[$index]}" "${sourcePackages_Compression[$index]}" "${sourcePackages_Post[$index]}" "no" "${sourcePackages_Hashes[$index]}" ) &
	done
	local -i index
	for index in ${!patches_Mirror[@]}
	do
		( downloadFileAndCheckHash "patch" "${patches_Mirror[$index]}" "${patches_RelativePath[$index]}" "/dev/null" "${patches_FileName[$index]}" "${patches_Compression[$index]}" "${patches_Post[$index]}" "no" "${patches_Hashes[$index]}" ) &
	done
	wait
}
