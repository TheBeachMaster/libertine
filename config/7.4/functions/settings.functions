set -o errexit +o hashall

declare_for_chroot -A settings_string
function setting_string
{
	if [ $# -ne 2 ]; then
		exitError "Needs 2 arguments"
	fi
	
	settings_string["$1"]="$2"
}

declare_for_chroot -Ai settings_integer
function setting_integer
{
	if [ $# -ne 2 ]; then
		exitError "Needs 2 arguments"
	fi
	
	settings_integer["$1"]=$2
}

declare_for_chroot -Ai settings_binary
function setting_binary
{
	if [ $# -ne 2 ]; then
		exitError "Needs 2 arguments"
	fi
	
	if [ $2 -gt 1 ]; then
		exitError "binary value for $1 must be 0 (false) or 1 (true), not $2"
	elif [ $2 -lt 0 ]; then
		exitError "binary value for $1 must be 0 (false) or 1 (true), not $2"
	fi
	
	settings_binary["$1"]=$2
}

# Use I18NPATH for -i and --prefix
declare_for_chroot -A settings_locale_Commands
function include_locale()
{
	local -r inputFileName="$1"
	local -r charmapFileName="$2"
	if [ $# -eq 2 ]; then
		localeName="${inputFileName}.${charmapFileName}"
	elif [ $# -eq 3 ]; then
		localeName="$3"
	else
		exitError "Needs 2 or 3 arguments"
	fi
	
	# TODO - last entry wins without warning!
	local -r key="$(printf '%s' "${localeName}" | tr --complement '[:alpha:][:digit:]' '_')"
	settings_locale_Commands["${key}"]="localedef -i "\'"$inputFileName"\'" -f "\'"$charmapFileName"\'" "\'"$localeName"\'
}

declare_for_chroot -a settings_timezone_Regions
function timezone_region()
{
	if [ $# -eq 0 ]; then
		exitError "Provide 1 or more timezone regions"
	fi
	
	local -r timezoneRegion="$1"
	
	local existingTimezoneRegion
	for existingTimezoneRegion in "${settings_timezone_Regions[@]}"
	do
		if [ "$existingTimezoneRegion" = "$timezoneRegion" ]; then
			return 0
		fi
	done
	
	settings_timezone_Regions+=("$timezoneRegion")
}

function verifySetting()
{
	local -r keyToVerify="$1"
	local key
	for key in "${!settings_string[@]}"
	do
		if [ "$keyToVerify" = "$key" ]; then
			return 0
		fi
	done
	exitError "Missing essential setting $keyToVerify"
}
