set -o errexit +o hashall

declare_for_chroot -a LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT
declare_for_chroot INSTALLATION_FAILED_MESSAGE

declare_for_chroot -a LFS_ARRAY_VARIABLES_TO_REDECLARE_IN_CHROOT
redeclare_array_for_chroot trapHandlers
redeclare_array_for_chroot filesToRemoveOnExit

function initialiseTraps()
{
	addNextTrapHandler removeFilesOnExit
}

function addInstallationFailedTrapHandler()
{
	addNextTrapHandler installationFailedTrapHandler
}

function runOnTrap()
{
	local trapHandler
	for trapHandler in "${trapHandlers[@]}"
	do
		$trapHandler
	done
}

function addNextTrapHandler()
{
	local trapHandler="$1"
	trap runOnTrap 0 HUP INT QUIT ILL ABRT FPE SEGV PIPE TERM EXIT
	trapHandlers+=("$trapHandler")
}

function removeLastTrapHandler()
{
	unset trapHandlers[$((${#trapHandlers[*]}-1))]
}

function installationFailedTrapHandler()
{
	informationMessage "$INSTALLATION_FAILED_MESSAGE ($SECONDS seconds)" 1>&6 2>&7
}

function removeFilesOnExit()
{
	rm -rf -- "${filesToRemoveOnExit[@]}"
}

function addFileToRemoveOnExit()
{
	local -r fileToRemove="$1"
	filesToRemoveOnExit+=("$fileToRemove")
}

function temporaryFileToRemoveOnExit()
{
	TMP_FILE="$(mktemp -t "$ourName".XXXXXXXXXXXX)"
	filesToRemoveOnExit+=("$TMP_FILE")
}

function temporaryFolderToRemoveOnExit()
{
	TMP_FILE="$(mktemp -t -d "$ourName".XXXXXXXXXXXX)"
	filesToRemoveOnExit+=("$TMP_FILE")
}
