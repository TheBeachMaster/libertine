set -o errexit +o hashall

function setPathsAfterSourcingFunctions()
{
	readonly settingsPath="$lfsConfigPath"/settings
	if [ ! -d "$settingsPath" ]; then
		exitError "settings path $settingsPath does not exist or is not a directory"
	fi
	
	readonly machinesPath="$settingsPath"/machines
	if [ ! -d "$machinesPath" ]; then
		exitError "machines path $machinesPath does not exist or is not a directory"
	fi
	
	includeMachineSettings
	
	setRemainingPathsAfterIncludingMachineSettings
}

function setRemainingPathsAfterIncludingMachineSettings()
{
	readonly distributionConfigPath="$lfsConfigPath"/distributions/"$LFS_DISTRIBUTION_VERSION"
	if [ ! -d "$distributionConfigPath" ]; then
		exitError "distribution config path $distributionConfigPath does not exist or is not a directory"
	fi
	
	readonly certificateAuthoritiesPath="$lfsConfigPath"/certificate-authorities
	if [ ! -d "$certificateAuthoritiesPath" ]; then
		exitError "certificate-authorities path $certificateAuthoritiesPath does not exist or is not a directory"
	fi
	
	readonly gpghomePath="$lfsConfigPath"/gpghome
	if [ ! -d "$gpghomePath" ]; then
		exitError "gpghome path $gpghomePath does not exist or is not a directory"
	fi
	
	readonly keyringsPath="$lfsConfigPath"/keyrings
	if [ ! -d "$keyringsPath" ]; then
		exitError "Keyrings path $keyringsPath does not exist or is not a directory"
	fi
	
	readonly keysPath="$lfsConfigPath"/keys
	if [ ! -d "$keysPath" ]; then
		exitError "Keys path $keysPath does not exist or is not a directory"
	fi
	
	readonly signaturesPath="$lfsConfigPath"/signatures
	if [ ! -d "$signaturesPath" ]; then
		exitError "Signatures path $signaturesPath does not exist or is not a directory"
	fi
	
	readonly mirrorsPath="$distributionConfigPath"/mirrors
	if [ ! -d "$mirrorsPath" ]; then
		exitError "Mirrors path $mirrorsPath does not exist or is not a directory"
	fi
	
	readonly recipesPath="$distributionConfigPath"/recipes
	if [ ! -d "$recipesPath" ]; then
		exitError "Recipes path $recipesPath does not exist or is not a directory"
	fi
	
	readonly includesPath="$distributionConfigPath"/includes
	if [ ! -d "$includesPath" ]; then
		exitError "includes path $includesPath does not exist or is not a directory"
	fi
	
	readonly helpersPath="$distributionConfigPath"/helpers
	if [ ! -d "$helpersPath" ]; then
		exitError "helpers path $helpersPath does not exist or is not a directory"
	fi
	
	declare_for_chroot helperLfsLibtoolArchiveFixup
	helperLfsLibtoolArchiveFixup="$helpersPath"/lfs-libtool-archive-fixup
	if [ ! -f "$helperLfsLibtoolArchiveFixup" ]; then
		exitError "helper $helperLfsLibtoolArchiveFixup does not exist or is not a file"
	fi
	if [ ! -x "$helperLfsLibtoolArchiveFixup" ]; then
		exitError "helper $helperLfsLibtoolArchiveFixup does not exist or is not executable"
	fi
}

function setLfsPaths()
{
	if [ ! -d "$lfsPath" ]; then
		mkdir -m 0755 -p "$lfsPath"
	fi
	pushd "$lfsPath" >/dev/null
	lfsPath="$(pwd)"
	popd >/dev/null
	
	readonly lfsLogPath=/var/log/lfs/"$machine"
	readonly lfsDownloadsPath="$lfsPath"/downloads
	readonly lfsExtractsPath="$lfsPath"/extracts
	
	LFS="$lfsPath"/"$machine"
	LFS_OPT_PATH="$LFS"/opt/lfs/"$LFS_DISTRIBUTION_VERSION"
	LFS_OPT_PATH_UNPREFIXED=/opt/lfs/"$LFS_DISTRIBUTION_VERSION"
}

function setLocale()
{
	export LC_ALL=POSIX
}

function setMakeFlags()
{
	essentialProgramCheck make grep
	
	if [ -f /proc/cpuinfo ]; then
		local -i cpuCount=$(grep -c '^processor'$'\t' /proc/cpuinfo)
	else
		local -ir cpuCount=1
	fi
	
	declare_for_chroot LFS_MAKE_LOAD_AVERAGE
	local loadAverage=$((cpuCount-1))
	LFS_MAKE_LOAD_AVERAGE="${loadAverage}.70"
	
	declare_for_chroot -i LFS_MAKE_COMPILE_JOBS
	declare_for_chroot -i LFS_MAKE_PACKAGE_JOBS
	if [ "$parallelMake" = "yes" ]; then
		LFS_MAKE_COMPILE_JOBS=$((cpuCount*2))
		LFS_MAKE_PACKAGE_JOBS=$((cpuCount/3))
	else
		LFS_MAKE_COMPILE_JOBS=1
		LFS_MAKE_PACKAGE_JOBS=1
	fi
}

function setArchitectures()
{
	LFS_NATIVE_ARCHITECTURE="${settings_string[LFS_NATIVE_ARCHITECTURE]}"
	LFS_FOREIGN_ARCHITECTURE="${settings_string[LFS_FOREIGN_ARCHITECTURE]}"
	
	LFS_NATIVE_TRIPLE="$LFS_NATIVE_ARCHITECTURE"-linux-musl
	LFS_FOREIGN_TRIPLE="$LFS_FOREIGN_ARCHITECTURE"-linux-musl
}

function setCFlags()
{
	# musl prefers hash-style=both
	# disable-new-dtags forces the use DT_RPATH rather than DT_RUNPATH for rpath; musl only uses DT_RPATH
	LFS_LDFLAGS_MUSL="-Wl,--hash-style=both -Wl,--disable-new-dtags"

	local -r cOptimisation="-O2 -fno-omit-frame-pointer -pipe"
	
	local -r cNativeTuningFlags="${settings_string[LFS_CFLAGS_NATIVE_CPU_OPTIMISATION]}"
	if [ -z "$cNativeTuningFlags" ]; then
		LFS_CFLAGS_NATIVE_OPTIMISATION="$cOptimisation"
	else
		LFS_CFLAGS_NATIVE_OPTIMISATION="$cNativeTuningFlags $cOptimisation"
	fi
	local -r cForeignTuningFlags="${settings_string[LFS_CFLAGS_NATIVE_CPU_OPTIMISATION]}"
	if [ -z "$cForeignTuningFlags" ]; then
		LFS_CFLAGS_FOREIGN_OPTIMISATION="$cOptimisation"
	else
		LFS_CFLAGS_FOREIGN_OPTIMISATION="$cForeignTuningFlags $cOptimisation"
	fi
	
	# musl ignores this value currently
	LFS_CFLAGS_HARDENING="-D_FORTIFY_SOURCE=2"
	
	local -r ldOptimisationFlags="-Wl,-O1"
	local -r ldDebugFlags="${settings_string[LFS_LDFLAGS_DEBUGGING]}"
	if [ -n "$ldDebugFlags" ]; then
		LFS_LDFLAGS_OPTIMISATION="$ldOptimisationFlags $ldDebugFlags"
	else
		LFS_LDFLAGS_OPTIMISATION="$ldOptimisationFlags"
	fi
	
	# http://tk-blog.blogspot.co.uk/2009/02/relro-not-so-well-known-memory.html
	# http://www.tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html
	# https://wiki.debian.org/ToolChain/DSOLinking#Only_link_with_needed_libraries
	# https://wiki.ubuntu.com/ToolChain/CompilerFlags?action=show&redirect=CompilerFlags
	# https://wiki.gentoo.org/wiki/GCC_optimization
	# http://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html#Submodel-Options
	# --as-needed MAY cause a few problems for old packages
	# --no-copy-dt-needed-entries is believed to now be default and so is not specified
	LFS_LDFLAGS_HARDENING="-Wl,-z,relro -Wl,-z,now -Wl,--as-needed"
}
