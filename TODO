https://bitbucket.org/GregorR/musl-pkgsrc-patches/wiki/Patch%20auditing

NATIVE == HOST
FOREIGN == TARGET

we use our own terms because we currently find the autotools, etc, definitions very broken

Other 'core' things
	? libpam (may as well, as then we have a standalone busybox we can use for normal use, too)
	2nd busybox (suid-only)
		
	make
	m4
	ncurses
	file
	gettext (limited)
	texinfo
	sudo
		? libpam
		? KRB5 (if intended to re-use)
		? openldap
	? perl
	
	Next up things, run as static
		openssl
			WHY? Essential
			libz
			MIT KRB 5
		stunnel
			WHY? Allows https for built in busybox http server
			openssl
		openssh
		dropbear
		curl
			libmetalink
			libssh2
			MIT / Heimal KRB5
			Certs
			libidn
			(openldap libs)
		? wget
	
	Other things, not static
		dnsmasq
			WHY? A better DNS+DHCP (not sure about tftp) server than busybox - interesting choice in tftpd impl, too

Package managers

# Perl (CPAN)
# Python (Pip)
# Ruby (Gem)
# NodeJS (NPM)
# Lua (LuaRocks,LuaDist)
# PHP (PEAR/PECL, PEAR package manager)
# Haskell (Cabal)
# Go (goinstall)
# OCaml (OPAM)
# D (?DUB / http://code.dlang.org/)
# Clojure (?)
# Tcl (?)
# R / GNU S (r-cran)
# Mono (nuget), but not clearly great
# Erlang - not really; uses releases, ie everything bundled up. There is rebar.
# Java - maven sort of, but most applications are designed like Erlang - ship with their required libraries

# Other possibilities
# ttf-* font data
# xfonts
# CA certificates
# ? bad ssh keys
# locale installers
# xmms2 plugins



* Signatures ending in .asc or .gpg
* curlrc files for most options (allowing customisation)
* better download location (outside of the chroot) with support for mirrors, ie so we can ship a files-only, CD-like set
	* No need to go mental
	* But allows us to offer our own host quite simply
	* repurporse /usr/src?
* Better use of unxz, etc, so we optimise the linux sign check - affects our integrity checks?
* linking of certificate-authorities to particular packages
* SUDO profile so can automate build (ie template for sudoers)
* MUST ADD TO TOOLCHAIN: e2fsprogs for chattr
* CONSIDER ADDING Linux ACL (setfacl) and SELinux support to toolchain
* User xattrs, using setfattr in the attr package

* prelinking for java et al, perhaps, but security impacts. Good for large, frequently run programs

* Integrate, if only slightly, with the cvedetails.com database (if only for a package name mapping)
	* Vendor name, eg GNU, vendor id 72
	* Example: GNU Bash is http://www.cvedetails.com/product/21050/GNU-Bash.html
	* Not everything is listed, of course



* Security
	* PaX / grsecurity
	* SMACK linux module
	* AppArmor config
	* TOMOYO
	* SELinux attributes + config
	* SUID, GUID removal
	* Consider sandboxing by reducing linux perms
		/sbin, /usr/sbin and /usr/local/sbin by removing group execute rights, remove all other permissions
		- using an explicit group for sets of binaries (eg instead of root:root:other, move to root:<package>-group-<N>:other with perms rwxr-x---), ie not even root-read perms
		- unfortunately not possible for symlinks where symlink name controls behaviour (eg vggroup => lvm or slapd)
		- chattr +i on all binaries and libraries
		
	* Go over all files and folders and make the time stamp consistent
	
	* Go over all files and folders and record hashes (md5,sha1,sha224-512)

* Check the signatures of CA certs, eg sks-keyservers.netCA.pem.asc (requires a degree of recursion)!


* Crosstool NG  http://crosstool-ng.org/



* A problem with using ACLs (and SELinux and Smack) is the toolchain's coreutils might be / will be built w/o libacl, so the coreutils don't know about it





* SUID / GUID binary (and library) finding
	* Remove the attributes
	* Whitelist of permitted binaries PER package

* Post-package removal of binaries / files

* Post-package permissions changes
	* Apply Attributes
		* chattr
		* lsattr
	* Apply ACLs
		* getfacl
		* setfacl
	* Change regular perms
		* Particularly, for binaries, remove world permissions
		* Actually, for all files, remove world permissions
	* Create an user
	* Create a group
	* Add a binary to a particular group / user combination
	* Mock group of groups

* Attributes (chattr / lsattr, part of e2fsprogs)
	Security
	* a  append-only, unless root / CAP_LINUX_IMMUTABLE
	* d  not backed up by dump (ie sensitive,  file system local, etc)
	* h  file is or was >2TB (read-only)
	* i  file is read-only, can not be written to or linked to (can only be made writable by root / CAP_LINUX_IMMUTABLE)
		- very useful for binaries and libraries and even config
	* s  deleted file is zeroed (limitations, but seems like a sensible choice for most files) (ignored on ext2/3)
	* T  tell the block allocator to put subfolders into different blocks
		- useful for stormmq; useful for /home to split up users
	* u  undeletion! (ignored on ext2/3)
	Other
	* A  atime is not modified
	* D  dirsync, synchronous write of changes
	* e  extents
	* I  hash indexed (read-only)
	* j  sync of data to ext3 journal before writing to file; no effect if ext3 mounted data=journal
	* S  'sync mount option' per file
	* t  no tail-merging. Can't imagine much use for this
	Compression
	* E  compression error (read-only)
	* c  automatic disk compression (ignored on ext2/3)
	* X  disk compression adjustment
	* Z  compression dirty (read-only)

* Capabilities

* ACLs
	* use setacl / getfacl; can also replace chmod, etc
	* allow multiple users and multip
	le groups to have permission bits set on a file
	* for all intents and purposes, this means all files outside of /home could be owned by root:root with classic permissions r--r----- (ie read only to root)
	* there is also a 'mask' value, which allows more restrictive permissions for ACL'd users/groups (or it should be set to the least permissions viable). Mask doesn't affect classic settings
	* mask is changed by chmod, though, to user/group/other setting

* Post-package sha512 / sha1 sums of all files
	Also record file layout, file system, file perms, ACLs, any user id & group id, File type (file/folder/symlink/char device/block device/pipe/domain socket)
* Linux capabilities and audit
















NIXOS - etc

There is /etc

There is a symlink, /etc/static, that points to a package in the store (say /nix/store/blah-etc/), that has an etc root
For us: /etc

This package's etc contains symlinks to actual package implementations, eg zoneinfo, or ssh_config, stored in the store

What's not clear is why we need the double-indirection - I think the idea is to be able to switch all symlinks to all etc in one go, ie atomically


So we would have /etc/current, which points to /opt/lfs/7.4/lfs-etc/0/recipe-245234234/install/etc

We could then have some files *explicitly* in there, eg passwd, but others are themselves symlinks, eg zoneinfo, which points to a further package

In some ways, this makes the etc package the child of all dependencies. Ughh.



ld / binutils uses $prefix/etc/ld.so.conf; if it doesn't exist, falls back to /etc/ld.so.conf

Irritating.




		DESTDIR / others
		# With glibc, this variable is install_root . For others, it's prefix=
		# Check http://www.linuxfromscratch.org/hints/downloads/files/fakeroot.txt
		# Perl modules are problematic

clang / llvm
export CC=clang CXX=clang++ && <other-command>

musl-based crosscompiler is at:-
Look at musl, and especially, https://github.com/GregorR/musl-cross which builds a cross-compiler
http://musl.codu.org/
https://googledrive.com/host/0BwnS5DMB0YQ6bDhPZkpOYVFhbk0/musl-0.9.14/crossx86-x86_64-linux-musl-0.9.14.tar.xz


