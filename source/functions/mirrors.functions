function mirrors_sourceMirrors()
{
	local url=""
	
	local name=""
	local version=""
	local download_kind=""
	local mirror=""
	local path=""
	
	local -i api_download_index=-1
	declare -a api_downloads_name=()
	declare -a api_downloads_version=()
	declare -a api_downloads_kinds=()
	declare -a api_downloads_mirror=()
	declare -a api_downloads_path=()
	
	declare -a api_downloads_referrer=()
	declare -a api_downloads_post_data=()
	
	declare -a api_downloads_archive=()
	declare -a api_downloads_compression=()
	declare -a api_downloads_tarbomb=()
	declare -a api_downloads_archive_folder=()
	declare -a api_downloads_download_as=()
	
	# All the remaining values VALIDATE a download
	declare -a api_downloads_size=()
	declare -a api_downloads_md5=()
	declare -a api_downloads_sha1=()
	declare -a api_downloads_sha224=()
	declare -a api_downloads_sha256=()
	declare -a api_downloads_sha384=()
	declare -a api_downloads_sha512=()
	
	declare -a api_downloads_decompressed_size=()
	declare -a api_downloads_decompressed_md5=()
	declare -a api_downloads_decompressed_sha1=()
	declare -a api_downloads_decompressed_sha224=()
	declare -a api_downloads_decompressed_sha256=()
	declare -a api_downloads_decompressed_sha384=()
	declare -a api_downloads_decompressed_sha512=()
	
	declare -a api_downloads_signature_key_kind=()
	declare -a api_downloads_signature_key_name=()
	declare -a api_downloads_signature_compression=()
	
	# May be technically invalid as we are not URI escaping
	define_mirror INTERNAL "file://${distribution_internalMirrorPath}/"
	
	pushd "$distribution_mirrorsPath" 1>/dev/null 2>/dev/null

		local mirrorFile
		for mirrorFile in *.mirror
		do
			if [ -f "$mirrorFile" ]; then
				source "$mirrorFile"
			fi
		done
		
		if [ -f "$libertine_mirror" ]; then
			pushd "$libertine_mirror" 1>/dev/null 2>/dev/null
				
				for mirrorFile in *.mirror
				do
					if [ -f "$mirrorFile" ]; then
						source "$mirrorFile"
					fi
				done
			
			popd 1>/dev/null 2>/dev/null
		else
			if [ "$libertine_mirror" != "global" ]; then
				libertine_message WARN "${tab}${tab}No such mirror override set $libertine_mirror in $distribution_mirrorsPath"
			fi
		fi
		
	popd 1>/dev/null 2>/dev/null
	
	local -i downloadIndex
	local name
	local version
	local download_kind
	local mirror
	local path
	local download_as
	local referrer
	local post_data
	local compression
	local -i size
	
	local archive
	local tarbomb
	local archive_folder
	
	declare -a make_targetsDownloadCertificateAuthorityItem=()
	
	for downloadIndex in "${!api_downloads_name[@]}"
	do
		name="${api_downloads_name[$downloadIndex]}"
		version="${api_downloads_version[$downloadIndex]}"
		download_kind="${api_downloads_kinds[$downloadIndex]}"
		mirror="${api_downloads_mirror[$downloadIndex]}"
		path="${api_downloads_path[$downloadIndex]}"
		download_as="${api_downloads_download_as[$downloadIndex]}"
		
		referrer="${api_downloads_referrer[$downloadIndex]}"
		post_data="${api_downloads_post_data[$downloadIndex]}"
		compression="${api_downloads_compression[$downloadIndex]}"
		
		size=${api_downloads_size[$downloadIndex]}
		
		archive=${api_downloads_archive[$downloadIndex]}
		tarbomb=${api_downloads_bomb[$downloadIndex]}
		archive_folder=${api_downloads_archive_folder[$downloadIndex]}
		
		# don't like this code
		make_downloadCertificateAuthorityTargetIfRequired
	done
	
	# don't like this code
	make_addTargetDownloadCertificateAuthority
}
distribution_functions+=(distribution_sourceMirrors)
