readonly LIBERTINE_DEPENDENCY_PATH_ROOT="$LIBERTINE_BUILD_ROOT_PATH_RECIPE"/root
readonly LIBERTINE_DEPENDENCY_PATH_BIN="$LIBERTINE_DEPENDENCY_PATH_ROOT"/bin
readonly LIBERTINE_DEPENDENCY_PATH_SBIN="$LIBERTINE_DEPENDENCY_PATH_ROOT"/sbin

readonly LIBERTINE_C_HOST_PREFIX="$LIBERTINE_NATIVE_TRIPLE"-
readonly LIBERTINE_C_HOST_CC="${LIBERTINE_C_HOST_PREFIX}gcc"
readonly LIBERTINE_C_HOST_CXX="${LIBERTINE_C_HOST_PREFIX}g++"
readonly LIBERTINE_C_HOST_CPP="$LIBERTINE_C_HOST_CC -E"
readonly LIBERTINE_C_HOST_CXXCPP="$LIBERTINE_C_HOST_CXX -E"
readonly LIBERTINE_C_HOST_LD="${LIBERTINE_C_HOST_PREFIX}ld"
readonly LIBERTINE_C_HOST_SYS_ROOT="$LIBERTINE_DEPENDENCY_INSTALL_PATH_MUSL_CROSS/$LIBERTINE_NATIVE_TRIPLE"
readonly LIBERTINE_C_HOST_LIB_ROOT="$LIBERTINE_DEPENDENCY_INSTALL_PATH_MUSL_CROSS/$LIBERTINE_NATIVE_TRIPLE/$LIBERTINE_NATIVE_TRIPLE"
readonly LIBERTINE_C_HOST_C_LIB_PATH="$LIBERTINE_C_HOST_LIB_ROOT/lib"
readonly LIBERTINE_C_HOST_DYNAMIC_LINKER_NAME="ld-musl-$LIBERTINE_NATIVE_ARCHITECTURE.so.1"
readonly LIBERTINE_C_HOST_DYNAMIC_LINKER="$LIBERTINE_C_HOST_C_LIB_PATH"/"$LIBERTINE_C_HOST_DYNAMIC_LINKER_NAME"
readonly LIBERTINE_C_HOST_CPPFLAGS="-D_FORTIFY_SOURCE=2 -isysroot $LIBERTINE_C_HOST_SYS_ROOT"
readonly LIBERTINE_C_HOST_SPECS="$LIBERTINE_C_HOST_CPPFLAGS --sysroot $LIBERTINE_C_HOST_SYS_ROOT -Wl,--sysroot=$LIBERTINE_C_HOST_SYS_ROOT -Wl,--dynamic-linker=$LIBERTINE_C_HOST_DYNAMIC_LINKER -Wl,-rpath=$LIBERTINE_C_HOST_C_LIB_PATH"
readonly LIBERTINE_C_HOST_CFLAGS="$LIBERTINE_C_HOST_SPECS $LIBERTINE_LDFLAGS_MUSL $LIBERTINE_CFLAGS_NATIVE_OPTIMISATION $LIBERTINE_CFLAGS_HARDENING $LIBERTINE_LDFLAGS_OPTIMISATION"
readonly LIBERTINE_C_HOST_CXXFLAGS="$LIBERTINE_C_HOST_CFLAGS"
readonly LIBERTINE_C_HOST_LDFLAGS=""

readonly LIBERTINE_C_TARGET_INTERNAL_PREFIX="$LIBERTINE_FOREIGN_TRIPLE"-
readonly LIBERTINE_C_TARGET_INTERNAL_CC="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}gcc"
readonly LIBERTINE_C_TARGET_INTERNAL_CXX="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}g++"
readonly LIBERTINE_C_TARGET_INTERNAL_CPP="$LIBERTINE_C_TARGET_INTERNAL_CC -E"
readonly LIBERTINE_C_TARGET_INTERNAL_CXXCPP="$LIBERTINE_C_TARGET_INTERNAL_CXX -E"
readonly LIBERTINE_C_TARGET_INTERNAL_AR="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}ar"
readonly LIBERTINE_C_TARGET_INTERNAL_AS="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}as"
readonly LIBERTINE_C_TARGET_INTERNAL_NM="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}nm"
readonly LIBERTINE_C_TARGET_INTERNAL_RANLIB="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}ranlib"
readonly LIBERTINE_C_TARGET_INTERNAL_OBJDUMP="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}objdump"
readonly LIBERTINE_C_TARGET_INTERNAL_OBJCOPY="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}objcopy"
readonly LIBERTINE_C_TARGET_INTERNAL_LD="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}ld"
readonly LIBERTINE_C_TARGET_INTERNAL_STRIP="${LIBERTINE_C_TARGET_INTERNAL_PREFIX}strip"
readonly LIBERTINE_C_TARGET_INTERNAL_SYS_ROOT="$LIBERTINE_DEPENDENCY_PREFIX_PATH_MUSL_CROSS/$LIBERTINE_FOREIGN_TRIPLE"
readonly LIBERTINE_C_TARGET_INTERNAL_LIB_ROOT="$LIBERTINE_DEPENDENCY_PREFIX_PATH_MUSL_CROSS/$LIBERTINE_FOREIGN_TRIPLE/$LIBERTINE_FOREIGN_TRIPLE"
readonly LIBERTINE_C_TARGET_INTERNAL_C_LIB_PATH="$LIBERTINE_C_TARGET_INTERNAL_LIB_ROOT/lib"
readonly LIBERTINE_C_TARGET_INTERNAL_DYNAMIC_LINKER_NAME="ld-musl-$LIBERTINE_FOREIGN_ARCHITECTURE.so.1"
readonly LIBERTINE_C_TARGET_INTERNAL_DYNAMIC_LINKER="$LIBERTINE_C_TARGET_INTERNAL_C_LIB_PATH"/"$LIBERTINE_C_TARGET_INTERNAL_DYNAMIC_LINKER_NAME"
readonly LIBERTINE_C_TARGET_INTERNAL_CPPFLAGS="-isysroot $LIBERTINE_C_TARGET_INTERNAL_SYS_ROOT -D_FORTIFY_SOURCE=2"
readonly LIBERTINE_C_TARGET_INTERNAL_SPECS="$LIBERTINE_C_TARGET_INTERNAL_CPPFLAGS --sysroot $LIBERTINE_C_TARGET_INTERNAL_SYS_ROOT -Wl,--sysroot=$LIBERTINE_C_TARGET_INTERNAL_SYS_ROOT -Wl,--dynamic-linker=$LIBERTINE_C_TARGET_INTERNAL_DYNAMIC_LINKER -Wl,-rpath=$LIBERTINE_C_TARGET_INTERNAL_C_LIB_PATH"
readonly LIBERTINE_C_TARGET_INTERNAL_CFLAGS="$LIBERTINE_C_TARGET_INTERNAL_SPECS $LIBERTINE_LDFLAGS_MUSL $LIBERTINE_CFLAGS_NATIVE_OPTIMISATION $LIBERTINE_CFLAGS_HARDENING $LIBERTINE_LDFLAGS_OPTIMISATION"
readonly LIBERTINE_C_TARGET_INTERNAL_CXXFLAGS="$LIBERTINE_C_TARGET_INTERNAL_CFLAGS"
readonly LIBERTINE_C_TARGET_INTERNAL_LDFLAGS=""

readonly LIBERTINE_C_TARGET_EXTERNAL_PREFIX="$LIBERTINE_FOREIGN_TRIPLE"-
readonly LIBERTINE_C_TARGET_EXTERNAL_CC="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}gcc"
readonly LIBERTINE_C_TARGET_EXTERNAL_CXX="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}g++"
readonly LIBERTINE_C_TARGET_EXTERNAL_CPP="$LIBERTINE_C_TARGET_EXTERNAL_CC -E"
readonly LIBERTINE_C_TARGET_EXTERNAL_CXXCPP="$LIBERTINE_C_TARGET_EXTERNAL_CXX -E"
readonly LIBERTINE_C_TARGET_EXTERNAL_AR="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}ar"
readonly LIBERTINE_C_TARGET_EXTERNAL_AS="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}as"
readonly LIBERTINE_C_TARGET_EXTERNAL_NM="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}nm"
readonly LIBERTINE_C_TARGET_EXTERNAL_RANLIB="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}ranlib"
readonly LIBERTINE_C_TARGET_EXTERNAL_OBJDUMP="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}objdump"
readonly LIBERTINE_C_TARGET_EXTERNAL_OBJCOPY="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}objcopy"
readonly LIBERTINE_C_TARGET_EXTERNAL_LD="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}ld"
readonly LIBERTINE_C_TARGET_EXTERNAL_STRIP="${LIBERTINE_C_TARGET_EXTERNAL_PREFIX}strip"
readonly LIBERTINE_C_TARGET_EXTERNAL_SYS_ROOT="$LIBERTINE_DEPENDENCY_INSTALL_PATH_MUSL_CROSS/$LIBERTINE_FOREIGN_TRIPLE"
readonly LIBERTINE_C_TARGET_EXTERNAL_LIB_ROOT="$LIBERTINE_DEPENDENCY_INSTALL_PATH_MUSL_CROSS/$LIBERTINE_FOREIGN_TRIPLE/$LIBERTINE_FOREIGN_TRIPLE"
readonly LIBERTINE_C_TARGET_EXTERNAL_C_LIB_PATH="$LIBERTINE_C_TARGET_EXTERNAL_LIB_ROOT/lib"
readonly LIBERTINE_C_TARGET_EXTERNAL_DYNAMIC_LINKER_NAME="ld-musl-$LIBERTINE_FOREIGN_ARCHITECTURE.so.1"
readonly LIBERTINE_C_TARGET_EXTERNAL_DYNAMIC_LINKER="$LIBERTINE_C_TARGET_EXTERNAL_C_LIB_PATH"/"$LIBERTINE_C_TARGET_EXTERNAL_DYNAMIC_LINKER_NAME"
readonly LIBERTINE_C_TARGET_EXTERNAL_CPPFLAGS="-isysroot $LIBERTINE_C_TARGET_EXTERNAL_SYS_ROOT -D_FORTIFY_SOURCE=2"
# Note use of $LIBERTINE_C_TARGET_INTERNAL_* (not EXTERNAL) to resolve dynamic-linker and rpath
readonly LIBERTINE_C_TARGET_EXTERNAL_SPECS="$LIBERTINE_C_TARGET_EXTERNAL_CPPFLAGS --sysroot $LIBERTINE_C_TARGET_EXTERNAL_SYS_ROOT -Wl,--sysroot=$LIBERTINE_C_TARGET_EXTERNAL_SYS_ROOT -Wl,--dynamic-linker=$LIBERTINE_C_TARGET_INTERNAL_DYNAMIC_LINKER -Wl,-rpath=$LIBERTINE_C_TARGET_INTERNAL_C_LIB_PATH -Wl,-rpath-link=$LIBERTINE_C_TARGET_EXTERNAL_C_LIB_PATH"
readonly LIBERTINE_C_TARGET_EXTERNAL_CFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_SPECS $LIBERTINE_LDFLAGS_MUSL $LIBERTINE_CFLAGS_NATIVE_OPTIMISATION $LIBERTINE_CFLAGS_HARDENING $LIBERTINE_LDFLAGS_OPTIMISATION"
readonly LIBERTINE_C_TARGET_EXTERNAL_CXXFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_CFLAGS"
readonly LIBERTINE_C_TARGET_EXTERNAL_LDFLAGS=""

function build_extract()
{
	local -r name="$1"
	local -r download_kind="$2"
	local -r version="$3"
	local -r archive="$4"
	local -r tarbomb="$5"
	local -r archiveFolder="$6"
	
	local -r decompressedDownloadPath="$(readlink --canonicalize "$LIBERTINE_BUILD_ROOT_PATH_RECIPE"/downloads/"$download_kind"/"$name"/"$version")"
		
	extractParentFolder="$LIBERTINE_BUILD_ROOT_PATH_RECIPE"/extracts/"$download_kind"/"$name"/"$version"
	rm -rf "$extractParentFolder"
	
	case "$archive" in
		
		none)
			file_hardlinkOrCopy "$decompressedDownloadPath" "$extractParentFolder"
		;;
		
		tarball)
			local extractFolderPath
			if [ "$tarbomb" = "yes" ]; then
				extractFolderPath="$extractParentFolder"/"$archiveFolder"
			else
				extractFolderPath="$extractParentFolder"
			fi
			
			mkdir -m 0755 -p "$extractFolderPath"

			pushd "$extractParentFolder" 1>/dev/null 2>/dev/null

				tar --extract --numeric-owner --preserve-permissions --no-same-owner --file "$decompressedDownloadPath"

			popd 1>/dev/null 2>/dev/null
		;;
		
		zip)
			libertine_exitError "Zip is not supported at this time for extract ($name)"
		;;
		
		*)
			libertine_exitError "Unknown archive format '$archive' for $download_kind $name"
		;;
		
	esac
}

function build_extractPackage()
{
	local extractParentFolder
	
	build_extract "$name" "package"  "${LIBERTINE_DOWNLOADS_PACKAGE_VERSIONS["$name"]}" "${LIBERTINE_DOWNLOADS_PACKAGE_ARCHIVES["$name"]}" "${LIBERTINE_DOWNLOADS_PACKAGE_TARBOMBS["$name"]}" "${LIBERTINE_DOWNLOADS_PACKAGE_ARCHIVE_FOLDERS["$name"]}"
	
	LIBERTINE_DOWNLOADS_PACKAGE_EXTRACT_PATHS["$name"]="$extractParentFolder"
}

function build_extractPackages()
{
	local name
	for name in "${LIBERTINE_DOWNLOADS_PACKAGE_NAMES[@]}"
	do
		build_extractPackage
	done
}

function build_patchPackage()
{
	local -r packageName="$1"
	local -r patchName="$2"
	
	local -r downloadPath="$(readlink --canonicalize "$LIBERTINE_BUILD_ROOT_PATH_RECIPE"/downloads/patch/"$patchName"/0)"
	
	# Won't work too well!
	pushd "${LIBERTINE_DOWNLOADS_PACKAGE_EXTRACT_PATHS["$packageName"]}" 1>/dev/null 2>/dev/null
		
		patch -N -p1 -i "$downloadPath"
		
	popd 1>/dev/null 2>/dev/null
}

function build_patchPackageFromIndex()
{
	local -r packageName="$1"
	local -ir patchIndex=$2
	
	build_patchPackage "$packageName" "${LIBERTINE_DOWNLOADS_PATCH_NAMES[$patchIndex]}"
}

function build_pushPackage()
{
	local -r name="$1"
	pushd "${LIBERTINE_DOWNLOADS_PACKAGE_EXTRACT_PATHS["$name"]}" 1>/dev/null 2>/dev/null
}

function build_popPackage()
{
	popd 1>/dev/null 2>/dev/null
}

function build_push()
{
	pushd "$1" 1>/dev/null
}

function build_pop()
{
	popd 1>/dev/null 2>/dev/null
}

function build_extractedTarballSourcePath()
{
	local -r name="$1"
	echo -ne "${LIBERTINE_DOWNLOADS_PACKAGE_EXTRACT_PATHS["$name"]}"/"${LIBERTINE_DOWNLOADS_PACKAGE_ARCHIVE_FOLDERS["$name"]}"
}

function build_outOfTree()
{
	# Put a build folder parallel to the tar folder
	local -r nameOfPackage="$1"
	local -r buildIteration="$2"
	shift 2
	
	local -r buildFolder="build-$buildIteration"
	
	build_pushPackage "$nameOfPackage"
		
		mkdir -m 0755 -p "$buildFolder"
		
		build_push "$buildFolder"
		
			../configure "$@"
			make "${makeFlags[@]}"
			make install "${makeInstallFlags[@]}"
			make distclean
		
		build_pop
		
	build_popPackage
}

function build_inTree()
{
	local -r nameOfPackage="$1"
	shift 1
	
	build_pushPackage "$nameOfPackage"
	
		./configure "$@"
		make "${makeFlags[@]}"
		make install "${makeInstallFlags[@]}"
		make distclean
		
	build_popPackage
}







function build_fixUpGnulib()
{
	pushdDependencyFolder
	
		../gnulib/gnulib-tool --add-import
		
	popdDependencyFolder
}

# Assumes we are inside a particular package folder
function build_fixUpAutoToolsConfig()
{
	if [ -d config ]; then
		
		pushd config >/dev/null
			local -r configSubFile="$(pwd)"/config.sub
			local -r configGuessFile="$(pwd)"/config.guess
			chmod +x "$configSubFile"
			chmod +x "$configGuessFile"
		popd >/dev/null
		
		local dependencyFolder
		for dependencyFolder in *
		do
			if [ "$dependencyFolder" = "config" ]; then
				continue
			fi
			if [ "${dependencyFolder:0:7}" = "config-" ]; then
				continue
			fi
		
			if [ ! -d "$dependencyFolder" ]; then
				continue
			fi
			
			pushd "$dependencyFolder" >/dev/null
			
				# Update autotools malarkey
				local configFolder
				local configFile
				for configFolder in . config support build-aux
				do
					if [ ! -d "$configFolder" ]; then
						continue
					fi
					
					pushd "$configFolder" >/dev/null
					
						for configFile in config.sub configfsf.sub
						do
							if [ -f "$configFile" ]; then
								mv "$configFile" "$configFile".orig
								ln "$configSubFile" "$configFile"
							fi
						done
						for configFile in config.guess
						do
							if [ -f "$configFile" ]; then
								mv "$configFile" "$configFile".orig
								ln "$configGuessFile" "$configFile"
							fi
						done
						
					popd >/dev/null
				done
			
				popd >/dev/null
		done
	fi
}

function autotoolsConfiguredMakeWrapper()
{
	# This weird setting of PATH is so we can use the set -x output on the command line directly to test build problems
	PATH="$PATH" \
	make \
		--jobs $LIBERTINE_MAKE_COMPILE_JOBS \
		--load-average $LIBERTINE_MAKE_LOAD_AVERAGE \
		--debug \
		--print-directory \
		V=1 \
	"$@" 1>&2
}

function buildUsingMakeExternal()
{
	# This weird setting of PATH is so we can use the set -x output on the command line directly to test build problems
	PATH="$PATH" \
	make \
		--jobs $LIBERTINE_MAKE_COMPILE_JOBS \
		--load-average $LIBERTINE_MAKE_LOAD_AVERAGE \
		--debug \
		--print-directory \
		V=1 \
		CC="$LIBERTINE_C_TARGET_EXTERNAL_CC" \
		CXX="$LIBERTINE_C_TARGET_EXTERNAL_CXX" \
		CPP="$LIBERTINE_C_TARGET_EXTERNAL_CPP" \
		CXXCPP="$LIBERTINE_C_TARGET_EXTERNAL_CXXCPP" \
		AR="$LIBERTINE_C_TARGET_EXTERNAL_AR" \
		AS="$LIBERTINE_C_TARGET_EXTERNAL_AS" \
		NM="$LIBERTINE_C_TARGET_EXTERNAL_NM" \
		RANLIB="$LIBERTINE_C_TARGET_EXTERNAL_RANLIB" \
		OBJDUMP="$LIBERTINE_C_TARGET_EXTERNAL_OBJDUMP" \
		OBJCOPY="$LIBERTINE_C_TARGET_EXTERNAL_OBCOPY" \
		LD="$LIBERTINE_C_TARGET_EXTERNAL_LD" \
		STRIP="$LIBERTINE_C_TARGET_EXTERNAL_STRIP" \
		CPPFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_CPPFLAGS" \
		CFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_CFLAGS" \
		CXXFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_CXXFLAGS" \
		LDFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_LDFLAGS" \
	"$@" 1>&2
}

function callback_empty()
{
	:
}

# This is a hack for packages which don't support cross-compilation
function build_usingAutotoolsHost()
{
	local -r callback="$1"
	shift 1
	
	build_fixUpAutoToolsConfig
	
	pushdDependencyFolder
		# This weird setting of PATH is so we can use the set -x output on the command line directly to test build problems
		PATH="$PATH" \
		./configure \
			CC="$LIBERTINE_C_HOST_CC" \
			CXX="$LIBERTINE_C_HOST_CXX" \
			CPP="$LIBERTINE_C_HOST_CPP" \
			CXXCPP="$LIBERTINE_C_HOST_CXXCPP" \
			AR="$LIBERTINE_C_HOST_AR" \
			AS="$LIBERTINE_C_HOST_AS" \
			NM="$LIBERTINE_C_HOST_NM" \
			RANLIB="$LIBERTINE_C_HOST_RANLIB" \
			OBJDUMP="$LIBERTINE_C_HOST_OBJDUMP" \
			OBJCOPY="$LIBERTINE_C_HOST_OBJCOPY" \
			LD="$LIBERTINE_C_HOST_LD" \
			STRIP="$LIBERTINE_C_HOST_STRIP" \
			CPPFLAGS="$LIBERTINE_C_HOST_CPPFLAGS" \
			CFLAGS="$LIBERTINE_C_HOST_CFLAGS" \
			CXXFLAGS="$LIBERTINE_C_HOST_CXXFLAGS" \
			LDFLAGS="$LIBERTINE_C_HOST_LDFLAGS" \
		--host="$LIBERTINE_NATIVE_TRIPLE" \
		--target="$LIBERTINE_NATIVE_TRIPLE" \
		--prefix="${LFS}${LIBERTINE_DEPENDENCY_PREFIX_PATH}"/build \
		"$@" 1>&2
		
		$callback
		
		autotoolsConfiguredMakeWrapper

		autotoolsConfiguredMakeWrapper install
		
	popdDependencyFolder
}

function build_usingAutotoolsExternal()
{
	local -r callback="$1"
	shift 1
	
	build_fixUpAutoToolsConfig
	
	pushdDependencyFolder
		# This weird setting of PATH is so we can use the set -x output on the command line directly to test build problems
		# Note that an older name for CC_FOR_BUILD is HOST_CC
		PATH="$PATH" \
		./configure \
			CC_FOR_BUILD="$LIBERTINE_C_HOST_CC" \
			CXX_FOR_BUILD="$LIBERTINE_C_HOST_CXX" \
			CPPFLAGS_FOR_BUILD="$LIBERTINE_C_HOST_CPPFLAGS" \
			CFLAGS_FOR_BUILD="$LIBERTINE_C_HOST_CFLAGS" \
			CXXFLAGS_FOR_BUILD="$LIBERTINE_C_HOST_CXXFLAGS" \
			LDFLAGS_FOR_BUILD="$LIBERTINE_C_HOST_LDFLAGS" \
			CC="$LIBERTINE_C_TARGET_EXTERNAL_CC" \
			CXX="$LIBERTINE_C_TARGET_EXTERNAL_CXX" \
			CPP="$LIBERTINE_C_TARGET_EXTERNAL_CPP" \
			CXXCPP="$LIBERTINE_C_TARGET_EXTERNAL_CXXCPP" \
			AR="$LIBERTINE_C_TARGET_EXTERNAL_AR" \
			AS="$LIBERTINE_C_TARGET_EXTERNAL_AS" \
			NM="$LIBERTINE_C_TARGET_EXTERNAL_NM" \
			RANLIB="$LIBERTINE_C_TARGET_EXTERNAL_RANLIB" \
			OBJDUMP="$LIBERTINE_C_TARGET_EXTERNAL_OBJDUMP" \
			OBJCOPY="$LIBERTINE_C_TARGET_EXTERNAL_OBJCOPY" \
			LD="$LIBERTINE_C_TARGET_EXTERNAL_LD" \
			STRIP="$LIBERTINE_C_TARGET_EXTERNAL_STRIP" \
			CPPFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_CPPFLAGS" \
			CFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_CFLAGS" \
			CXXFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_CXXFLAGS" \
			LDFLAGS="$LIBERTINE_C_TARGET_EXTERNAL_LDFLAGS" \
		--host="$LIBERTINE_NATIVE_TRIPLE" \
		--target="$LIBERTINE_FOREIGN_TRIPLE" \
		--prefix="$LIBERTINE_DEPENDENCY_PREFIX_PATH" \
		"$@" 1>&2
		
		$callback
		
		autotoolsConfiguredMakeWrapper
	
		if [ -z "$LFS" ]; then
			autotoolsConfiguredMakeWrapper install
		else
			autotoolsConfiguredMakeWrapper DESTDIR="$LFS" install
		fi
		
	popdDependencyFolder
}

function build_pushdDependencyFolder()
{
	pushd "$LIBERTINE_DEPENDENCY_NAME" >/dev/null
}

function build_popdDependencyFolder()
{
	popd >/dev/null
}

function build_createBuildFolderAndPushd()
{
	local -r buildFolder=../"$LIBERTINE_DEPENDENCY_NAME"-build
	mkdir -m 0755 -p "$buildFolder"
	pushd "$buildFolder" >/dev/null
}

function build_popdBuildFolder()
{
	popd >/dev/null
}

function build_setLfsSourcePackageVariables()
{
	LIBERTINE_SOURCE_PACKAGE_NAME="${sourcePackages_Name[$1]}"
	LIBERTINE_SOURCE_PACKAGE_VERSION="${sourcePackages_Version[$1]}"
	LIBERTINE_SOURCE_PACKAGE_COMPRESSION="${sourcePackages_Compression[$1]}"
	LIBERTINE_SOURCE_PACKAGE_FILENAME="${sourcePackages_FileName[$1]}"
	LIBERTINE_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER="${sourcePackages_ExtractedTarballFolder[$1]}"
	LIBERTINE_SOURCE_PACKAGE_IS_TARBOMB="${sourcePackages_IsTarbomb[$1]}"
	LIBERTINE_SOURCE_PACKAGE_MIRROR="${sourcePackages_Mirror[$1]}"
	LIBERTINE_SOURCE_PACKAGE_RELATIVE_PATH="${sourcePackages_RelativePath[$1]}"
}
