readonly LIBERTINE_DOWNLOAD_PATH="$LIBERTINE_DOWNLOAD_FILENAME"

cd "$crudeOurPath" 1>/dev/null 2>/dev/null

function libertine_message()
{
	local messageKind="$1"
	local message="$2"
	
	echo "Verify:${LIBERTINE_DOWNLOAD_FILENAME}:${messageKind}:${message}" 1>&2
	if [ "$messageKind" = "FAIL" ]; then
		exit 1
	fi
}

function verifySize()
{
	local -r size=$1
	local -r actualSize=$(stat --printf='%s' "$LIBERTINE_DOWNLOAD_PATH") 
	set +e
	test $actualSize -eq $size
	local -ir exitCode=$?
	set -e
	if [ $exitCode -ne 0 ]; then
		if [ "$LIBERTINE_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "$LIBERTINE_DOWNLOAD_PATH"
		fi
		libertine_exitError "${LIBERTINE_DOWNLOAD_PATH}: verifySize failed (actual was $actualSize, expected was $size)"
	fi
}

function verifyHash()
{
	local -r hashAlgorithm="$1"
	local -r hashValue="$2"
	
	local -r hashProgram=${hashAlgorithm}sum
	set +e
	${hashProgram} --check --strict --status <<-EOF
		$hashValue  $LIBERTINE_DOWNLOAD_PATH
	EOF
	local -ir exitCode=$?
	set -e
	if [ $exitCode -ne 0 ]; then
		local hashValueActual irrelevant
		IFS=' ' read -r hashValueActual irrelevant <<<"$(${hashProgram} "$LIBERTINE_DOWNLOAD_PATH")"
		
		if [ "$LIBERTINE_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "$LIBERTINE_DOWNLOAD_PATH"
		fi
		libertine_exitError "${LIBERTINE_DOWNLOAD_PATH}: verifyHash $hashAlgorithm failed (actual was $hashValueActual, expected was $hashValue)"
	fi
}

function verifySignature()
{
	local -r keyKind="$1"
	local -r downloadPath="$2"
	local -r keyFileOrKeyringFilePath="$3"
	local -r signaturePath="$4"
	local -r gpgFilesPath="$5"
	
	# Make gpgHome
	pushd "$keyFileOrKeyringFilePath"/.. 1>/dev/null
		
		local -r gpgHomePath="$(pwd)"/gpg-home
		rm -rf "$gpgHomePath"
		cp "$gpgFilesPath"/* "$gpgHomePath"/
		
	popd 1>/dev/null
	
	local -i exitCode
	
	case "$keyKind" in
		
		keyring)
			local -r publicKeyring="$keyFileOrKeyringFilePath"
		;;
		
		keyfile|hkp)
			local -r publicKeyring=pubring.gpg
			touch "$publicKeyring"
	
			# gpg mucks with its trustdb when importing, which is a nuisance
			# it also creates a back up of pubring.gpg, pubring.gpg~
			set +e
			gpg --no-options --no-greeting --no-permission-warning --no-secmem-warning \
			--no-random-seed-file --ignore-time-conflict \
			--no-verbose --quiet --batch --no-tty --exit-on-status-write-error \
			--lock-never --no-auto-check-trustdb --no-sig-cache \
			--homedir "$gpgHomePath" --trustdb-name trustdb.gpg \
			--no-default-keyring --secret-keyring secring.gpg \
			--primary-keyring "$publicKeyring" --keyring "$publicKeyring" \
			--import "$keyFileOrKeyringFilePath" </dev/null 1>/dev/null 2>&1
			exitCode=$?
			set -e
			
			if [ $exitCode -ne 0 ]; then
				libertine_exitError "${downloadPath}: could not import keyfile"
				if [ "$LIBERTINE_DELETE_IF_UNVERIFIED" = "yes" ]; then
					rm -rf "${downloadPath}"
				fi
				exit 1
			fi
		;;
		
	esac
	
	set -e
	gpg --no-options --no-greeting --no-permission-warning --no-secmem-warning \
	--no-random-seed-file --ignore-time-conflict \
	--no-verbose --quiet --batch --no-tty --exit-on-status-write-error \
	--lock-never --no-auto-check-trustdb --no-sig-cache \
	--homedir "$gpgHomePath" --trustdb-name trustdb.gpg \
	--no-default-keyring --secret-keyring secring.gpg \
	--primary-keyring "$publicKeyring" --keyring "$publicKeyring" \
	--verify "$signaturePath" "${downloadPath}" </dev/null 1>/dev/nulll 2>&1
	set +e
	
	if [ $exitCode -ne 0 ]; then
		libertine_exitError "${downloadPath}: could not verify signature"
		if [ "$LIBERTINE_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "${downloadPath}"
		fi
		exit 1
	fi
}

readonly decompressedPath="$LIBERTINE_DOWNLOAD_PATH".decompressed
readonly decompressedDonePath="$LIBERTINE_DOWNLOAD_PATH.decompressed.done"

function decompress()
{
	if [ -f "$decompressedDonePath" ]; then
		return 0
	fi
	
	rm -rf "$decompressedPath"
	
	if [ "$compression" = "none" ]; then
		file_hardlinkOrCopy "$LIBERTINE_DOWNLOAD_PATH" "$decompressedPath"
	else
		case "$compression" in
			gzip|compress)
				gzip --decompress --stdout --no-name --quiet -- "$LIBERTINE_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			bzip2)
				bzip2 --decompress --stdout --quiet -- "$LIBERTINE_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			lzop)
				lzop --decompress --stdout --no-name --quiet -- "$LIBERTINE_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			lzip)
				lzip --decompress --quiet --stdout -- "$LIBERTINE_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			lzma)
				xz --format=lzma --decompress --stdout -- "$LIBERTINE_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			xz)
				xz --decompress --stdout --quiet --quiet -- "$LIBERTINE_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			*)
				libertine_exitError "${LIBERTINE_DOWNLOAD_PATH}: Unknown compression option '$compression'"
			;;
		esac
	fi
	
	touch "$decompressedDonePath"
}

function verifySizeDecompressed()
{
	local -r size=$1
	local -r actualSize=$(stat --printf='%s' "$decompressedPath") 
	set +e
	test $actualSize -eq $size
	local -ir exitCode=$?
	set -e
	if [ $exitCode -ne 0 ]; then
		if [ "$LIBERTINE_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "$decompressedPath"
		fi
		libertine_exitError "${LIBERTINE_DOWNLOAD_PATH}: verifySizeDecompressed ($decompressedPath) failed (actual was $actualSize, expected was $size)"
		exit 1
	fi
}

function verifyHashDecompressed()
{
	local -r hashAlgorithm="$1"
	local -r hashValue="$2"
	
	local -r hashProgram=${hashAlgorithm}sum
	set +e
	${hashProgram} --check --strict --status <<-EOF
		$hashValue  $LIBERTINE_DOWNLOAD_PATH
	EOF
	local -ir exitCode=$?
	set -e
	if [ $exitCode -ne 0 ]; then
		local hashValueActual irrelevant
		IFS=' ' read -r hashValueActual irrelevant <<<"$(${hashProgram} "$decompressedPath")"
		
		if [ "$LIBERTINE_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "$decompressedPath"
		fi
		libertine_exitError "${LIBERTINE_DOWNLOAD_PATH}: verifyHashDecompressed ($decompressedPath) $hashAlgorithm failed (actual was $hashValueActual, expected was $hashValue)"
	fi
}

function recordHashes()
{
	local -r hashesFile="$LIBERTINE_DOWNLOAD_PATH".hashes
	rm -rf "$hashesFile"
	{
		printf '\t\t%s %s\n' "size" "$(stat --printf='%s' "$LIBERTINE_DOWNLOAD_PATH")"
		printf '\t\t%s %s\n' "decompressed_size" "$(stat --printf='%s' "$decompressedPath")"
		
		local hashAlgorithm
		local hashProgram
		local hashBinary
		local hashValue
		local irrelevant
		
		for hashAlgorithm in md5 sha1 sha224 sha256 sha384 sha512
		do
			hashProgram=${hashAlgorithm}sum
			
			IFS=' ' read -r hashValue irrelevant <<<"$(${hashProgram} "$LIBERTINE_DOWNLOAD_PATH")"
			printf '\t\t%s %s\n' "$hashAlgorithm" "$hashValue"
			IFS=' ' read -r hashValue irrelevant <<<"$(${hashProgram} "$decompressedPath")"
			printf '\t\t%s %s\n' "decompressed_${hashAlgorithm}" "$hashValue"
		done
	} >"$hashesFile"
}
