#!/usr/bin/env bash
set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi +o xtrace;unset BASH_ENV;unset BASH_XTRACEFD;unset CDPATH;unset ENV;unset FCEDIT;unset FIGNORE;unset FUNCNEST;unset GLOBIGNORE;unset HISTCONTROL;unset HISTFILE;unset HISTFILESIZE;unset HISTIGNORE;unset HISTSIZE;unset HISTTIMEFORMAT;unset HOSTFILE;unset IGNOREEOF;unset INPUTRC;unset MAIL;unset MAILCHECK;unset MAILPATH;unset TMOUT;umask 022

function ensureWeAreRunningBash4()
{
	if [ ${BASH_VERSINFO[0]} != "4" ]; then
		exitError "$ourName: You are not running bash 4."
	fi
}

# The purpose of these functions is to provide internal implementations of logic we can't be 100%
# sure of exists in the environment or is implemented as we would like for critical pieces of code.
# Such a critical piece is code executed before and during command line arg parsing (eg exitError)
function purebash_dirname()
{
	local -r converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		echo "."
	else
		echo "$converted"
	fi
}

function purebash_basename()
{
	echo "${1##*/}"
}

function setDebugging()
{
	# is set -x on?
	if [[ "$-" == *x* ]]; then
		export LFS_BASH_DEBUGGING="yes"
		LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_BASH_DEBUGGING')
	elif [ ! -z "$LFS_BASH_DEBUGGING" ]; then
		if [ "$LFS_BASH_DEBUGGING" = "yes" ]; then
			set -x
		fi
		LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_BASH_DEBUGGING')
	fi
}

function findOurNameAndPath()
{
	readonly ourName="$(purebash_basename "$0")"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('ourName')
	pushd "$(purebash_dirname "$0")" >/dev/null
	readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function executeWithCleanEnvironment()
{
	exec sudo -p "Password required to run as root: " HOME="$HOME" TERM="$TERM" LFS_BASH_DEBUGGING="$LFS_BASH_DEBUGGING" LFS_CLEAN_ENVIRONMENT='yes' PATH="$PATH" -- "$crudeOurPath"/"$ourName" $@
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exit 1
}

function exitHelp()
{
	echo -n -E "Usage: ${ourName} -h
Usage: ${ourName} [-l lfsPath] [-c lfsConfigPath] [-s lfsCachePath] [-m mirrors] [-p path] [-o option] -- machine

Defaults
    lfsPath            ${lfsPath}
    lfsConfigPath      ${lfsConfigPath}
    lfsCachePath       ${lfsCachePath}
    mirrors            ${mirrors}
    path               ${path}
    option             See below

A machine defines machine settings in <lfsConfigPath>/settings/machines/<machine>.settings

A mirror defines mirror URLs. If a mirror is 'timezone', then timezone settings used to determine the actual mirrors.
If Etc/UTC or something similar is the timezone, then the 'language' mirrors are used. These use the LC_CTYPE,
LANG and LANGUAGE environment variables in order. The 'global' mirror can be specified to override this. A list of mirrors
is in <lfsConfigPath>/mirrors . Conversions from timezone and language are controlled using <lfsConfigPath>/timezones-to-mirrors.map
and <lfsConfigPath>/languages-to-mirrors.map respectively. Note that some mirrors, eg for the UK, are incomplete and source
the global mirrors first to provide defaults. mirrors may be symlinks.

At this time we don't support the metalink (.meta4) protocol for mirrors (as it requires additional
runtime dependencies).

A path is used to define the location of essential programs used during initial bootstrapping. It also defines a packageManager
to automatically install any missing dependencies. The PATH variable is reset to the location of these programs.

Options
For options, prefix with either 'yes-' to turn it on
or 'no-' to turn it off. For example, to turn on 'skip-signature-checks' :-

    ${ourName} -o yes-skip-signature-checks

-o may be repeated as necessary. Options are evaluated in left-to-right order.
Last setting wins.

Options are as follows:-   Default
    skip-signature-checks  ${skipSignatureChecks}
    parallel-make          ${parallelMake}
    verbose                ${verbose}
" 1>&2
	exit $1
}

function parseCommandLine()
{	
	lfsPath="/var/tmp/lfs"
	
	lfsConfigPath="${crudeOurPath}/config"
	
	lfsCachePath="$lfsConfigPath"/cache
	
	mirrors="timezone"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('mirrors')
	
	path="debian"
	if [ "${MACHTYPE:0:19}" = "x86_64-apple-darwin" ]; then
		path="homebrew"
	elif [ "${MACHTYPE:0:17}" = "i386-apple-darwin" ]; then
		path="homebrew"
	fi
	
	skipSignatureChecks="no"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('skipSignatureChecks')
	
	parallelMake="yes"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('parallelMake')
	
	verbose="no"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('verbose')
	
	machine="simple"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('machine')
	
	local OPTERR=1
	local OPTIND=1
	local OPTARG
	local option
	while getopts :hl:d:m:1:2:o: option
	do
		case "$option" in
			
			h)
				exitHelp 2
			;;
			
			l)
				lfsPath="$OPTARG"
			;;
			
			c)
				lfsConfigPath="$OPTARG"
			;;

			s)
				lfsCachePath="$OPTARG"
			;;
			
			m)
				mirrors="$OPTARG"
			;;
			
			o)
				if [ -z "$OPTARG" ]; then
					exitError "Invalid option -o requires an argument"
				fi
			
				case "$OPTARG" in
					
					no-skip-signature-checks)
						skipSignatureChecks="no"
					;;
					
					yes-skip-signature-checks)
						skipSignatureChecks="yes"
					;;
					
					no-parallel-make)
						parallelMake="no"
					;;
					
					yes-parallel-make)
						parallelMake="yes"
					;;
					
					no-verbose)
						verbose="no"
					;;
					
					yes-verbose)
						verbose="yes"
					;;
					
					*)
						exitError "Invalid option -o ${OPTARG}"
					;;
					
				esac
			;;
			
			'?')
				exitError "Invalid option -${OPTARG}"
			;;
			
		esac
	done
	
	shift $((OPTIND - 1))
	if [ $# -eq 1 ]; then
		machine="$1"
	else
		exitError "Please specify one machine"
	fi
}

function setLfsConfigPath()
{
	if [ ! -d "$lfsConfigPath" ]; then
		exitError "Config path $lfsConfigPath does not exist or is not a directory"
	fi
	pushd "$lfsConfigPath">/dev/null
	lfsConfigPath="$(pwd)"
	popd >/dev/null
}

function sourceFunctions()
{
	readonly functionsPath="$lfsConfigPath"/functions
	if [ ! -d "$functionsPath" ]; then
		exitError "functions path $functionsPath does not exist or is not a directory"
	fi
	
	local fileToSource
	pushd "$functionsPath" >/dev/null
		
		for fileToSource in *.functions
		do
			source "$fileToSource"
		done
		
	popd >/dev/null
}

function setPaths()
{
	ensureWeAreRunningBash4
	
	setLfsConfigPath
	
	sourceFunctions
	
	verifyHostSystemRequirementsUsingDependencyChecks "$path"
	
	setPathsAfterSourcingFunctions
	
	setLfsPaths
}

function createSkeletonFolderStructure()
{
	mkdir -m 0755 -p "$LFS"
	
	# Logs
	mkdir -m 0755 -p "$lfsLogPath"
	rm -rf "$lfsLogPath"/*
	
	readonly downloadsLogsPath="$lfsLogPath"/downloads
	mkdir -m 0755 -p "$downloadsLogsPath"
}

function initialiseLogging()
{
	rm -rf "$lfsLogPath"/"$ourName".log
	# Does not work for background tasks!
	exec 1> >(tee --append "$lfsLogPath"/"$ourName".log)
}

function installPackageSkip()
{
	:
}

function extractPackageSources()
{
	setDependencyPathValues
	
	if [ -f "$LFS_DEPENDENCY_FINISHED_PATH" ]; then
		return 0
	fi

	pushd "$LFS_DEPENDENCY_SOURCE_PATH" >/dev/null
		
		local -i index
		for index in ${dependency_SourcePackageIndices["$LFS_DEPENDENCY_KEY"]}
		do
			setLfsSourcePackageVariables $index
	
			if [ -d "$lfsExtractsPath"/"$LFS_SOURCE_PACKAGE_MIRROR"/"$LFS_SOURCE_PACKAGE_RELATIVE_PATH".decompressed ]; then
				( tarExtract "$LFS_SOURCE_PACKAGE_NAME" "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "" "$LFS_SOURCE_PACKAGE_IS_TARBOMB" )
			else
				( tarExtract "$LFS_SOURCE_PACKAGE_NAME" "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$LFS_SOURCE_PACKAGE_COMPRESSION" "$LFS_SOURCE_PACKAGE_IS_TARBOMB" )
			fi
		done
		
	popd >/dev/null
}

function patchPackageSources()
{
	setDependencyPathValues
	
	if [ -f "$LFS_DEPENDENCY_FINISHED_PATH" ]; then
		return 0
	fi
	
	SECONDS=0
	informationMessage TASK "Patching phase $LFS_PHASE dependency $LFS_DEPENDENCY_NAME version $LFS_DEPENDENCY_VERSION"
	
	pushd "$LFS_DEPENDENCY_SOURCE_PATH" >/dev/null
		
		INSTALLATION_FAILED_MESSAGE="Patching phase $LFS_PHASE dependency $LFS_DEPENDENCY_NAME version $LFS_DEPENDENCY_VERSION (logs in $LFS_DEPENDENCY_LOG_PATH/err and out)"
		addInstallationFailedTrapHandler
		
			exec 6>&1 1>"$LFS_DEPENDENCY_LOG_OUT"
			exec 7>&2 2>"$LFS_DEPENDENCY_LOG_ERR"
				
				local patchSourcePackageName
				local patchSourcePackageVersion
				local pathCorrection
				for index in $LFS_DEPENDENCY_PATCHES
				do
					setLfsSourcePackageVariables ${patches_SourcePackageIndex[$index]}

					if [ ! -z "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" ]; then
						pushd "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" >/dev/null
						pathCorrection=".."
					else
						pathCorrection="."
					fi
					
					echo "Applying patch ${patches_FileName[$index]}"
					if ! sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} patch -Np1 -i "$pathCorrection"/"${patches_FileName[$index]}"; then
						exit 100
					fi
				
					if [ ! -z "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" ]; then
						popd >/dev/null
					fi
				done
				
			exec 1>&6 6>&-
			exec 2>&7 7>&-
			
		removeLastTrapHandler
		
	popd >/dev/null
	
	informationMessage PASS "Patching phase $LFS_PHASE dependency $LFS_DEPENDENCY_NAME version $LFS_DEPENDENCY_VERSION ($SECONDS seconds)"
}

function removeAnyFailedPackagesFromPreviousRuns()
{
	local phaseFolder
	local dependencyName
	local dependencyVersion
	local dependencyHashes
	
	if [ ! -d "$LFS_OPT_PATH" ]; then
		return 0
	fi
	
	pushd "$LFS_OPT_PATH" >/dev/null
		for phaseFolder in *
		do
			if [ ! -e "$phaseFolder" ]; then
				continue
			fi
			
			if [ ! -d "$phaseFolder" ]; then
				continue
			fi
			
			pushd "$phaseFolder" >/dev/null
				for dependencyName in *
				do
					if [ ! -e "$dependencyName" ]; then
						continue
					fi
		
					if [ ! -d "$dependencyName" ]; then
						continue
					fi
					
					pushd "$dependencyName" >/dev/null
						for dependencyVersion in *
						do
							if [ ! -e "$dependencyVersion" ]; then
								continue
							fi
							
							if [ "$dependencyVersion" = "current" ]; then
								if [ ! -e "$(readlink current)" ]; then
									rm -f current
									continue
								fi
							fi
		
							if [ ! -d "$dependencyVersion" ]; then
								continue
							fi
					
							pushd "$dependencyVersion" >/dev/null
								for dependencyHashes in *
								do
									if [ ! -e "$dependencyHashes" ]; then
										continue
									fi
		
									if [ ! -d "$dependencyHashes" ]; then
										continue
									fi
									
									if [ -f "$dependencyHashes"/finished ]; then
										continue
									fi
									
									chattr -R -ai "$dependencyHashes" 2>/dev/null || true
									rm -rf "$dependencyHashes"
									if [ -L current ]; then
										if [ ! -e "$(readlink current)" ]; then
											rm -f current
										fi
									fi
									if [ -L recipe-settings-dependencies ]; then
										if [ ! -e "$(readlink recipe-settings-dependencies)" ]; then
											rm -f recipe-settings-dependencies
										fi
									fi
									
								done
							popd  >/dev/null
							
							if [ "$dependencyVersion" = "current" ]; then
								if [ ! -e "$(readlink current)" ]; then
									rm -f current
									continue
								fi
							fi
							
						done
					popd  >/dev/null
					
				done
			popd  >/dev/null
			
		done
	popd  >/dev/null
	
	find "$LFS_OPT_PATH" -depth -mindepth 1 -maxdepth 4 -type d -empty -delete
}

function loopOverDependenciesInAllPhasesAsynchronously()
{
	local -r callback="$1"
	
	prepareWaitForJobs
	for LFS_PHASE in crosscompiler toolchain2 system
	do
		for LFS_DEPENDENCY_KEY in ${phase_InstallationOrder["${LFS_PHASE}"]}
		do
			setCommonLfsDependencyVariables
			
			parallelJob $callback
		done
	done
	waitForJobs
}

function loopOverDependenciesInPhase()
{
	local -r callback="$1"
	
	for LFS_DEPENDENCY_KEY in ${phase_InstallationOrder["${LFS_PHASE}"]}
	do
		setCommonLfsDependencyVariables

		$callback
	done
}

function calculateDependencyPaths()
{
	# Can not be asynchronous as sets variables
	for LFS_PHASE in crosscompiler toolchain2 system
	do
		loopOverDependenciesInPhase dependencyToPath
	done
}

function extractAndPatchAllPackageSources()
{
	SECONDS=0
	informationMessage TASK "Extracting packages"
	for LFS_PHASE in crosscompiler toolchain2 system
	do
		loopOverDependenciesInPhase extractPackageSources
	done
	wait
	informationMessage PASS "Extracting packages ($SECONDS seconds)"
	
	loopOverDependenciesInAllPhasesAsynchronously patchPackageSources
}

function writeToMakeFile()
{
	setDependencyPathValues
	
	local makeDependencies=""
	for dependency in ${dependency_Dependencies["$LFS_DEPENDENCY_KEY"]}
	do
		if  [ -z "$makeDependencies" ]; then
			makeDependencies="$dependency"
		else
			makeDependencies="$makeDependencies $dependency"
		fi
	done
	
	if [ -f "$LFS_DEPENDENCY_FINISHED_PATH" ]; then
		linkBinariesToPath
		linkSystemBinariesToPath

		echo "$LFS_DEPENDENCY_KEY: $makeDependencies" >>"$makeFile"
		if [ "$verbose" = "yes" ]; then
			printf '\t%s\n' "@echo $ourName: TASK: Skipping $LFS_DEPENDENCY_NAME" >>"$makeFile"
			printf '\t%s\n\n' "@echo $ourName: PASS: Skipping $LFS_DEPENDENCY_NAME" >>"$makeFile"
		fi
		return 0
	fi
	
	createInstallScriptForMakefile
	echo "$LFS_DEPENDENCY_KEY: $makeDependencies" >>"$makeFile"
	printf '\t@%s\n\n' "$LFS_DEPENDENCY_SCRIPT_PATH" >>"$makeFile"
}

function installPackages()
{
	LFS_PHASE="$1"
	
	prepareZzzLfsPath
	prepareMuslCrossPath
	
	temporaryFileToRemoveOnExit
	local -r makeFile="$TMP_FILE"
	
	cat >>"$makeFile" <<-EOF
		.PHONY: all ${phase_InstallationOrder["${LFS_PHASE}"]}
		
		all: ${phase_InstallationOrder["${LFS_PHASE}"]}
		
	EOF
	
	loopOverDependenciesInPhase writeToMakeFile
	
	SECONDS=0
	informationMessage TASK "Phase $LFS_PHASE"
	cp $makeFile /tmp/Makefile
		
		if [ "$LFS_BASH_DEBUGGING" = "yes" ]; then
			local -r logFile="$LFS_DEPENDENCY_LOG_ERR"
		else
			local -r logFile=/dev/null
		fi
		
		if ! make --jobs $LFS_MAKE_PACKAGE_JOBS --load-average $LFS_MAKE_LOAD_AVERAGE --no-builtin-rules --no-builtin-variables --makefile "$makeFile" all; then
			informationMessage FAIL "Phase $LFS_PHASE"
			exit 1
		fi
		
	informationMessage PASS "Phase $LFS_PHASE ($SECONDS seconds)"
}

function main()
{
	setDebugging
	findOurNameAndPath
	parseCommandLine "$@"
	
	if [ "$LFS_CLEAN_ENVIRONMENT" != "yes" ]; then
		executeWithCleanEnvironment "$@"
	fi
	
	setPaths
	
	createSkeletonFolderStructure
	
	initialiseLogging
	
	# Defensive
	declare_for_chroot FUNCNEST
	FUNCNEST=40
	
	setLocale
	setMakeFlags
	
	initialiseTraps
	
	doInclude
	
	# Suspended for now, as we are using --cacert instead of --capath
	#rehashCertificateAuthorities
	
	doDownloads
	
	removeAnyFailedPackagesFromPreviousRuns
	
	calculateDependencyPaths
	
	extractAndPatchAllPackageSources
	
	LFS_PHASE="system" prepareZzzLfsPath
	installEssentialFolderStructure
	
	LFS_PATH_ORIGINAL="$PATH"
	
	installPackages crosscompiler
	installPackages toolchain2
}

main "$@"
