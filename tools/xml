#!/bin/bash -
#set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi +o xtrace;unset BASH_ENV;unset BASH_XTRACEFD;unset CDPATH;unset ENV;unset FCEDIT;unset FIGNORE;unset FUNCNEST;unset GLOBIGNORE;unset HISTCONTROL;unset HISTFILE;unset HISTFILESIZE;unset HISTIGNORE;unset HISTSIZE;unset HISTTIMEFORMAT;unset HOSTFILE;unset IGNOREEOF;unset INPUTRC;unset MAIL;unset MAILCHECK;unset MAILPATH;unset TMOUT;umask 022

function callback_element()
{
	local -r tagName="$1"
	local -r attributes="$2"
	local -r content="$3"
	local -ir isEnd=$4
	
	if [ $isEnd -eq 1 ]; then
		return 0
	fi
	
	echo "$tagName"
}

function read_dom()
{
	local entity
	local content
	local -r IFS=\>
	read -d \< entity content
	local -ir exitCode=$?
	
	if [ ${#entity} -eq 0 ] ; then
		return $exitCode
	elif [ "${entity:0:1}" = "/" ]; then
		local -ir isEnd=1
		entity="${entity:1}"
	elif [ "${entity:${#entity}-1:1}" = "/" ]; then
		# self-closed
		local -ir isEnd=2
		entity="${entity:0:${#entity}-1}"
	else
		local -ir isEnd=0
	fi
	
	local -r tagName=${entity%% *}
	if [ ${#tagName} -eq 0 ]; then
		return $exitCode
	fi
	local -r attributes=${entity#* }
	
	# This cool trick creates attributes as bash variables. Unfortunately, it's inherently unsafe as XML input can not be considered trusted
	# also, the data is raw
	# eval local $attributes
	
	case $isEnd in
		
		0)
			callback_element "$tagName" "$attributes" "$content" 0
		;;
		
		1)
			callback_element "$tagName" "" "$content" 1
		;;
		
		2)
			callback_element "$tagName" "$attributes" "$content" 0
			callback_element "$tagName" "" "$content" 1
		;;
		
	esac
	return $exitCode
}

# dtds, comments, processing instructions, cdata all not handled (could be with sed removal)
function parse_dom()
{
	#echo x"$entity"x x"$content"x x"$tagName"x x"$attributes"x
	
	if [[ $tagName = "foo" ]]; then
		eval local $attributes
		#echo "foo size is: $size"
	elif [[ $tagName = "bar" ]]; then
		eval local $attributes
		#echo "bar type is: $type"
	fi
}

function doIt()
{
	while read_dom
	do
		parse_dom
	done
}

cat <<-EOF | doIt
	<example>A
	  B<bar size="bar_size" type="metal">1111</bar>
	  <foo size="1789" type="unknown">2222</foo>
	  <close col="45"/>
	</example>
EOF
