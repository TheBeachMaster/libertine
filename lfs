#!/bin/bash -
set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi +o xtrace;unset BASH_ENV;unset BASH_XTRACEFD;unset CDPATH;unset ENV;unset FCEDIT;unset FIGNORE;unset FUNCNEST;unset GLOBIGNORE;unset HISTCONTROL;unset HISTFILE;unset HISTFILESIZE;unset HISTIGNORE;unset HISTSIZE;unset HISTTIMEFORMAT;unset HOSTFILE;unset IGNOREEOF;unset INPUTRC;unset MAIL;unset MAILCHECK;unset MAILPATH;unset TMOUT;umask 022

function declare_for_chroot()
{
	if [ $# -eq 1 ]; then
		# Done this way to avoid a Core Dump!
		local -r variable="$1"
		eval $variable=
	else
		local -r flags="$1"
		local -r variable="$2"
		declare ${flags}g $variable
	fi
	
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=($variable)
}

function redeclare_array_for_chroot()
{
	local -r variable="$1"
	declare -a $variable
	LFS_ARRAY_VARIABLES_TO_REDECLARE_IN_CHROOT+=($variable)
}

declare_for_chroot -a LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT
declare_for_chroot INSTALLATION_FAILED_MESSAGE

declare_for_chroot -a LFS_ARRAY_VARIABLES_TO_REDECLARE_IN_CHROOT
redeclare_array_for_chroot trapHandlers
redeclare_array_for_chroot filesToRemoveOnExit

# Defensive
declare_for_chroot FUNCNEST
FUNCNEST=40

function ensureWhichInstalled()
{
	set +e
	which
	local -ir exitCode=$?
	set -e
	if [ $exitCode = 127 ]; then
		exitError "Program which does not exist on path $PATH"
	fi
}

function essentialProgramCheck()
{
	# This nasty hack exists because source'd files override the set -xxxx options!
	set -e
	
	local program
	for program in "$@"
	do
		if ! which "$program" 1>/dev/null 2>/dev/null; then
			warning "Program $program does not exist on path $PATH"
			return 100
		fi
	done
}

function verifyDependency()
{
	if [ $# -lt 2 ]; then
		exitError "Needs at least 2 arguments"
	fi
	if [ $# -gt 3 ]; then
		exitError "Needs no more than 3 arguments"
	fi
	
	local -r sourcePackageName="$1"
	
	local version
	read -r -d$'\n' version
	
	# May be incomplete, eg part of the left-hand regex
	# eg 4.2.25(1)-release might be 4.2
	local -r minimumVersion="$2"
	
	# 0 is equal, =
	# 1 is greater than, >
	# 2 is less than, <
	set +e
	compareVersions "$version" "$minimumVersion"
	local -i comparison=$?
	set -e
	if [ $comparison -eq 2 ]; then
		warning "Dependency $sourcePackageName has a version, $version, less than the minimum known to work, $minimumVersion"
	fi
	
	if [ $# -eq 3 ]; then
		local -r maximumVersion="$3"
		
		set +e
		compareVersions "$version" "$maximumVersion"
		local -i comparison=$?
		set -e
		if [ $comparison -eq 1 ]; then
			warning "Dependency $sourcePackageName has a version, $version, greater than the maximum known to work, $maximumVersion"
		fi
	fi
}

# Derived from http://stackoverflow.com/questions/4023830/bash-how-compare-two-strings-in-version-format
function compareVersions()
{
	if [[ "$1" == "$2" ]]; then
		return 0
	fi
	
	local IFS=.
	local i ver1=($1) ver2=($2)
	
	# fill empty fields in ver1 with zeros
	for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
	do
		ver1[i]=0
	done
	
	for ((i=0; i<${#ver1[@]}; i++))
	do
		if [[ -z ${ver2[i]} ]]; then
			# fill empty fields in ver2 with zeros
			ver2[i]=0
		fi
		if ((10#${ver1[i]} > 10#${ver2[i]})); then
			return 1
		fi
		if ((10#${ver1[i]} < 10#${ver2[i]})); then
			return 2
		fi
	done
	
	return 0
}

# The purpose of these functions is to provide internal implementations of logic we can't be 100%
# sure of exists in the environment or is implemented as we would like for critical pieces of code.
# Such a critical piece is code executed before and during command line arg parsing (eg exitError)
# They will usually be MUCH slower than their external equivalents
function purebash_dirname()
{
	local -r converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		echo "."
	else
		echo "$converted"
	fi
}

function purebash_basename()
{
	echo "${1##*/}"
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exit 1
}

function warning()
{
	if [ $# -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	echo "$ourName: WARNING: $1" 1>&2
}

function setDebugging()
{
	# is set -x on?
	if [[ "$-" == *x* ]]; then
		export LFS_BASH_DEBUGGING="yes"
		LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_BASH_DEBUGGING')
	elif [ ! -z "$LFS_BASH_DEBUGGING" ]; then
		if [ "$LFS_BASH_DEBUGGING" = "yes" ]; then
			set -x
		fi
		LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_BASH_DEBUGGING')
	fi
}

function findOurNameAndPath()
{
	readonly ourName="$(purebash_basename "$0")"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('ourName')
	pushd "$(purebash_dirname "$0")" >/dev/null
	readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function executeWithCleanEnvironment()
{
	essentialProgramCheck env sudo
	exec env -i HOME="$HOME" TERM="$TERM" PATH="/sbin:/bin:/usr/sbin:/usr/bin" LFS_BASH_DEBUGGING="$LFS_BASH_DEBUGGING" LFS_CLEAN_ENVIRONMENT='yes' sudo -E -p "Password required to run as root: " -- "$crudeOurPath"/"$ourName" $@
}

function exitHelp()
{
	echo -n -E "Usage: ${ourName} -h
Usage: ${ourName} -d distribution [-l lfsPath] [-c lfsConfigPath] [-m mirrors] [-1 crosscompilerProfile] [-2 toolchain2Profile] [-o option] -- [profiles ...]

Profiles
[profiles ...] lists one or more system profiles to create. These are snippets of simplified bash
script, that install and build from source what would be called packages on other systems.

If no profile is specified, then the baseline 'lfs' profile is used.

profiles are executed in the order listed. Internally, a profile may reference (source)
another profile it depends on. This is the equivalent of package management on other
systems. A set of profiles is intended to be version-controlled using a source control system
such as git and so do not declare explicit version dependencies.

The profiles 'crosscompiler' and 'toolchain2' are special. Implementors of profiles can assume
that these profiles are always sourced. It is an error to specify them in the list of profiles.

A profile does not have to just install packages.

Profiles may be suffixed with [distribution] to target a particular distribution.

Defaults
    distribution       ${LFS_DISTRIBUTION_VERSION}
    lfsPath            ${lfsPath}
    lfsConfigPath      ${lfsConfigPath}
    mirrors            ${mirrors}
    crosscompilerProfile  ${crosscompilerProfile}
    toolchain2Profile  ${toolchain2Profile}
    option             See below
    profiles           ${profiles}

A mirror defines mirror URLs. If a mirror is 'timezone', then timezone settings used to determine the actual mirrors.
If Etc/UTC or something similar is the timezone, then the 'language' mirrors are used. These use the LC_CTYPE,
LANG and LANGUAGE environment variables in order. The 'global' mirror can be specified to override this. A list of mirrors
is in <lfsConfigPath>/mirrors . Conversions from timezone and language are controlled using <lfsConfigPath>/timezones-to-mirrors.map
and <lfsConfigPath>/languages-to-mirrors.map respectively. Note that some mirrors, eg for the UK, are incomplete and source
the global mirrors first to provide defaults. mirrors may be symlinks.

At this time we don't support the metalink (.meta4) protocol for mirrors (as it requires additional
runtime dependencies).

Options
For options, prefix with either 'yes-' to turn it on
or 'no-' to turn it off. For example, to turn on 'strip-system-docs' :-

    ${ourName} -o yes-strip-system-docs

-o may be repeated as necessary. Options are evaluated in left-to-right order.
Last setting wins.

Options are as follows:-     Default
    skip-toolchain-if-backup-exists  ${skipToolchainIfBackupExists}
    strip-toolchain-symbols          ${stripToolchainSymbols}
    strip-system-symbols             ${stripSystemSymbols}
    strip-system-docs                ${stripSystemDocs}
" 1>&2
	exit $1
}

function parseCommandLine()
{
	# Defaults
	LFS_DISTRIBUTION_VERSION="7.4"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_DISTRIBUTION_VERSION')
	
	lfsPath="/var/tmp/lfs"
	
	lfsConfigPath="${crudeOurPath}/config"
	
	mirrors="timezone"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('mirrors')
	
	crosscompilerProfile=crosscompiler
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('crosscompilerProfile')
	
	toolchain2Profile=toolchain2
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('toolchain2Profile')
	
	skipToolchainIfBackupExists="yes"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('skipToolchainIfBackupExists')
	
	stripToolchainSymbols="yes"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('stripToolchainSymbols')
	
	stripSystemSymbols="yes"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('stripSystemSymbols')
	
	stripSystemDocs="no"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('stripSystemDocs')
	
	profiles="system"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('profiles')
	
	if [ "$LFS_CLEAN_ENVIRONMENT" != "yes" ]; then
		executeWithCleanEnvironment "$@"
	else
		local OPTERR=1
		local OPTIND=1
		local OPTARG
		local option
		while getopts :hl:d:m:1:2:o: option
		do
			case "$option" in
				
				h)
					exitHelp 2
				;;
				
				d)
					LFS_DISTRIBUTION_VERSION="$OPTARG"
				;;
				
				l)
					lfsPath="$OPTARG"
				;;
				
				c)
					lfsConfigPath="$OPTARG"
				;;
				
				m)
					mirrors="$OPTARG"
				;;
				
				1)
					crosscompilerProfile="$OPTARG"
				;;
				
				2)
					toolchain2Profile="$OPTARG"
				;;
				
				o)
					if [ -z "$OPTARG" ]; then
						exitError "Invalid option -o requires an argument"
					fi
				
					case "$OPTARG" in
						
						no-skip-toolchain-if-backup-exists)
							skipToolchainIfBackupExists="no"
						;;
						
						yes-skip-toolchain-if-backup-exists)
							skipToolchainIfBackupExists="yes"
						;;
						
						no-strip-toolchain-symbols)
							stripToolchainSymbols="no"
						;;
						
						yes-strip-toolchain-symbols)
							stripToolchainSymbols="yes"
						;;
						
						no-strip-system-symbols)
							stripSystemSymbols="no"
						;;
						
						yes-strip-system-symbols)
							stripSystemSymbols="yes"
						;;
						
						no-strip-system-docs)
							stripSystemDocs="no"
						;;
						
						yes-strip-system-docs)
							stripSystemDocs="yes"
						;;
						
						*)
							exitError "Invalid option -o ${OPTARG}"
						;;
						
					esac
				;;
				
				'?')
					exitError "Invalid option -${OPTARG}"
				;;
				
			esac
		done
		
		shift $((OPTIND - 1))
		if [ $# -ne 0 ]; then
			profiles="$@"
		fi
		
		if [ -z "$LFS_DISTRIBUTION_VERSION" ]; then
			exitError "Please specify a distribution using -d"
		fi
	fi
}

function setPathsAndExports()
{
	export PATH=/sbin:/bin:/usr/sbin:/usr/bin
	
	essentialProgramCheck mkdir uname awk sort md5sum
	
	if [ ! -d "$lfsConfigPath" ]; then
		exitError "Config path $lfsConfigPath does not exist or is not a directory"
	fi
	pushd "$lfsConfigPath">/dev/null
	lfsConfigPath="$(pwd)"
	popd >/dev/null
	
	readonly distributionConfigPath="$lfsConfigPath"/"$LFS_DISTRIBUTION_VERSION"
	if [ ! -d "$distributionConfigPath" ]; then
		exitError "distribution config path $distributionConfigPath does not exist or is not a directory"
	fi
	
	readonly certificateAuthoritiesPath="$distributionConfigPath"/certificate-authorities
	if [ ! -d "$certificateAuthoritiesPath" ]; then
		exitError "certificate-authorities path $certificateAuthoritiesPath does not exist or is not a directory"
	fi
	
	readonly mirrorsPath="$distributionConfigPath"/mirrors
	if [ ! -d "$mirrorsPath" ]; then
		exitError "Mirrors path $mirrorsPath does not exist or is not a directory"
	fi
	
	readonly profilesPath="$distributionConfigPath"/profiles
	if [ ! -d "$profilesPath" ]; then
		exitError "Profiles path $profilesPath does not exist or is not a directory"
	fi
	
	readonly gpghomePath="$distributionConfigPath"/gpghome
	if [ ! -d "$gpghomePath" ]; then
		exitError "gpghome path $gpghomePath does not exist or is not a directory"
	fi
	
	readonly keyringsPath="$distributionConfigPath"/keyrings
	if [ ! -d "$keyringsPath" ]; then
		exitError "Keyrings path $keyringsPath does not exist or is not a directory"
	fi
	
	readonly keysPath="$distributionConfigPath"/keys
	if [ ! -d "$keysPath" ]; then
		exitError "Keys path $keysPath does not exist or is not a directory"
	fi
	
	readonly signaturesPath="$distributionConfigPath"/signatures
	if [ ! -d "$signaturesPath" ]; then
		exitError "Signatures path $signaturesPath does not exist or is not a directory"
	fi
	
	readonly recipesPath="$distributionConfigPath"/recipes
	if [ ! -d "$recipesPath" ]; then
		exitError "Recipes path $recipesPath does not exist or is not a directory"
	fi
	
	readonly recipesPackageUidFile="$recipesPath"/package-uid
	if [ ! -f "$recipesPackageUidFile" ]; then
		exitError "package-uid file $recipesPackageUidFile does not exist or is not a file"
	fi
	
	readonly includesPath="$distributionConfigPath"/includes
	if [ ! -d "$includesPath" ]; then
		exitError "includes path $includesPath does not exist or is not a directory"
	fi
	
	readonly functionsPath="$distributionConfigPath"/functions
	if [ ! -d "$includesPath" ]; then
		exitError "functions path $functionsPath does not exist or is not a directory"
	fi
	
	readonly settingsPath="$distributionConfigPath"/settings
	if [ ! -d "$settingsPath" ]; then
		exitError "settings file $settingsPath does not exist or is not a directory"
	fi
	
	if [ ! -d "$lfsPath" ]; then
		mkdir -m 0755 -p "$lfsPath"
	fi
	pushd "$lfsPath">/dev/null
	lfsPath="$(pwd)"
	popd >/dev/null
	
	readonly lfsLogPath=/var/log/lfs/"$LFS_DISTRIBUTION_VERSION"
	readonly lfsDownloadsPath="$lfsPath"/downloads
	
	LFS="$lfsPath"/"$LFS_DISTRIBUTION_VERSION"
	
	export LC_ALL=POSIX
	LFS_TGT="$(uname -m)"-lfs-linux-gnu
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_TGT')
	
	if [ -f /proc/cpuinfo ]; then
		local -i highestCpu
		read -r -d $'\n' highestCpu < <(awk '$1 ~ /processor/ { print $3 }' /proc/cpuinfo | sort --unique --reverse --numeric-sort)
		local -ir highestCpuZeroBased=$((highestCpu + 1))
	else
		local -ir highestCpuZeroBased=1
	fi
	if [ $highestCpuZeroBased -ne 1 ]; then
		export MAKEFLAGS="-j $((highestCpuZeroBased*2))"
		LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('MAKEFLAGS')
	fi
}

function registerDebianPackage()
{
	printf '%s' "$@" >>"$LFS_CURRENT_DEBIAN_PACKAGES_TEMP"
}

function verifyHostSystemRequirements()
{
	# Check against http://www.linuxfromscratch.org/lfs/view/development/prologue/hostreqs.html
	
	readonly dependencyChecks="$distributionConfigPath"/dependency-checks
	if [ ! -d "$dependencyChecks" ]; then
		exitError "dependency-checks $dependencyChecks does not exist or is not a directory"
	fi
	
	local debianPackagesToInstallForDependencies=""
	
	pushd "$dependencyChecks" >/dev/null
		local dependencyCheck
		local -i exitCode
		for dependencyCheck in *.dependency-check
		do
			# Used to communicate with subshell, as we can't pass variables back (and we output stdout / stderr to the console)
			temporaryFileToRemoveOnExit
			LFS_CURRENT_DEBIAN_PACKAGES_TEMP="$TMP_FILE"
			# done as subshell to overcome the fact that commands are executing outside of a function
			if ! (source "$dependencyCheck"); then
				if [ -z "$debianPackagesToInstallForDependencies" ]; then
					debianPackagesToInstallForDependencies="$(head -n 1 "$LFS_CURRENT_DEBIAN_PACKAGES_TEMP")"
				else
					debianPackagesToInstallForDependencies="$debianPackagesToInstallForDependencies $(head -n 1 "$LFS_CURRENT_DEBIAN_PACKAGES_TEMP")"
				fi
			fi
		done
	popd >/dev/null

	if [ ! -z "$debianPackagesToInstallForDependencies" ]; then
		if which apt-get 1>/dev/null 2>/dev/null; then
			apt-get --quiet --quiet --yes update
			apt-get --quiet --quiet --yes install $debianPackagesToInstallForDependencies
		fi
	fi
}

function include_mirrors()
{
	progressMessage "Including mirror $mirrors"
	
	pushd "$mirrorsPath" >/dev/null
		
		include_mirror "$mirrors"
		
	popd >/dev/null
	
	local requiredMirrorName
	for requiredMirrorName in "${!keyrings_Mirror[@]}" "${!keys_Mirror[@]}" "${!sourcePackages_Mirror[@]}" "${!patches_Mirror[@]}"
	do
		if ! mirrorExists "$requiredMirrorName"; then
			progressMessageFailed "Mirror $requiredMirrorName is not defined in mirrors $mirrors"
		fi
	done
	
	progressMessageSucceeded
}

function include_phase()
{
	local -r phase="$1"
	shift 1
	
	pushd "$profilesPath" >/dev/null
		
		declare -A LFS_RECIPE_VERSIONS
		declare -A LFS_RECIPE_VERSION
		for profile in "$@"
		do
			progressMessage "Including phase $phase profile $profile"
			LFS_PHASE="$phase" include_profile "$profile"
			progressMessageSucceeded
		done
		declare -A LFS_RECIPE_VERSION
		unset LFS_RECIPE_VERSIONS
		
	popd >/dev/null
}

function include_profiles()
{
	include_phase crosscompiler "$crosscompilerProfile"
	include_phase toolchain2 "$toolchain2Profile"
	include_phase system $profiles
}

function createSkeletonFolderStructure()
{
	mkdir -m 0755 -p "$LFS"
	
	# Logs
	mkdir -m 0755 -p "$lfsLogPath"
	rm -rf "$lfsLogPath"/*
	
	readonly downloadsLogsPath="$lfsLogPath"/downloads
	mkdir -m 0755 -p "$downloadsLogsPath"
}

function downloadCertificateAuthorities()
{
	local certificateAuthorityName
	for certificateAuthorityName in "${!certificateAuthorities_Mirror[@]}"
	do
		downloadFileAndCheckHash "certificate authority" "${certificateAuthorities_Mirror["${certificateAuthorityName}"]}" "${certificateAuthorities_RelativePath["${certificateAuthorityName}"]}" "$certificateAuthoritiesPath" "${certificateAuthorities_FileName["${certificateAuthorityName}"]}" "${certificateAuthorities_Compression["${certificateAuthorityName}"]}" "no" "${certificateAuthorities_Hashes["${certificateAuthorityName}"]}"
	done
}

function downloadSignatures()
{
	local -i index
	for index in ${!signatures_Mirror[@]}
	do
		downloadFileAndCheckHash "signature" "${signatures_Mirror[$index]}" "${signatures_RelativePath[$index]}" "$signaturesPath" "${signatures_FileName[$index]}" "${signatures_Compression[$index]}" "yes" ""
	done
}

function downloadKeyrings()
{
	local -i index
	for index in ${!keyrings_Mirror[@]}
	do
		downloadFileAndCheckHash "keyring" "${keyrings_Mirror[$index]}" "${keyrings_RelativePath[$index]}" "$keyringsPath" "${keyrings_FileName[$index]}" "${keyrings_Compression[$keyNumber]}" "no" "${keyrings_Hashes[$index]}"
	done
}

function downloadKeys()
{
	local -i index
	for index in ${!keys_Mirror[@]}
	do
		downloadFileAndCheckHash "key" "${keys_Mirror[$index]}" "${keys_RelativePath[$index]}" "$keysPath" "${keys_FileName[$index]}" "${keys_Compression[$index]}" "yes" "${keys_Hashes[$index]}"
	done
}

function downloadSources()
{
	local -i index
	for index in ${!sourcePackages_Mirror[@]}
	do
		downloadFileAndCheckHash "source package" "${sourcePackages_Mirror[$index]}" "${sourcePackages_RelativePath[$index]}" "/dev/null" "${sourcePackages_FileName[$index]}" "${sourcePackages_Compression[$index]}" "no" "${sourcePackages_Hashes[$index]}"
	done
}

function downloadPatches()
{
	local -i index
	for index in ${!patches_Mirror[@]}
	do
		downloadFileAndCheckHash "patch" "${patches_Mirror[$index]}" "${patches_RelativePath[$index]}" "/dev/null" "${patches_FileName[$index]}" "${patches_Compression[$index]}" "no" "${patches_Hashes[$index]}"
	done
}

function installEssentialFolderStructure()
{
	rm -rf -- "$LFS"/*
	
	# usr/local/etc exists occasionally. Why there isn't /usr/etc isn't clear.
	local folder
	for folder in bin boot dev proc etc home lib media mnt opt root run sbin srv sys usr var usr/local usr/local/etc
	do
		mkdir -m 0775 -p "$LFS"/"$folder"
	done
	
	# Required by the kernel to boot before udevd is started
	mknod -m 600 "$LFS"/dev/console c 5 1
	mknod -m 666 "$LFS"/dev/null c 1 3
	
	for folder in tmp var/tmp
	do
		mkdir -m 1775 -p "$LFS"/"$folder"
	done
	
	mkdir -m 0750 -p "$LFS"/root
	
	# libexec is a horrible idea, but it persists in some packages and it's best not to rock the boat
	for folder in X11R6 bin include lib libexec sbin src
	do
		mkdir -m 0775 -p "$LFS"/usr/"$folder" "$LFS"/usr/local/"$folder"
	done
	
	case "$(uname -m)" in
		x86_64)
			ln -s lib "$LFS"/lib64
			ln -s lib "$LFS"/usr/lib64
			ln -s lib "$LFS"/usr/local/lib64
		;;
		x86_32)
			ln -s lib "$LFS"/lib32
			ln -s lib "$LFS"/usr/lib32
			ln -s lib "$LFS"/usr/local/lib32
		;;
	esac
	
	for folder in doc info locale man misc terminfo zoneinfo dict sgml xml
	do
		mkdir -m 0775 -p "$LFS"/usr/share/"$folder" "$LFS"/usr/local/share/"$folder"
	done
	
	for folder in man1 man2 man3 man4 man5 man6 man7 man8
	do
		mkdir -m 0775 -p "$LFS"/usr/share/man/"$folder" "$LFS"/usr/local/share/man/"$folder"
	done
	
	ln -s /run "$LFS"/var/run
	ln -s /run/lock "$LFS"/var/lock
	
	# ? should we be symlinking /var/lib? what about /var/lib/hwclock,misc, /var/spool/cron
	for folder in account cache crash games lib local log mail opt spool tmp yp
	do
		ln -s /var/"$folder" "$LFS"/var/"$folder"
	done
	
	for folder in man doc info
	do
		ln -s share/"$folder" "$LFS"/usr/"$folder"
		ln -s share/"$folder" "$LFS"/usr/local/"$folder"
	done
	
	ln -s /proc/self/mounts "$LFS"/etc/mtab
}

function dependencyToPath()
{
	# TODO: Defer the 'current' creation
	local -r relativeOptPath=/opt/lfs
	local -r absoluteOptPath="${LFS}${relativeOptPath}"
	
	local -r relativeOptVersionPath="$relativeOptPath"/"$LFS_DISTRIBUTION_VERSION"
	local -r absoluteOptVersionPath="${LFS}${relativeOptVersionPath}"
	mkdir -m 0755 -p "$absoluteOptVersionPath"
	rm -rf -- "$absoluteOptVersionPath"/current
	ln -s "$LFS_DISTRIBUTION_VERSION" "$absoluteOptPath"/current
	
	local -r relativatePackagePath="$relativeOptVersionPath"/"$LFS_PHASE"/"$LFS_DEPENDENCY_NAME"
	local -r absolutePackagePath="${LFS}${relativatePackagePath}"
	mkdir -m 0755 -p "$absolutePackagePath"
	
	local -r relativeVersionPath="$relativatePackagePath"/"$LFS_DEPENDENCY_VERSION"
	local -r absoluteVersionPath="${LFS}${relativeVersionPath}"
	mkdir -m 0755 -p "$absoluteVersionPath"
	rm -rf -- "$absolutePackagePath"/current
	ln -s "$LFS_DEPENDENCY_VERSION" "$absolutePackagePath"/current
	
	
	# Find and hash dependencies
	addFileToRemoveOnExit
	local -r dependenciesFileUnsorted="$TMP_FILE"
	local dependency
	declare -A dependencyPaths=()
	for dependency in ${!dependency_Dependencies["$LFS_DEPENDENCY_KEY"]}
	do
		printf '%s\0' "${dependency_Path["$dependency"]}" >>"$dependenciesFileUnsorted"
		local name="${dependency_Name["$dependency"]}"
		dependencyPaths["$name"]="${dependency_Path["$dependency"]}"
	done
	addFileToRemoveOnExit
	local -r dependenciesFileSorted="$TMP_FILE"
	# --stable and LC_ALL=C to ensure a consistent sort order before hashing
	LC_ALL=C sort --key=1 --stable --zero-terminated "$dependenciesFileUnsorted" >"$dependenciesFileSorted"
	local -r dependenciesHash="$(sha224sum "$dependenciesFileSorted" | awk 'NR==1 {print $1}')"
	
	
	
	# We should consider breaking-up settings to per recipe - as this better reflects changes
	local -r recipeVersion=recipe-"$LFS_DEPENDENCY_RECIPE_HASH"-include-"$LFS_DEPENDENCY_INCLUDE_HASH"-settings-"$LFS_DEPENDENCY_SETTINGS_HASH"-dependencies-"$dependenciesHash"
	local -r relativeCompletePath="$relativeVersionPath"/"$recipeVersion"
	local -r absoluteCompletePath="${LFS}${relativeCompletePath}"
	mkdir -m 0755 -p "$absoluteCompletePath"
	chown ${LFS_DEPENDENCY_UID}:${LFS_DEPENDENCY_GID} "$absoluteCompletePath"
	rm -rf -- "$absoluteVersionPath"/current
	ln -s "$recipeVersion" "$absoluteVersionPath"/current
	
	dependency_Path["$LFS_DEPENDENCY_KEY"]="$relativeCompletePath"
	
	
	sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} -- mkdir -m 0755 -p "$absoluteCompletePath"/install
	
	sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} -- mkdir -m 0755 -p "$absoluteCompletePath"/log
	
	
	# Copy in source and patches from download cache
	sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} -- mkdir -m 0755 -p "$absoluteCompletePath"/source
	linkOrCopyFile "${sourcePackages_Mirror[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}" "${sourcePackages_RelativePath[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}" "$absoluteCompletePath"/source "${sourcePackages_FileName[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}"
	local -i index
	for index in $LFS_DEPENDENCY_PATCHES
	do
		linkOrCopyFile "${patches_Mirror[$index]}" "${patches_RelativePath[$index]}" "$absoluteCompletePath"/source "${patches_FileName[$index]}"
	done
	chmod -R 0644 -- "$absoluteCompletePath"/source/*
	chown -R ${LFS_DEPENDENCY_UID}:${LFS_DEPENDENCY_GID} -- "$absoluteCompletePath"/source/*
	
	
	mv "$dependenciesFileSorted" "$absoluteCompletePath"/dependencies.list
	chown ${LFS_DEPENDENCY_UID}:${LFS_DEPENDENCY_GID} "$absoluteCompletePath"/dependencies.list
	chmod 0400 "$absoluteCompletePath"/dependencies.list
	
	local -r absoluteDependenciesPath="$absoluteCompletePath"/dependencies
	mkdir -m 0755 -p "$absoluteDependenciesPath"
	local dependencyName
	local dependencyPath
	for dependencyName in "${!dependencyPaths[@]}"
	do
		ln -s "${dependencyPaths["$dependencyName"]}" "$absoluteDependenciesPath"/"$dependencyName"
	done
	
	cp "$recipesPath"/"$LFS_PHASE"/"$LFS_DEPENDENCY_NAME".recipe "$absoluteCompletePath"/recipe
	if [ "$LFS_DEPENDENCY_INCLUDE_HASH" != "0" ]; then
		cp "$includesPath"/"$LFS_DEPENDENCY_NAME".include "$absoluteCompletePath"/include
	fi
	if [ "$LFS_DEPENDENCY_SETTINGS_HASH" != "0" ]; then
		cp "$settingsPath"/"$LFS_PHASE"/"$LFS_DEPENDENCY_NAME".settings "$absoluteCompletePath"/settings
	fi
}

function installPerPackageFhs()
{
	ln -s /dev "$LFS_DEPENDENCY_INSTALL_PATH"/dev
	ln -s /proc "$LFS_DEPENDENCY_INSTALL_PATH"/proc
	ln -s /sys "$LFS_DEPENDENCY_INSTALL_PATH"/sys
	
	local folder
	for folder in bin boot etc home lib opt sbin srv usr var etc/opt usr/local
	do
		sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} -- mkdir -m 0775 -p "$LFS_DEPENDENCY_INSTALL_PATH"/"$folder"
	done
	
	sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} -- mkdir -m 0750 -p "$LFS_DEPENDENCY_INSTALL_PATH"/root
	
	ln -s /media "$LFS_DEPENDENCY_INSTALL_PATH"/media
	ln -s /mnt "$LFS_DEPENDENCY_INSTALL_PATH"/mnt
	ln -s /run "$LFS_DEPENDENCY_INSTALL_PATH"/run
	ln -s /tmp "$LFS_DEPENDENCY_INSTALL_PATH"/tmp
	
	ln -s /run "$LFS_DEPENDENCY_INSTALL_PATH"/var/run
	ln -s /run/lock "$LFS_DEPENDENCY_INSTALL_PATH"/var/lock
	
	case "$(uname -m)" in
		x86_64)
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/lib64
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/usr/lib64
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/usr/local/lib64
		;;
		x86_32)
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/lib32
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/usr/lib32
			ln -s lib "$LFS_DEPENDENCY_INSTALL_PATH"/usr/local/lib32
		;;
	esac
	
	# libexec is a horrible idea, but it persists in some packages and it's best not to rock the boat
	for folder in X11R6 bin include lib libexec sbin src
	do
		sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} -- mkdir -m 0775 -p "$LFS_DEPENDENCY_INSTALL_PATH"/usr/"$folder" "$LFS_DEPENDENCY_INSTALL_PATH"/usr/local/"$folder"
	done
	
	for folder in doc info locale man misc terminfo zoneinfo dict sgml xml
	do
		sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} -- mkdir -m 0775 -p "$LFS_DEPENDENCY_INSTALL_PATH"/usr/share/"$folder" "$LFS_DEPENDENCY_INSTALL_PATH"/usr/local/share/"$folder"
	done
	
	for folder in man1 man2 man3 man4 man5 man6 man7 man8
	do
		sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} -- mkdir -m 0775 -p "$LFS_DEPENDENCY_INSTALL_PATH"/usr/share/man/"$folder" "$LFS_DEPENDENCY_INSTALL_PATH"/usr/local/share/man/"$folder"
	done
	
	# ? should we be symlinking /var/lib? what about /var/lib/hwclock,misc, /var/spool/cron, /var/lib/locate
	for folder in account cache crash games lib local log mail opt spool tmp yp
	do
		ln -s /var/"$folder" "$LFS_DEPENDENCY_INSTALL_PATH"/var/"$folder"
	done
	
	for folder in man doc info
	do
		ln -s share/"$folder" "$LFS_DEPENDENCY_INSTALL_PATH"/usr/"$folder"
		ln -s share/"$folder" "$LFS_DEPENDENCY_INSTALL_PATH"/usr/local/"$folder"
	done
	
	ln -s /proc/self/mounts "$LFS_DEPENDENCY_INSTALL_PATH"/etc/mtab
}

function installPackage()
{
	LFS_PHASE="$1"
	LFS_DEPENDENCY_KEY="$2"
	LFS_DEPENDENCY_NAME="${dependency_Name["$LFS_DEPENDENCY_KEY"]}"
	LFS_DEPENDENCY_VERSION="${dependency_Version["$LFS_DEPENDENCY_KEY"]}"
	LFS_DEPENDENCY_RECIPE_HASH="${dependency_RecipeHash["$LFS_DEPENDENCY_KEY"]}"
	LFS_DEPENDENCY_INCLUDE_HASH="${dependency_IncludeHash["$LFS_DEPENDENCY_KEY"]}"
	LFS_DEPENDENCY_SETTINGS_HASH="${dependency_SettingsHash["$LFS_DEPENDENCY_KEY"]}"
	
	LFS_DEPENDENCY_USER=lfs-"$LFS_DEPENDENCY_NAME"
	LFS_DEPENDENCY_GROUP="$LFS_DEPENDENCY_USER"
	LFS_DEPENDENCY_UID=${dependency_UidGid["$LFS_DEPENDENCY_KEY"]}
	LFS_DEPENDENCY_GID=$LFS_DEPENDENCY_UID
	
	LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX=${dependency_SourcePackageIndex["$LFS_DEPENDENCY_KEY"]}
	LFS_DEPENDENCY_PATCHES="${dependency_PatchIndices["$LFS_DEPENDENCY_KEY"]}"
	dependencyToPath
	LFS_DEPENDENCY_PATH="${dependency_Path["$LFS_DEPENDENCY_KEY"]}"
	if [ "$LFS_PHASE" = "system" ]; then
		LFS_DEPENDENCY_INSTALL_PATH="$LFS_DEPENDENCY_PATH"/install
		LFS_DEPENDENCY_SOURCE_PATH="$LFS_DEPENDENCY_PATH"/source
		LFS_DEPENDENCY_LOG_PATH="$LFS_DEPENDENCY_PATH"/log
	else
		LFS_DEPENDENCY_INSTALL_PATH="${LFS}${LFS_DEPENDENCY_PATH}"/install
		LFS_DEPENDENCY_SOURCE_PATH="${LFS}${LFS_DEPENDENCY_PATH}"/source
		LFS_DEPENDENCY_LOG_PATH="${LFS}${LFS_DEPENDENCY_PATH}"/log
	fi
	
	local -r LFS_DEPENDENCY_SKIP_INSTALL="${dependency_SkipInstall["$LFS_DEPENDENCY_KEY"]}"
	if [ "$LFS_DEPENDENCY_SKIP_INSTALL" = "1" ]; then
		return 0
	fi
	
	LFS_RECIPE_NAME="${sourcePackages_Name[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}"
	LFS_RECIPE_VERSION="${sourcePackages_Version[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}"
	LFS_RECIPE_COMPRESSION="${sourcePackages_Compression[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}"
	LFS_RECIPE_FILENAME="${sourcePackages_FileName[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}"
	LFS_RECIPE_EXTRACTED_TARBALL_FOLDER="${sourcePackages_ExtractedTarballFolder[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}"
	LFS_RECIPE_IS_TARBOMB="${sourcePackages_IsTarbomb[$LFS_DEPENDENCY_SOURCE_PACKAGE_INDEX]}"
	
	local -r installer_versioned=installPackage_${LFS_PHASE}_${LFS_DEPENDENCY_NAME}_${LFS_DEPENDENCY_VERSION}
	local -r installer_unversioned=installPackage_${LFS_PHASE}_${LFS_DEPENDENCY_NAME}
	
	local -r logPathPrefix="$LFS_DEPENDENCY_LOG_PATH"
	local -r installStdOutLogFile="$LFS_DEPENDENCY_LOG_PATH"/install.stdout.log
	local -r installStdErrLogFile="$LFS_DEPENDENCY_LOG_PATH"/install.stderr.log
	local -i exitCode
	
	progressMessage "Installing phase $LFS_PHASE dependency $LFS_DEPENDENCY_NAME version $LFS_DEPENDENCY_VERSION"
	
	# Use an override (versioned) installer, otherwise the default
	if type "$installer_versioned" &>/dev/null; then
		local -r installer="$installer_versioned"
	elif type "$installer_unversioned" &>/dev/null; then
		local -r installer="$installer_unversioned"
	else
		progressMessageFailed "No installer $installer_versioned or $installer_unversioned defined"
	fi
	
	installPerPackageFhs
	
	pushd "$LFS_DEPENDENCY_SOURCE_PATH" >/dev/null
		
		if [ ! -z "$LFS_RECIPE_EXTRACTED_TARBALL_FOLDER" ]; then
			tarExtract "$LFS_RECIPE_FILENAME" "$LFS_RECIPE_EXTRACTED_TARBALL_FOLDER" "$LFS_RECIPE_COMPRESSION" "$LFS_RECIPE_IS_TARBOMB"
			progressMessageUpdate "(tar extraction complete, logs in $LFS_DEPENDENCY_LOG_PATH/install.*.log)"
		fi
		
		if [ ! -z "$LFS_RECIPE_EXTRACTED_TARBALL_FOLDER" ]; then
			pushd "$LFS_RECIPE_EXTRACTED_TARBALL_FOLDER" >/dev/null
		fi
		
			INSTALLATION_FAILED_MESSAGE="$installer failed, logs in $LFS_DEPENDENCY_LOG_PATH/install.*.log"
			addNextTrapHandler installationFailedTrapHandler
				
				exec 6>&1 1>"$installStdOutLogFile"
				exec 7>&2 2>"$installStdErrLogFile"
					
					local -i index
					for index in $LFS_DEPENDENCY_PATCHES
					do
						echo "Applying patch ${patches_FileName[$index]}"
						if ! sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} patch -Np1 -i ../"${patches_FileName[$index]}"; then
							exit 100
						fi
					done
					
					executeFunctionUnderSudo $installer
					
				exec 1>&6 6>&-
				exec 2>&7 7>&-
				
			removeLastTrapHandler
		
		if [ ! -z "$LFS_RECIPE_EXTRACTED_TARBALL_FOLDER" ]; then
			popd >/dev/null
			rm -rf -- "$LFS_RECIPE_EXTRACTED_TARBALL_FOLDER"
		fi
		
	popd >/dev/null
	
	progressMessageSucceeded
}

function installPackages()
{
	local -r phase="$1"
	local key
	
	for dependencyKey in ${phase_InstallationOrder["${phase}"]}
	do
		installPackage "$phase" "$dependencyKey"
	done
}

function stripToolchainSymbolsAfterToolchain2()
{
	if [ "$stripToolchainSymbols" = "yes" ]; then
		set +e
		# Fails for /tools/lib/thread2.7.0/libthread2.7.0.so
		find /"$LFS_TOOLS"/lib -type f \( -name '*.a' -o -name '*.o' -o \( -name '*.so*' -a ! -name '*.py' \) \) -print0 | xargs --null file --print0 --separator ' ' | awk -v IRS=$'\0' -v ORS=$'\0' '$2 ~/ELF|current/ {print $1}' | xargs --null strip --verbose --strip-debug
		find /"$LFS_TOOLS"/{,s}bin -type f -executable -print0 | xargs --null file --print0 --separator ' ' | awk -v IRS=$'\0' -v ORS=$'\0' '$2 ~/ELF/ {print $1}' | xargs --null strip --verbose --strip-unneeded
		set -e
	fi
}

function backUpToolchain()
{
	if which rsync 1>/dev/null 2>/dev/null; then
		progressMessage "Backing up toolchain using rsync to $toolsBackUpPath"
		mkdir -m 0755 -p "$toolsBackUpPath"
		if rsync --verbose --archive --hard-links --acls --xattrs --delete-after --force --numeric-ids --fake-super --link-dest="$toolsBackUpPath" "$LFS_TOOLS_PATH"/ "$toolsBackUpPath"/ 1>"$lfsLogPath"/toolchain.backup.stdout.log 2>"$lfsLogPath"/toolchain.backup.stderr.log; then
			progressMessageSucceeded
		else
			progressMessageFailed "check logs in $lfsLogPath/toolchain.backup.*.log"
		fi
	fi
	
	progressMessage "Tarballing up toolchain using tar/gz to $toolsBackUpPath.tar.gz"
	tar --create --owner=root --group=root --sparse --posix --directory "$LFS" "$LFS_TOOLS" | gzip -9 >"$toolsBackUpPath".tar.gz
	progressMessageSucceeded
}

function createToolchain()
{
	progressMessage "Initiating creation of toolchain ($LFS_TOOLS)"
		chattr -R -f -aiD "$LFS" 1>/dev/null 2>/dev/null || true
		rm -rf -- "$LFS_TOOLS_PATH"
		mkdir -m 0755 -p "$LFS_TOOLS_PATH"
		export PATH=/"$LFS_TOOLS"/bin:/bin:/usr/bin
	progressMessageSucceeded
	
	installPackages crosscompiler
	installPackages toolchain2
	
	progressMessage "Stripping toolchain symbols ($stripToolchainSymbols)"
	stripToolchainSymbolsAfterToolchain2 1>"$"$lfsLogPath""/toolchain2_strip-symbols.stdout.log 2>/toolchain2_strip-symbols.stderr.log
	progressMessageSucceeded
	
	backUpToolchain
}

function cleanUpTarget()
{
	if [ ! -d "$LFS" ]; then
		return 0
	fi
	
	progressMessage "Cleaning up target $LFS"
	
		chattr -R -f -aiD "$LFS" 1>"$lfsLogPath"/system_chattr-cleanup.stdout.log 2>"$lfsLogPath"/system_chattr-cleanup.stderr.log || true
		
		pushd "$LFS" >/dev/null
		
			local file
			for file in *
			do
				case "$file" in
					
					dev|proc|sys|sources|$LFS_TOOLS|$LFS_TOOLS.backup|$LFS_TOOLS.backup.*)
						:
					;;
				
					*)
						if ! rm -rf -- "$file"; then
							progressMessageFailed "could not remove $file"
						fi
					;;
				
				esac
			done
			
			if [ -d dev ]; then
				
				pushd dev >/dev/null
				
					for file in *
					do
						if [ ! -f "$file" ]; then
							if ! rm -rf -- "$file"; then
								progressMessageFailed "could not remove dev/$file"
							fi
						fi
					done
					
				popd >/dev/null
				
			fi
			
			if [ -d sources ]; then
				
				pushd sources >/dev/null
				
					for file in *
					do
						if [ ! -f "$file" ]; then
							if ! rm -rf -- "$file"; then
								progressMessageFailed "could not remove sources/$file"
							fi
						fi
					done
					
				popd >/dev/null
				
			fi
			
		popd >/dev/null
		
	progressMessageSucceeded
}

function createOrUseBackUpToolchain()
{
	if [ "$skipToolchainIfBackupExists" = "yes" ]; then
		if [ -d "$toolsBackUpPath" ] && which rsync 1>/dev/null 2>/dev/null; then
			cleanUpTarget
			progressMessage "Restoring toolchain using rsync ($LFS_TOOLS)"
				mkdir -m 0755 -p "$LFS_TOOLS_PATH"
				
				if ! rsync --verbose --archive --hard-links --acls --xattrs --delete-after --force --numeric-ids --fake-super --link-dest="$LFS_TOOLS_PATH" "$toolsBackUpPath"/ "$LFS_TOOLS_PATH"/ 1>"$lfsLogPath"/toolchain.restore.stdout.log 2>"$lfsLogPath"/toolchain.restore.stderr.log; then
					progressMessageFailed "check logs in $lfsLogPath/toolchain.restore.*.log"
				fi
				changeOwnerOfToolchain
			progressMessageSucceeded
			
		elif [ -f "$toolsBackUpPath".tar.gz ]; then
			cleanUpTarget
			progressMessage "Restoring toolchain using tarball ($LFS_TOOLS)"
				rm -rf -- "$LFS_TOOLS_PATH"
				
				pushd "$LFS"/.. >/dev/null
					if ! tar --extract --gzip --file "$toolsBackUpPath".tar.gz 1>"$lfsLogPath"/toolchain.restore.stdout.log 2>"$lfsLogPath"/toolchain.restore.stderr.log; then
						progressMessageFailed "check logs in $lfsLogPath/toolchain.restore.*.log"
					fi
				popd >/dev/null
				changeOwnerOfToolchain
			progressMessageSucceeded
		else
			createToolchain
		fi
	else
		createToolchain
	fi
}

function runSystemInstallationLogic()
{
	local -r callback="$1"
	
	local -r stdoutLog="$lfsLogPath"/system_"$callback".stdout.log
	local -r stderrLog="$lfsLogPath"/system_"$callback".stderr.log
	
	progressMessage "Phase system, executing $callback on target"
		
		INSTALLATION_FAILED_MESSAGE="logs in $phase/$callback.*.log"
		addNextTrapHandler installationFailedTrapHandler
			
			exec 6>&1 1>"$stdoutLog"
			exec 7>&2 2>"$stderrLog"
				
				set -x
				# FORCE_UNSAFE_CONFIGURE=1 allows configure to run as root
				FORCE_UNSAFE_CONFIGURE=1 $callback
				set +x
				
			exec 1>&6 6>&-
			exec 2>&7 7>&-
			
		removeLastTrapHandler
		
	progressMessageSucceeded
}

function renderEarlyPathCommands()
{
	local -i index
	for (( index=0; index != ${#earlyPathCommands[@]}; index++ ))
	do
		eval ${earlyPathCommands[$index]}
	done
}

function renderLatePathCommands()
{
	# reverse order because of the append and immutable commands
	local -i index
	for (( index=${#latePathCommands[@]}-1; index != -1; index-- ))
	do
		eval ${latePathCommands[$index]}
	done
}

function sourceFunctions()
{
	local fileToSource
	pushd "$functionsPath" >/dev/null
		
		for fileToSource in *.functions
		do
			source "$fileToSource"
		done
		
	popd >/dev/null
}

function main()
{
	setDebugging
	findOurNameAndPath
	ensureWhichInstalled
	parseCommandLine "$@"
	
	setPathsAndExports
	sourceFunctions
	
	addNextTrapHandler removeFilesOnExit
	
	verifyHostSystemRequirements
	
	include_mirrors
	
	include_profiles
		
	# Suspended for now, as we are using --cacert instead of --capath
	#rehashCertificateAuthorities
	
	createSkeletonFolderStructure
	downloadCertificateAuthorities
	downloadSignatures
	downloadKeyrings
	downloadKeys
	downloadSources
	downloadPatches
	
	installEssentialFolderStructure
	createOrUseBackUpToolchain
	
	runSystemInstallationLogic renderEarlyPathCommands
	chrootToEnvironment
	runSystemInstallationLogic renderLatePathCommands
	
	removeFilesOnExit
}

main "$@"
