#!/bin/bash -
set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi +o xtrace;unset BASH_ENV;unset BASH_XTRACEFD;unset CDPATH;unset ENV;unset FCEDIT;unset FIGNORE;unset FUNCNEST;unset GLOBIGNORE;unset HISTCONTROL;unset HISTFILE;unset HISTFILESIZE;unset HISTIGNORE;unset HISTSIZE;unset HISTTIMEFORMAT;unset HOSTFILE;unset IGNOREEOF;unset INPUTRC;unset MAIL;unset MAILCHECK;unset MAILPATH;unset TMOUT;umask 022

function declare_for_chroot()
{
	if [ $# -eq 1 ]; then
		# Done this way to avoid a Core Dump!
		local -r variable="$1"
		eval $variable=
	else
		local -r flags="$1"
		local -r variable="$2"
		declare ${flags}g $variable
	fi
	
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=($variable)
}

function redeclare_array_for_chroot()
{
	local -r variable="$1"
	declare -a $variable
	LFS_ARRAY_VARIABLES_TO_REDECLARE_IN_CHROOT+=($variable)
}

declare_for_chroot -a LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT
declare_for_chroot INSTALLATION_FAILED_MESSAGE

declare_for_chroot -a LFS_ARRAY_VARIABLES_TO_REDECLARE_IN_CHROOT
redeclare_array_for_chroot trapHandlers
redeclare_array_for_chroot filesToRemoveOnExit

# Defensive
declare_for_chroot FUNCNEST
FUNCNEST=40

function ensureWhichInstalled()
{
	set +e
	which
	local -ir exitCode=$?
	set -e
	if [ $exitCode = 127 ]; then
		exitError "Program which does not exist on path $PATH"
	fi
}

function essentialProgramCheck()
{
	# This nasty hack exists because source'd files override the set -xxxx options!
	set -e
	
	local program
	for program in "$@"
	do
		if ! which "$program" 1>/dev/null 2>/dev/null; then
			warning "Program $program does not exist on path $PATH"
			return 100
		fi
	done
}

# The purpose of these functions is to provide internal implementations of logic we can't be 100%
# sure of exists in the environment or is implemented as we would like for critical pieces of code.
# Such a critical piece is code executed before and during command line arg parsing (eg exitError)
# They will usually be MUCH slower than their external equivalents
function purebash_dirname()
{
	local -r converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		echo "."
	else
		echo "$converted"
	fi
}

function purebash_basename()
{
	echo "${1##*/}"
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exit 1
}

function warning()
{
	if [ $# -ne 1 ]; then
		exitError "Incorrect arguments"
	fi
	
	echo "$ourName: WARNING: $1" 1>&2
}

function setDebugging()
{
	# is set -x on?
	if [[ "$-" == *x* ]]; then
		export LFS_BASH_DEBUGGING="yes"
		LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_BASH_DEBUGGING')
	elif [ ! -z "$LFS_BASH_DEBUGGING" ]; then
		if [ "$LFS_BASH_DEBUGGING" = "yes" ]; then
			set -x
		fi
		LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_BASH_DEBUGGING')
	fi
}

function findOurNameAndPath()
{
	readonly ourName="$(purebash_basename "$0")"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('ourName')
	pushd "$(purebash_dirname "$0")" >/dev/null
	readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function executeWithCleanEnvironment()
{
	essentialProgramCheck env sudo
	exec env -i HOME="$HOME" TERM="$TERM" LFS_BASH_DEBUGGING="$LFS_BASH_DEBUGGING" LFS_CLEAN_ENVIRONMENT='yes' sudo -E -p "Password required to run as root: " -- "$crudeOurPath"/"$ourName" $@
}

function exitHelp()
{
	echo -n -E "Usage: ${ourName} -h
Usage: ${ourName} [-d distribution] [-l lfsPath] [-c lfsConfigPath] [-m mirrors] [-o option] -- machine

Defaults
    distribution       ${LFS_DISTRIBUTION_VERSION}
    lfsPath            ${lfsPath}
    lfsConfigPath      ${lfsConfigPath}
    mirrors            ${mirrors}
    option             See below

A machine defines machine settings in <lfsConfigPath>/settings/machine/<machine>.settings

A mirror defines mirror URLs. If a mirror is 'timezone', then timezone settings used to determine the actual mirrors.
If Etc/UTC or something similar is the timezone, then the 'language' mirrors are used. These use the LC_CTYPE,
LANG and LANGUAGE environment variables in order. The 'global' mirror can be specified to override this. A list of mirrors
is in <lfsConfigPath>/mirrors . Conversions from timezone and language are controlled using <lfsConfigPath>/timezones-to-mirrors.map
and <lfsConfigPath>/languages-to-mirrors.map respectively. Note that some mirrors, eg for the UK, are incomplete and source
the global mirrors first to provide defaults. mirrors may be symlinks.

At this time we don't support the metalink (.meta4) protocol for mirrors (as it requires additional
runtime dependencies).

Options
For options, prefix with either 'yes-' to turn it on
or 'no-' to turn it off. For example, to turn on 'skip-signature-checks' :-

    ${ourName} -o yes-skip-signature-checks

-o may be repeated as necessary. Options are evaluated in left-to-right order.
Last setting wins.

Options are as follows:-   Default
    skip-signature-checks  ${skipSignatureChecks}
    parallel-make          ${parallelMake}
" 1>&2
	exit $1
}

function parseCommandLine()
{
	# Defaults
	LFS_DISTRIBUTION_VERSION="7.4"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('LFS_DISTRIBUTION_VERSION')
	
	lfsPath="/var/tmp/lfs"
	
	lfsConfigPath="${crudeOurPath}/config"
	
	mirrors="timezone"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('mirrors')
	
	skipSignatureChecks="no"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('skipSignatureChecks')
	
	parallelMake="yes"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('parallelMake')
	
	machine="simple"
	LFS_GLOBAL_VARIABLES_TO_EXPORT_TO_CHROOT+=('machine')
	
	if [ "$LFS_CLEAN_ENVIRONMENT" != "yes" ]; then
		executeWithCleanEnvironment "$@"
	else
		local OPTERR=1
		local OPTIND=1
		local OPTARG
		local option
		while getopts :hl:d:m:1:2:o: option
		do
			case "$option" in
				
				h)
					exitHelp 2
				;;
				
				d)
					LFS_DISTRIBUTION_VERSION="$OPTARG"
				;;
				
				l)
					lfsPath="$OPTARG"
				;;
				
				c)
					lfsConfigPath="$OPTARG"
				;;
				
				m)
					mirrors="$OPTARG"
				;;
				
				o)
					if [ -z "$OPTARG" ]; then
						exitError "Invalid option -o requires an argument"
					fi
				
					case "$OPTARG" in
						
						no-skip-signature-checks)
							skipSignatureChecks="no"
						;;
						
						yes-skip-signature-checks)
							skipSignatureChecks="yes"
						;;
						
						no-parallel-make)
							parallelMake="no"
						;;
						
						yes-parallel-make)
							parallelMake="yes"
						;;
						
						*)
							exitError "Invalid option -o ${OPTARG}"
						;;
						
					esac
				;;
				
				'?')
					exitError "Invalid option -${OPTARG}"
				;;
				
			esac
		done
		
		shift $((OPTIND - 1))
		if [ $# -eq 1 ]; then
			machine="$1"
		else
			exitError "Please specify one machine"
		fi
		
		if [ -z "$LFS_DISTRIBUTION_VERSION" ]; then
			exitError "Please specify a distribution using -d"
		fi
	fi
}

function setPaths()
{
	essentialProgramCheck mkdir awk
	
	if [ ! -d "$lfsConfigPath" ]; then
		exitError "Config path $lfsConfigPath does not exist or is not a directory"
	fi
	pushd "$lfsConfigPath">/dev/null
	lfsConfigPath="$(pwd)"
	popd >/dev/null
	
	readonly distributionConfigPath="$lfsConfigPath"/"$LFS_DISTRIBUTION_VERSION"
	if [ ! -d "$distributionConfigPath" ]; then
		exitError "distribution config path $distributionConfigPath does not exist or is not a directory"
	fi
	
	readonly certificateAuthoritiesPath="$distributionConfigPath"/certificate-authorities
	if [ ! -d "$certificateAuthoritiesPath" ]; then
		exitError "certificate-authorities path $certificateAuthoritiesPath does not exist or is not a directory"
	fi
	
	readonly mirrorsPath="$distributionConfigPath"/mirrors
	if [ ! -d "$mirrorsPath" ]; then
		exitError "Mirrors path $mirrorsPath does not exist or is not a directory"
	fi
	
	readonly gpghomePath="$distributionConfigPath"/gpghome
	if [ ! -d "$gpghomePath" ]; then
		exitError "gpghome path $gpghomePath does not exist or is not a directory"
	fi
	
	readonly keyringsPath="$distributionConfigPath"/keyrings
	if [ ! -d "$keyringsPath" ]; then
		exitError "Keyrings path $keyringsPath does not exist or is not a directory"
	fi
	
	readonly keysPath="$distributionConfigPath"/keys
	if [ ! -d "$keysPath" ]; then
		exitError "Keys path $keysPath does not exist or is not a directory"
	fi
	
	readonly signaturesPath="$distributionConfigPath"/signatures
	if [ ! -d "$signaturesPath" ]; then
		exitError "Signatures path $signaturesPath does not exist or is not a directory"
	fi
	
	readonly recipesPath="$distributionConfigPath"/recipes
	if [ ! -d "$recipesPath" ]; then
		exitError "Recipes path $recipesPath does not exist or is not a directory"
	fi
	
	readonly recipesPackageUidFile="$recipesPath"/package-uid
	if [ ! -f "$recipesPackageUidFile" ]; then
		exitError "package-uid file $recipesPackageUidFile does not exist or is not a file"
	fi
	
	readonly includesPath="$distributionConfigPath"/includes
	if [ ! -d "$includesPath" ]; then
		exitError "includes path $includesPath does not exist or is not a directory"
	fi
	
	readonly functionsPath="$distributionConfigPath"/functions
	if [ ! -d "$includesPath" ]; then
		exitError "functions path $functionsPath does not exist or is not a directory"
	fi
	
	readonly settingsPath="$distributionConfigPath"/settings
	if [ ! -d "$settingsPath" ]; then
		exitError "settings path $settingsPath does not exist or is not a directory"
	fi
	
	readonly machinesPath="$settingsPath"/machines
	if [ ! -d "$machinesPath" ]; then
		exitError "machines path $machinesPath does not exist or is not a directory"
	fi
	
	if [ ! -d "$lfsPath" ]; then
		mkdir -m 0755 -p "$lfsPath"
	fi
	pushd "$lfsPath">/dev/null
	lfsPath="$(pwd)"
	popd >/dev/null
	
	readonly lfsLogPath=/var/log/lfs/"$LFS_DISTRIBUTION_VERSION"
	readonly lfsDownloadsPath="$lfsPath"/downloads
	readonly lfsExtractsPath="$lfsPath"/extracts
	
	LFS="$lfsPath"/"$LFS_DISTRIBUTION_VERSION"
}

function createSkeletonFolderStructure()
{
	mkdir -m 0755 -p "$LFS"
	
	# Logs
	mkdir -m 0755 -p "$lfsLogPath"
	rm -rf "$lfsLogPath"/*
	
	readonly downloadsLogsPath="$lfsLogPath"/downloads
	mkdir -m 0755 -p "$downloadsLogsPath"
}

function installPackageSkip()
{
	:
}

function extractPackageSources()
{
	setDependencyPathValues
	
	if [ -f "$LFS_DEPENDENCY_FINISHED_PATH" ]; then
		return 0
	fi

	pushd "$LFS_DEPENDENCY_SOURCE_PATH" >/dev/null
		
		local -i index
		count=0
		for index in ${dependency_SourcePackageIndices["$LFS_DEPENDENCY_KEY"]}
		do
			setLfsSourcePackageVariables $index
	
			if [ -z "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" ]; then
				if [ ! -L "$LFS_SOURCE_PACKAGE_NAME" ]; then
					ln -s "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_SOURCE_PACKAGE_NAME" 2>/dev/null || true
				fi
				if [ $count -eq 0 ]; then
					if [ ! -L "$LFS_DEPENDENCY_NAME" ]; then
						ln -s "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_DEPENDENCY_NAME" 2>/dev/null || true
					fi
				fi
			else
				if [ -d "$lfsExtractsPath"/"$LFS_SOURCE_PACKAGE_MIRROR"/"$LFS_SOURCE_PACKAGE_RELATIVE_PATH".decompressed ]; then
					( tarExtract "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "" "$LFS_SOURCE_PACKAGE_IS_TARBOMB" ) &
				else
					( tarExtract "$LFS_SOURCE_PACKAGE_FILENAME" "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$LFS_SOURCE_PACKAGE_COMPRESSION" "$LFS_SOURCE_PACKAGE_IS_TARBOMB" ) &
				fi
				
				if [ ! -L "$LFS_SOURCE_PACKAGE_NAME" ]; then
					ln -s "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$LFS_SOURCE_PACKAGE_NAME" 2>/dev/null || true
				fi
				
				if [ $count -eq 0 ]; then
					if [ ! -L "$LFS_DEPENDENCY_NAME" ]; then
						ln -s "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" "$LFS_DEPENDENCY_NAME" 2>/dev/null || true
					fi
				fi
			fi
			
			let count=count+1
		done
		
	popd >/dev/null
}

function patchPackageSources()
{
	setDependencyPathValues
	
	if [ -f "$LFS_DEPENDENCY_FINISHED_PATH" ]; then
		return 0
	fi
	
	SECONDS=0
	informationMessage "TASK: Patching phase $LFS_PHASE dependency $LFS_DEPENDENCY_NAME version $LFS_DEPENDENCY_VERSION"
	
	pushd "$LFS_DEPENDENCY_SOURCE_PATH" >/dev/null
		
		INSTALLATION_FAILED_MESSAGE="FAIL: Installing phase $LFS_PHASE dependency $LFS_DEPENDENCY_NAME version $LFS_DEPENDENCY_VERSION (logs in $LFS_DEPENDENCY_LOG_PATH/err and out)"
		addInstallationFailedTrapHandler
		
			exec 6>&1 1>"$LFS_DEPENDENCY_LOG_OUT"
			exec 7>&2 2>"$LFS_DEPENDENCY_LOG_ERR"
				
				local patchSourcePackageName
				local patchSourcePackageVersion
				local pathCorrection
				for index in $LFS_DEPENDENCY_PATCHES
				do
					setLfsSourcePackageVariables ${patches_SourcePackageIndex[$index]}

					if [ ! -z "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" ]; then
						pushd "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" >/dev/null
						pathCorrection=".."
					else
						pathCorrection="."
					fi
					
					echo "Applying patch ${patches_FileName[$index]}"
					if ! sudo -u \#${LFS_DEPENDENCY_UID} -g \#${LFS_DEPENDENCY_GID} patch -Np1 -i "$pathCorrection"/"${patches_FileName[$index]}"; then
						exit 100
					fi
				
					if [ ! -z "$LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER" ]; then
						popd >/dev/null
					fi
				done
				
			exec 1>&6 6>&-
			exec 2>&7 7>&-
			
		removeLastTrapHandler
		
	popd >/dev/null
	
	informationMessage "PASS: Patching phase $LFS_PHASE dependency $LFS_DEPENDENCY_NAME version $LFS_DEPENDENCY_VERSION ($SECONDS seconds)"
}

function removeAnyFailedPackagesFromPreviousRuns()
{
	local optPath="$LFS"/opt/lfs/"$LFS_DISTRIBUTION_VERSION"
	local phaseFolder
	local dependencyName
	local dependencyVersion
	local dependencyHashes
	
	if [ ! -d "$optPath" ]; then
		return 0
	fi
	
	pushd "$optPath" >/dev/null
		for phaseFolder in *
		do
			if [ ! -e "$phaseFolder" ]; then
				continue
			fi
			
			if [ ! -d "$phaseFolder" ]; then
				continue
			fi
			
			pushd "$phaseFolder" >/dev/null
				for dependencyName in *
				do
					if [ ! -e "$dependencyName" ]; then
						continue
					fi
		
					if [ ! -d "$dependencyName" ]; then
						continue
					fi
					
					pushd "$dependencyName" >/dev/null
						for dependencyVersion in *
						do
							if [ ! -e "$dependencyVersion" ]; then
								continue
							fi
							
							if [ "$dependencyVersion" = "current" ]; then
								if [ ! -e "$(readlink current)" ]; then
									rm -f current
									continue
								fi
							fi
		
							if [ ! -d "$dependencyVersion" ]; then
								continue
							fi
					
							pushd "$dependencyVersion" >/dev/null
								for dependencyHashes in *
								do
									if [ ! -e "$dependencyHashes" ]; then
										continue
									fi
		
									if [ ! -d "$dependencyHashes" ]; then
										continue
									fi
									
									if [ -f "$dependencyHashes"/finished ]; then
										continue
									fi
									
									chattr -R -ai "$dependencyHashes" 2>/dev/null || true
									rm -rf "$dependencyHashes"
									if [ -L current ]; then
										if [ ! -e "$(readlink current)" ]; then
											rm -f current
										fi
									fi
									if [ -L recipe-settings-dependencies ]; then
										if [ ! -e "$(readlink recipe-settings-dependencies)" ]; then
											rm -f recipe-settings-dependencies
										fi
									fi
									
								done
							popd  >/dev/null
							
							if [ "$dependencyVersion" = "current" ]; then
								if [ ! -e "$(readlink current)" ]; then
									rm -f current
									continue
								fi
							fi
							
						done
					popd  >/dev/null
					
				done
			popd  >/dev/null
			
		done
	popd  >/dev/null
	
	find "$optPath" -depth -mindepth 1 -maxdepth 4 -type d -empty -delete
}

function loopOverDependenciesInAllPhasesAsynchronously()
{
	local -r callback="$1"
	
	for LFS_PHASE in crosscompiler toolchain2 system
	do
		for LFS_DEPENDENCY_KEY in ${phase_InstallationOrder["${LFS_PHASE}"]}
		do
			setCommonLfsDependencyVariables

			( $callback ) &
		done
	done
	
	wait
}

function loopOverDependenciesInPhase()
{
	local -r callback="$1"
	
	for LFS_DEPENDENCY_KEY in ${phase_InstallationOrder["${LFS_PHASE}"]}
	do
		setCommonLfsDependencyVariables

		$callback
	done
}

function calculateDependencyPaths()
{
	# Can not be asynchronous as sets variables
	for LFS_PHASE in crosscompiler toolchain2 system
	do
		loopOverDependenciesInPhase dependencyToPath
	done
}

function extractAndPatchAllPackageSources()
{
	SECONDS=0
	informationMessage "TASK: Extracting packages"
	for LFS_PHASE in crosscompiler toolchain2 system
	do
		loopOverDependenciesInPhase extractPackageSources
	done
	wait
	informationMessage "PASS: Extracting packages ($SECONDS seconds)"
	
	loopOverDependenciesInAllPhasesAsynchronously patchPackageSources
}

function writeToMakeFile()
{
	setDependencyPathValues
	
	local makeDependencies=""
	for dependency in ${dependency_Dependencies["$LFS_DEPENDENCY_KEY"]}
	do
		if  [ -z "$makeDependencies" ]; then
			makeDependencies="$dependency"
		else
			makeDependencies="$makeDependencies $dependency"
		fi
	done
	
	if [ -f "$LFS_DEPENDENCY_FINISHED_PATH" ]; then
		linkBinariesToPath
		linkSystemBinariesToPath

		echo "$LFS_DEPENDENCY_KEY: $makeDependencies" >>"$makeFile"
		printf '\t%s\n' "@echo $ourName: TASK: Skipping $LFS_DEPENDENCY_NAME" >>"$makeFile"
		printf '\t%s\n\n' "@echo $ourName: PASS: Skipping $LFS_DEPENDENCY_NAME" >>"$makeFile"
		return 0
	fi
	
	createInstallScriptForMakefile
	echo "$LFS_DEPENDENCY_KEY: $makeDependencies" >>"$makeFile"
	printf '\t@%s\n\n' "$LFS_DEPENDENCY_SCRIPT_PATH" >>"$makeFile"
}

function installPackages()
{
	LFS_PHASE="$1"

	prepareMuslCrossPath
	
	temporaryFileToRemoveOnExit
	local -r makeFile="$TMP_FILE"
	
	cat >>"$makeFile" <<-EOF
		.PHONY: all ${phase_InstallationOrder["${LFS_PHASE}"]}
		
		all: ${phase_InstallationOrder["${LFS_PHASE}"]}
		
	EOF
	
	loopOverDependenciesInPhase writeToMakeFile
	
	SECONDS=0
	informationMessage "TASK: Phase $LFS_PHASE"
	cp $makeFile /tmp/Makefile
		if ! make -j $LFS_MAKE_JOBS -k -r -R -f "$makeFile" all 2>/dev/null; then
			informationMessage "FAIL: Phase $LFS_PHASE"
			exit 1
		fi
		
	informationMessage "PASS: Phase $LFS_PHASE ($SECONDS seconds)"
}

function sourceFunctions()
{
	local fileToSource
	pushd "$functionsPath" >/dev/null
		
		for fileToSource in *.functions
		do
			source "$fileToSource"
		done
		
	popd >/dev/null
}

function main()
{
	setDebugging
	findOurNameAndPath
	ensureWhichInstalled
	parseCommandLine "$@"
	setPaths
	sourceFunctions
	
	setLocale
	setMakeFlags
	
	initialiseTraps
	
	verifyHostSystemRequirementsUsingDependencyChecks
	
	doInclude
	
	# Suspended for now, as we are using --cacert instead of --capath
	#rehashCertificateAuthorities
	
	createSkeletonFolderStructure
	
	doDownloads
	
	removeAnyFailedPackagesFromPreviousRuns
	
	calculateDependencyPaths
	
	LFS_PHASE="system" prepareZzzLfsPath
	
	installEssentialFolderStructure

	declare_for_chroot LFS_PATH_ORIGINAL
	LFS_PATH_ORIGINAL="$PATH"
	
	extractAndPatchAllPackageSources
	
	export PATH="${LFS}${LFS_DEPENDENCY_PATH_ZZZ}"/sbinpath:"${LFS}${LFS_DEPENDENCY_PATH_ZZZ}"/binpath:"$LFS_PATH_ORIGINAL"
	installPackages crosscompiler
	installPackages toolchain2
}

main "$@"
