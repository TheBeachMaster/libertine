main_functions=()

function main_registerTrapHandlers()
{
	trapHandlers_addNext temporaryFiles_removeAll
}
main_functions+=(main_registerTrapHandlers)

function main_makeAllFunctionsReadonly()
{
	local unwanted1 unwanted2 functionName
	while IFS=' ' read -r unwanted1 unwanted2 functionName
	do
		readonly -f $functionName
	done < <(declare -F)
	readonly main_functions
}
main_functions+=(main_makeAllFunctionsReadonly)

function main_makeGlobalVariablesReadonly()
{
	readonly -a main_functions
}
main_functions+=(main_makeGlobalVariablesReadonly)

function main_loadDefaults()
{
	local defaultsFile="$lfs_configPath"/defaults
	if [ -r "$defaultsFile" ]; then
		source "$defaultsFile"
	fi
	
	local -r defaultsFolder="$lfs_configPath"/defaults.d
	if [ -d "$defaultsFolder" ]; then
		pushd "$defaultsFolder" 1>/dev/null 2>/dev/null
			
			for defaultsFile in *.defaults
			do
				if [ -f "$defaultsFile" ]; then
					source "$defaultsFile"
				fi
			done
			
		popd 1>/dev/null 2>/dev/null
	fi
}
main_functions+=(main_loadDefaults)

function main_validateDefault()
{
	local -r variableName="$1"
	
	if [ -z "${!variableName}" ]; then
		lfs_message FAIL "Default $variableName has no value"
	fi
}

function main_validateDefaults()
{
	#main_validateDefault defaults_api_version
	:
}
main_functions+=(main_validateDefaults)

main_functions+=(dependency_installDependencies)

function main_setDistributionsPath()
{
	distributionsFolder="$lfs_configPath"/distributions.d
	if [ ! -d "$distributionsFolder" ]; then
		lfs_exitError "distributions folder $distributionsFolder does not exist or is not a directory"
	fi
}
main_functions+=(main_setDistributionsPath)

main_cachePath=""
main_downloadsCachePath=""
function main_makeCachePaths()
{
	main_cachePath="$lfs_cachePath"/machines
	mkdir -m 0755 -p "$main_cachePath"

	main_downloadsCachePath="$lfs_cachePath"/downloads
	mkdir -m 0755 -p "$main_downloadsCachePath"
}
main_functions+=(main_makeCachePaths)

readonly tab=$'\t'
function main_machineFunctions()
{
	local lfs_machineFilePath
	for lfs_machineFilePath in "${lfs_machineFilePaths[@]}"
	do
		(
			declare -A api_package_version_settings
			declare -A api_recipes_uidgid
			declare -A api_settings
			declare -A api_mirrors_Url
			declare -A api_mirrors_PartialsSupported
			declare -A api_mirrors_certificateAuthorityName
			declare -A api_certificateAuthorities_download
			declare -A api_certificateAuthorities_parent
			declare -A api_certificateAuthorities_cert_type
			
			local machine_function
			for machine_function in "${machine_functions[@]}"
			do
				lfs_message INFO "${tab}${machine_function}"
				${machine_function}
			done
		)
	done
}
main_functions+=(main_machineFunctions)

function main_executeMainFunctions()
{
	local main_function
	for main_function in "${main_functions[@]}"
	do
		lfs_message INFO "${main_function}"
		$main_function
	done
}
