function recipe_sourceRecipe()
{
	local -r parentFolder="$1"
	local -r recipeFileName="$2"
	
	local -r recipe_file="$parentFolder"/"$recipeFileName"
	local -r actualRecipeFile="$(readlink -f "$recipe_file")"
	
	if [ -n "${machine_alreadySourcedRecipes["$actualRecipeFile"]}" ]; then
		return 0
	fi
	
	machine_alreadySourcedRecipes["$actualRecipeFile"]=1
	
	local recipeName=""
	local recipeVersion=""
	local name=""
	local version=""
	declare -a api_recipe_dependsRecipeName=()
	declare -a api_recipe_dependsRecipeVersion=()
	
	declare -a api_download_kind=""
	declare -a api_download_index=-1
	declare -a api_downloads_name=()
	declare -a api_downloads_version=()
	declare -a api_downloads_kinds=()
	declare -a api_downloads_mirror=()
	declare -a api_downloads_path=()
	
	declare -a api_downloads_referrer=()
	declare -a api_downloads_post_data=()
	
	declare -a api_downloads_archive=()
	declare -a api_downloads_compression=()
	declare -a api_downloads_tarbomb=()
	declare -a api_downloads_archive_folder=()
	declare -a api_downloads_download_as=()
	
	# All the remaining values VALIDATE a download
	declare -a api_downloads_size=()
	declare -a api_downloads_md5=()
	declare -a api_downloads_sha1=()
	declare -a api_downloads_sha224=()
	declare -a api_downloads_sha256=()
	declare -a api_downloads_sha384=()
	declare -a api_downloads_sha512=()
	declare -a api_downloads_signed_as=()
	declare -a api_downloads_signed_id=()
	declare -a api_downloads_signed_signatureFile=()
	
	declare -a api_downloads_keyring=()
	declare -a api_downloads_keyfile=()
	declare -a api_downloads_hkp=()
	declare -a api_downloads_hkp_uncompressed=()
	
	source "$actualRecipeFile"
	
	local recipe_before_temporaryRecipePath
	local recipe_before_temporaryRecipeDependenciesPath
	local recipe_before_function
	for recipe_before_function in "${recipe_before_functions[@]}"
	do
		$recipe_before_function
	done
	
	local dependantRecipeName
	local dependantRecipeVersion
	local dependentRecipeFileName
	for index in "${!api_recipe_dependsRecipeName[@]}"
	do
		dependantRecipeName="${api_recipe_dependsRecipeName[$index]}"
		dependantRecipeVersion="${api_recipe_dependsRecipeVersion[$index]}"
		if [ -z "$dependantRecipeVersion" ]; then
			dependantRecipeFileName="${dependantRecipeName}.recipe"
		else
			dependantRecipeFileName="${dependantRecipeName}_${dependantRecipeVersion}.recipe"
		fi
		
		recipe_sourceRecipe "$distribution_recipesPath" "$dependantRecipeFileName"
	done
	
	local recipe_after_temporaryRecipeDependenciesPath
	local recipe_after_function
	for recipe_after_function in "${recipe_after_functions[@]}"
	do
		$recipe_after_function
	done
}
