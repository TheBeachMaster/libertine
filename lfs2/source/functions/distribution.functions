distribution_functions=()

distribution_namePath=""
distribution_nameVersionPath=""
distribution_distributionSettingsFilePath=""
distribution_certificateAuthoritiesPath=""
distribution_internalMirrorPath=""
distribution_mirrorsPath=""
distribution_recipesPath=""
distribution_snippetsPath=""
function distribution_checkDistributionPaths()
{
	distribution_namePath="$distributionsFolder"/"$machineDistributionName"
	if [ ! -d "$distribution_namePath" ]; then
		lfs_exitError "Distributions name path $distribution_namePath for machineDistributionName $machineDistributionName does not exist or is not a directory"
	fi
	
	distribution_nameVersionPath="$distribution_namePath"/"$machineDistributionVersion"
	if [ ! -d "$distribution_nameVersionPath" ]; then
		lfs_exitError "Distributions version path $distribution_nameVersionPath for machineDistributionVersion $machineDistributionVersion does not exist or is not a directory"
	fi
	
	distribution_distributionSettingsFilePath="$distribution_nameVersionPath"/distribution.settings
	if [ ! -dd"$distribution_distributionsMirrorsFolder" ]; then
		lfs_exitError "Distribution settings file path $distribution_distributionSettingsFilePath does not exist or is not a file"
	fi
	
	distribution_certificateAuthoritiesPath="$distribution_nameVersionPath"/certificate-authorities
	if [ ! -d "$distribution_certificateAuthoritiesPath" ]; then
		lfs_exitError "Distribution certificate-authorities path $distribution_certificateAuthoritiesPath does not exist or is not a directory"
	fi
	
	distribution_internalMirrorPath="$distribution_nameVersionPath"/internal-mirror
	if [ ! -d "$distribution_internalMirrorPath" ]; then
		lfs_exitError "Distribution internal-mirror path $distribution_internalMirrorPath does not exist or is not a directory"
	fi
	
	distribution_mirrorsPath="$distribution_nameVersionPath"/mirrors
	if [ ! -d "$distribution_mirrorsPath" ]; then
		lfs_exitError "Distribution mirrors path $distribution_mirrorsPath does not exist or is not a directory"
	fi
	
	distribution_recipesPath="$distribution_nameVersionPath"/recipes
	if [ ! -d "$distribution_recipesPath" ]; then
		lfs_exitError "Distribution recipes path $distribution_recipesPath does not exist or is not a directory"
	fi
	
	distribution_snippetsPath="$distribution_nameVersionPath"/snippets
	if [ ! -d "$distribution_snippetsPath" ]; then
		lfs_exitError "Distribution snippets path $distribution_snippetsPath does not exist or is not a directory"
	fi
}
distribution_functions+=(distribution_checkDistributionPaths)

function distribution_sourceDistributionSettingsFilePath()
{
	source "$distribution_distributionSettingsFilePath"
}
distribution_functions+=(distribution_sourceDistributionSettingsFilePath)

function distribution_sourceMirrors()
{
	# May be technically invalid as we are not URI escaping
	define_mirror INTERNAL "file://${distribution_internalMirrorPath}/" no
	
	pushd "$distribution_mirrorsPath" 1>/dev/null 2>/dev/null

		local mirrorFile
		for mirrorFile in *.mirror
		do
			if [ -f "$mirrorFile" ]; then
				source "$mirrorFile"
			fi
		done
		
		if [ -f "$lfs_mirror" ]; then
			pushd "$lfs_mirror" 1>/dev/null 2>/dev/null
				
				for mirrorFile in *.mirror
				do
					if [ -f "$mirrorFile" ]; then
						source "$mirrorFile"
					fi
				done
			
			popd 1>/dev/null 2>/dev/null
		else
			if [ "$lfs_mirror" != "global" ]; then
				lfs_message WARN "${tab}${tab}No such mirror override set $lfs_mirror in $distribution_mirrorsPath"
			fi
		fi
		
	popd 1>/dev/null 2>/dev/null
}
distribution_functions+=(distribution_sourceMirrors)

function distribution_sourceCertificateAuthorities()
{
	pushd "$distribution_certificateAuthoritiesPath" 1>/dev/null 2>/dev/null

		local certificateAuthorityFile
		for certificateAuthorityFile in *.certificate-authority
		do
			if [ -f "$certificateAuthorityFile" ]; then
				source "$certificateAuthorityFile"
			fi
		done
		
	popd 1>/dev/null 2>/dev/null
}
distribution_functions+=(distribution_sourceCertificateAuthorities)

function distribution_sourceKeyrings()
{
	pushd "$distribution_keyringsPath" 1>/dev/null 2>/dev/null

		local keyringFile
		for keyringFile in *.keyring
		do
			if [ -f "$keyringFile" ]; then
				source "$keyringFile"
			fi
		done
		
	popd 1>/dev/null 2>/dev/null
}
distribution_functions+=(distribution_sourceKeyrings)
