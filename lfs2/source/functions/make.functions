
# Declare before use:-
#   make_makeFile
#   make_downloadTargets
#   make_verifyTargets
#   make_buildTargets

function make_addDownloadTargets()
{
	make_downloadTargets+=("$@")
}

function make_addVerifyTargets()
{
	make_verifyTargets+=("$@")
}

function make_addBuildTargets()
{
	make_buildTargets+=("$@")
}

function make_start()
{
	cat >>"$make_makeFile" <<-EOF
		all: all-download all-download all-build
		
	EOF
}

function make_downloadTarget()
{
	local -r parentPath="$(vsh_dirname "$path")"
	
	if [ -n "$download_as" ]; then
		local -r fileName="$download_as"
	else
		local -r fileName="$(vsh_basename "$path")"
	fi
	
	local -r cacheParentPath="$distribution_cacheDownloadsPath"/"$parentPath"
	local -r downloadFilePath="$cacheParentPath"/"$fileName"
	
	if [ -z "$post_data" ]; then
		local -r verb=GET
	else
		local -r verb=POST
		local -r curl_post="$post_data"
	fi
	
	local -r resolvedMirror="${api_mirrors_Url["$mirror"]}"
	local -r url="${resolvedMirror}${path}"
	
	
	if [ -z "$referrer" ]; then
		# Misspelling is correct
		local -r referer="$(dirname "$url")/"
	else
		local -r referer="$referrer"
	fi
	
	declare -a curl_requestHeaders=()
	declare -a curl_args=()
	curl_addQuotedArg "$(hash -t curl)"
	curl_createCommandLine "$verb" "$url" "$referer" "$downloadFilePath" "$compression"
	
	local -r downloadTarget="download-${recipeName}_${recipeVersion}.${downloadIndex}"
	make_addDownloadTargets "$downloadTarget"
	{
		printf '%s:\n' "${downloadTarget}"
		printf '\t%s\n' "mkdir -m 0755 -p '${cacheParentPath}'"
		printf '\t%s\n' "${curl_args[@]}"
		printf '\n'
	} >>"$make_makeFile"
}

function make_finish()
{
	# TODO: Add a CA download section, so that we can use CAs...
	
	cat >>"$make_makeFile" <<-EOF
		all-download: ${make_downloadTargets[@]}
		
		all-verify: ${make_verifyTargets[@]}
		
		all-build: ${make_buildTargets[@]}
		
		.PHONY: all all-download all-build ${make_downloadTargets[@]} ${make_verifyTargets[@]} ${make_buildTargets[@]}
		
	EOF
}