#LFS_NATIVE_ARCHITECTURE
#LFS_NATIVE_TRIPLE
#LFS_FOREIGN_ARCHITECTURE
#LFS_FOREIGN_TRIPLE
#LFS_BUILD_ROOT_PATH_RECIPE

readonly LFS_DEPENDENCY_PATH_ROOT="$LFS_BUILD_ROOT_PATH_RECIPE"/root
readonly LFS_DEPENDENCY_PATH_BIN="$LFS_DEPENDENCY_PATH_ROOT"/bin
readonly LFS_DEPENDENCY_PATH_SBIN="$LFS_DEPENDENCY_PATH_ROOT"/sbin

readonly LFS_C_HOST_PREFIX="$LFS_NATIVE_TRIPLE"-
readonly LFS_C_HOST_CC="${LFS_C_HOST_PREFIX}gcc"
readonly LFS_C_HOST_CXX="${LFS_C_HOST_PREFIX}g++"
readonly LFS_C_HOST_CPP="$LFS_C_HOST_CC -E"
readonly LFS_C_HOST_CXXCPP="$LFS_C_HOST_CXX -E"
readonly LFS_C_HOST_LD="${LFS_C_HOST_PREFIX}ld"
readonly # Not sure if the final triple should be in or out (out for now)
readonly LFS_C_HOST_SYS_ROOT="$LFS_DEPENDENCY_INSTALL_PATH_MUSL_CROSS/$LFS_NATIVE_TRIPLE"
readonly LFS_C_HOST_LIB_ROOT="$LFS_DEPENDENCY_INSTALL_PATH_MUSL_CROSS/$LFS_NATIVE_TRIPLE/$LFS_NATIVE_TRIPLE"
readonly LFS_C_HOST_C_LIB_PATH="$LFS_C_HOST_LIB_ROOT/lib"
readonly LFS_C_HOST_DYNAMIC_LINKER_NAME="ld-musl-$LFS_NATIVE_ARCHITECTURE.so.1"
readonly LFS_C_HOST_DYNAMIC_LINKER="$LFS_C_HOST_C_LIB_PATH"/"$LFS_C_HOST_DYNAMIC_LINKER_NAME"
readonly LFS_C_HOST_CPPFLAGS="-D_FORTIFY_SOURCE=2 -isysroot $LFS_C_HOST_SYS_ROOT"
readonly LFS_C_HOST_SPECS="$LFS_C_HOST_CPPFLAGS --sysroot $LFS_C_HOST_SYS_ROOT -Wl,--sysroot=$LFS_C_HOST_SYS_ROOT -Wl,--dynamic-linker=$LFS_C_HOST_DYNAMIC_LINKER -Wl,-rpath=$LFS_C_HOST_C_LIB_PATH"
readonly LFS_C_HOST_CFLAGS="$LFS_C_HOST_SPECS $LFS_LDFLAGS_MUSL $LFS_CFLAGS_NATIVE_OPTIMISATION $LFS_CFLAGS_HARDENING $LFS_LDFLAGS_OPTIMISATION"
readonly LFS_C_HOST_CXXFLAGS="$LFS_C_HOST_CFLAGS"
readonly LFS_C_HOST_LDFLAGS=""
readonly #LFS_C_HOST_LIBS=""

readonly LFS_C_TARGET_INTERNAL_PREFIX="$LFS_FOREIGN_TRIPLE"-
readonly LFS_C_TARGET_INTERNAL_CC="${LFS_C_TARGET_INTERNAL_PREFIX}gcc"
readonly LFS_C_TARGET_INTERNAL_CXX="${LFS_C_TARGET_INTERNAL_PREFIX}g++"
readonly LFS_C_TARGET_INTERNAL_CPP="$LFS_C_TARGET_INTERNAL_CC -E"
readonly LFS_C_TARGET_INTERNAL_CXXCPP="$LFS_C_TARGET_INTERNAL_CXX -E"
readonly LFS_C_TARGET_INTERNAL_AR="${LFS_C_TARGET_INTERNAL_PREFIX}ar"
readonly LFS_C_TARGET_INTERNAL_AS="${LFS_C_TARGET_INTERNAL_PREFIX}as"
readonly LFS_C_TARGET_INTERNAL_NM="${LFS_C_TARGET_INTERNAL_PREFIX}nm"
readonly LFS_C_TARGET_INTERNAL_RANLIB="${LFS_C_TARGET_INTERNAL_PREFIX}ranlib"
readonly LFS_C_TARGET_INTERNAL_OBJDUMP="${LFS_C_TARGET_INTERNAL_PREFIX}objdump"
readonly LFS_C_TARGET_INTERNAL_OBJCOPY="${LFS_C_TARGET_INTERNAL_PREFIX}objcopy"
readonly LFS_C_TARGET_INTERNAL_LD="${LFS_C_TARGET_INTERNAL_PREFIX}ld"
readonly LFS_C_TARGET_INTERNAL_STRIP="${LFS_C_TARGET_INTERNAL_PREFIX}strip"
readonly LFS_C_TARGET_INTERNAL_SYS_ROOT="$LFS_DEPENDENCY_PREFIX_PATH_MUSL_CROSS/$LFS_FOREIGN_TRIPLE"
readonly LFS_C_TARGET_INTERNAL_LIB_ROOT="$LFS_DEPENDENCY_PREFIX_PATH_MUSL_CROSS/$LFS_FOREIGN_TRIPLE/$LFS_FOREIGN_TRIPLE"
readonly LFS_C_TARGET_INTERNAL_C_LIB_PATH="$LFS_C_TARGET_INTERNAL_LIB_ROOT/lib"
readonly LFS_C_TARGET_INTERNAL_DYNAMIC_LINKER_NAME="ld-musl-$LFS_FOREIGN_ARCHITECTURE.so.1"
readonly LFS_C_TARGET_INTERNAL_DYNAMIC_LINKER="$LFS_C_TARGET_INTERNAL_C_LIB_PATH"/"$LFS_C_TARGET_INTERNAL_DYNAMIC_LINKER_NAME"
readonly LFS_C_TARGET_INTERNAL_CPPFLAGS="-isysroot $LFS_C_TARGET_INTERNAL_SYS_ROOT -D_FORTIFY_SOURCE=2"
readonly LFS_C_TARGET_INTERNAL_SPECS="$LFS_C_TARGET_INTERNAL_CPPFLAGS --sysroot $LFS_C_TARGET_INTERNAL_SYS_ROOT -Wl,--sysroot=$LFS_C_TARGET_INTERNAL_SYS_ROOT -Wl,--dynamic-linker=$LFS_C_TARGET_INTERNAL_DYNAMIC_LINKER -Wl,-rpath=$LFS_C_TARGET_INTERNAL_C_LIB_PATH"
readonly LFS_C_TARGET_INTERNAL_CFLAGS="$LFS_C_TARGET_INTERNAL_SPECS $LFS_LDFLAGS_MUSL $LFS_CFLAGS_NATIVE_OPTIMISATION $LFS_CFLAGS_HARDENING $LFS_LDFLAGS_OPTIMISATION"
readonly LFS_C_TARGET_INTERNAL_CXXFLAGS="$LFS_C_TARGET_INTERNAL_CFLAGS"
readonly LFS_C_TARGET_INTERNAL_LDFLAGS=""

readonly LFS_C_TARGET_EXTERNAL_PREFIX="$LFS_FOREIGN_TRIPLE"-
readonly LFS_C_TARGET_EXTERNAL_CC="${LFS_C_TARGET_EXTERNAL_PREFIX}gcc"
readonly LFS_C_TARGET_EXTERNAL_CXX="${LFS_C_TARGET_EXTERNAL_PREFIX}g++"
readonly LFS_C_TARGET_EXTERNAL_CPP="$LFS_C_TARGET_EXTERNAL_CC -E"
readonly LFS_C_TARGET_EXTERNAL_CXXCPP="$LFS_C_TARGET_EXTERNAL_CXX -E"
readonly LFS_C_TARGET_EXTERNAL_AR="${LFS_C_TARGET_EXTERNAL_PREFIX}ar"
readonly LFS_C_TARGET_EXTERNAL_AS="${LFS_C_TARGET_EXTERNAL_PREFIX}as"
readonly LFS_C_TARGET_EXTERNAL_NM="${LFS_C_TARGET_EXTERNAL_PREFIX}nm"
readonly LFS_C_TARGET_EXTERNAL_RANLIB="${LFS_C_TARGET_EXTERNAL_PREFIX}ranlib"
readonly LFS_C_TARGET_EXTERNAL_OBJDUMP="${LFS_C_TARGET_EXTERNAL_PREFIX}objdump"
readonly LFS_C_TARGET_EXTERNAL_OBJCOPY="${LFS_C_TARGET_EXTERNAL_PREFIX}objcopy"
readonly LFS_C_TARGET_EXTERNAL_LD="${LFS_C_TARGET_EXTERNAL_PREFIX}ld"
readonly LFS_C_TARGET_EXTERNAL_STRIP="${LFS_C_TARGET_EXTERNAL_PREFIX}strip"
readonly LFS_C_TARGET_EXTERNAL_SYS_ROOT="$LFS_DEPENDENCY_INSTALL_PATH_MUSL_CROSS/$LFS_FOREIGN_TRIPLE"
readonly LFS_C_TARGET_EXTERNAL_LIB_ROOT="$LFS_DEPENDENCY_INSTALL_PATH_MUSL_CROSS/$LFS_FOREIGN_TRIPLE/$LFS_FOREIGN_TRIPLE"
readonly LFS_C_TARGET_EXTERNAL_C_LIB_PATH="$LFS_C_TARGET_EXTERNAL_LIB_ROOT/lib"
readonly LFS_C_TARGET_EXTERNAL_DYNAMIC_LINKER_NAME="ld-musl-$LFS_FOREIGN_ARCHITECTURE.so.1"
readonly LFS_C_TARGET_EXTERNAL_DYNAMIC_LINKER="$LFS_C_TARGET_EXTERNAL_C_LIB_PATH"/"$LFS_C_TARGET_EXTERNAL_DYNAMIC_LINKER_NAME"
readonly LFS_C_TARGET_EXTERNAL_CPPFLAGS="-isysroot $LFS_C_TARGET_EXTERNAL_SYS_ROOT -D_FORTIFY_SOURCE=2"
# Note use of $LFS_C_TARGET_INTERNAL_* (not EXTERNAL) to resolve dynamic-linker and rpath
readonly LFS_C_TARGET_EXTERNAL_SPECS="$LFS_C_TARGET_EXTERNAL_CPPFLAGS --sysroot $LFS_C_TARGET_EXTERNAL_SYS_ROOT -Wl,--sysroot=$LFS_C_TARGET_EXTERNAL_SYS_ROOT -Wl,--dynamic-linker=$LFS_C_TARGET_INTERNAL_DYNAMIC_LINKER -Wl,-rpath=$LFS_C_TARGET_INTERNAL_C_LIB_PATH -Wl,-rpath-link=$LFS_C_TARGET_EXTERNAL_C_LIB_PATH"
readonly LFS_C_TARGET_EXTERNAL_CFLAGS="$LFS_C_TARGET_EXTERNAL_SPECS $LFS_LDFLAGS_MUSL $LFS_CFLAGS_NATIVE_OPTIMISATION $LFS_CFLAGS_HARDENING $LFS_LDFLAGS_OPTIMISATION"
readonly LFS_C_TARGET_EXTERNAL_CXXFLAGS="$LFS_C_TARGET_EXTERNAL_CFLAGS"
readonly LFS_C_TARGET_EXTERNAL_LDFLAGS=""


function build_fixUpGnulib()
{
	pushdDependencyFolder
	
		../gnulib/gnulib-tool --add-import
		
	popdDependencyFolder
}

# Assumes we are inside a particular package folder
function build_fixUpAutoToolsConfig()
{
	if [ -d config ]; then
		
		pushd config >/dev/null
			local -r configSubFile="$(pwd)"/config.sub
			local -r configGuessFile="$(pwd)"/config.guess
			chmod +x "$configSubFile"
			chmod +x "$configGuessFile"
		popd >/dev/null
		
		local dependencyFolder
		for dependencyFolder in *
		do
			if [ "$dependencyFolder" = "config" ]; then
				continue
			fi
			if [ "${dependencyFolder:0:7}" = "config-" ]; then
				continue
			fi
		
			if [ ! -d "$dependencyFolder" ]; then
				continue
			fi
			
			pushd "$dependencyFolder" >/dev/null
			
				# Update autotools malarkey
				local configFolder
				local configFile
				for configFolder in . config support build-aux
				do
					if [ ! -d "$configFolder" ]; then
						continue
					fi
					
					pushd "$configFolder" >/dev/null
					
						for configFile in config.sub configfsf.sub
						do
							if [ -f "$configFile" ]; then
								mv "$configFile" "$configFile".orig
								ln "$configSubFile" "$configFile"
							fi
						done
						for configFile in config.guess
						do
							if [ -f "$configFile" ]; then
								mv "$configFile" "$configFile".orig
								ln "$configGuessFile" "$configFile"
							fi
						done
						
					popd >/dev/null
				done
			
				popd >/dev/null
		done
	fi
}

function autotoolsConfiguredMakeWrapper()
{
	# This weird setting of PATH is so we can use the set -x output on the command line directly to test build problems
	PATH="$PATH" \
	make \
		--jobs $LFS_MAKE_COMPILE_JOBS \
		--load-average $LFS_MAKE_LOAD_AVERAGE \
		--debug \
		--print-directory \
		V=1 \
	"$@" 1>&2
}

function buildUsingMakeExternal()
{
	# This weird setting of PATH is so we can use the set -x output on the command line directly to test build problems
	PATH="$PATH" \
	make \
		--jobs $LFS_MAKE_COMPILE_JOBS \
		--load-average $LFS_MAKE_LOAD_AVERAGE \
		--debug \
		--print-directory \
		V=1 \
		CC="$LFS_C_TARGET_EXTERNAL_CC" \
		CXX="$LFS_C_TARGET_EXTERNAL_CXX" \
		CPP="$LFS_C_TARGET_EXTERNAL_CPP" \
		CXXCPP="$LFS_C_TARGET_EXTERNAL_CXXCPP" \
		AR="$LFS_C_TARGET_EXTERNAL_AR" \
		AS="$LFS_C_TARGET_EXTERNAL_AS" \
		NM="$LFS_C_TARGET_EXTERNAL_NM" \
		RANLIB="$LFS_C_TARGET_EXTERNAL_RANLIB" \
		OBJDUMP="$LFS_C_TARGET_EXTERNAL_OBJDUMP" \
		OBJCOPY="$LFS_C_TARGET_EXTERNAL_OBCOPY" \
		LD="$LFS_C_TARGET_EXTERNAL_LD" \
		STRIP="$LFS_C_TARGET_EXTERNAL_STRIP" \
		CPPFLAGS="$LFS_C_TARGET_EXTERNAL_CPPFLAGS" \
		CFLAGS="$LFS_C_TARGET_EXTERNAL_CFLAGS" \
		CXXFLAGS="$LFS_C_TARGET_EXTERNAL_CXXFLAGS" \
		LDFLAGS="$LFS_C_TARGET_EXTERNAL_LDFLAGS" \
	"$@" 1>&2
}

function callback_empty()
{
	:
}

# This is a hack for packages which don't support cross-compilation
function build_usingAutotoolsHost()
{
	local -r callback="$1"
	shift 1
	
	build_fixUpAutoToolsConfig
	
	pushdDependencyFolder
		# This weird setting of PATH is so we can use the set -x output on the command line directly to test build problems
		PATH="$PATH" \
		./configure \
			CC="$LFS_C_HOST_CC" \
			CXX="$LFS_C_HOST_CXX" \
			CPP="$LFS_C_HOST_CPP" \
			CXXCPP="$LFS_C_HOST_CXXCPP" \
			AR="$LFS_C_HOST_AR" \
			AS="$LFS_C_HOST_AS" \
			NM="$LFS_C_HOST_NM" \
			RANLIB="$LFS_C_HOST_RANLIB" \
			OBJDUMP="$LFS_C_HOST_OBJDUMP" \
			OBJCOPY="$LFS_C_HOST_OBJCOPY" \
			LD="$LFS_C_HOST_LD" \
			STRIP="$LFS_C_HOST_STRIP" \
			CPPFLAGS="$LFS_C_HOST_CPPFLAGS" \
			CFLAGS="$LFS_C_HOST_CFLAGS" \
			CXXFLAGS="$LFS_C_HOST_CXXFLAGS" \
			LDFLAGS="$LFS_C_HOST_LDFLAGS" \
		--host="$LFS_NATIVE_TRIPLE" \
		--target="$LFS_NATIVE_TRIPLE" \
		--prefix="${LFS}${LFS_DEPENDENCY_PREFIX_PATH}"/build \
		"$@" 1>&2
		
		$callback
		
		autotoolsConfiguredMakeWrapper

		autotoolsConfiguredMakeWrapper install
		
	popdDependencyFolder
}

function build_usingAutotoolsExternal()
{
	local -r callback="$1"
	shift 1
	
	build_fixUpAutoToolsConfig
	
	pushdDependencyFolder
		# This weird setting of PATH is so we can use the set -x output on the command line directly to test build problems
		# Note that an older name for CC_FOR_BUILD is HOST_CC
		PATH="$PATH" \
		./configure \
			CC_FOR_BUILD="$LFS_C_HOST_CC" \
			CXX_FOR_BUILD="$LFS_C_HOST_CXX" \
			CPPFLAGS_FOR_BUILD="$LFS_C_HOST_CPPFLAGS" \
			CFLAGS_FOR_BUILD="$LFS_C_HOST_CFLAGS" \
			CXXFLAGS_FOR_BUILD="$LFS_C_HOST_CXXFLAGS" \
			LDFLAGS_FOR_BUILD="$LFS_C_HOST_LDFLAGS" \
			CC="$LFS_C_TARGET_EXTERNAL_CC" \
			CXX="$LFS_C_TARGET_EXTERNAL_CXX" \
			CPP="$LFS_C_TARGET_EXTERNAL_CPP" \
			CXXCPP="$LFS_C_TARGET_EXTERNAL_CXXCPP" \
			AR="$LFS_C_TARGET_EXTERNAL_AR" \
			AS="$LFS_C_TARGET_EXTERNAL_AS" \
			NM="$LFS_C_TARGET_EXTERNAL_NM" \
			RANLIB="$LFS_C_TARGET_EXTERNAL_RANLIB" \
			OBJDUMP="$LFS_C_TARGET_EXTERNAL_OBJDUMP" \
			OBJCOPY="$LFS_C_TARGET_EXTERNAL_OBJCOPY" \
			LD="$LFS_C_TARGET_EXTERNAL_LD" \
			STRIP="$LFS_C_TARGET_EXTERNAL_STRIP" \
			CPPFLAGS="$LFS_C_TARGET_EXTERNAL_CPPFLAGS" \
			CFLAGS="$LFS_C_TARGET_EXTERNAL_CFLAGS" \
			CXXFLAGS="$LFS_C_TARGET_EXTERNAL_CXXFLAGS" \
			LDFLAGS="$LFS_C_TARGET_EXTERNAL_LDFLAGS" \
		--host="$LFS_NATIVE_TRIPLE" \
		--target="$LFS_FOREIGN_TRIPLE" \
		--prefix="$LFS_DEPENDENCY_PREFIX_PATH" \
		"$@" 1>&2
		
		$callback
		
		autotoolsConfiguredMakeWrapper
	
		if [ -z "$LFS" ]; then
			autotoolsConfiguredMakeWrapper install
		else
			autotoolsConfiguredMakeWrapper DESTDIR="$LFS" install
		fi
		
	popdDependencyFolder
}

function build_pushdDependencyFolder()
{
	pushd "$LFS_DEPENDENCY_NAME" >/dev/null
}

function build_popdDependencyFolder()
{
	popd >/dev/null
}

function build_createBuildFolderAndPushd()
{
	local -r buildFolder=../"$LFS_DEPENDENCY_NAME"-build
	mkdir -m 0755 -p "$buildFolder"
	pushd "$buildFolder" >/dev/null
}

function build_popdBuildFolder()
{
	popd >/dev/null
}

function build_setLfsSourcePackageVariables()
{
	LFS_SOURCE_PACKAGE_NAME="${sourcePackages_Name[$1]}"
	LFS_SOURCE_PACKAGE_VERSION="${sourcePackages_Version[$1]}"
	LFS_SOURCE_PACKAGE_COMPRESSION="${sourcePackages_Compression[$1]}"
	LFS_SOURCE_PACKAGE_FILENAME="${sourcePackages_FileName[$1]}"
	LFS_SOURCE_PACKAGE_EXTRACTED_TARBALL_FOLDER="${sourcePackages_ExtractedTarballFolder[$1]}"
	LFS_SOURCE_PACKAGE_IS_TARBOMB="${sourcePackages_IsTarbomb[$1]}"
	LFS_SOURCE_PACKAGE_MIRROR="${sourcePackages_Mirror[$1]}"
	LFS_SOURCE_PACKAGE_RELATIVE_PATH="${sourcePackages_RelativePath[$1]}"
}
