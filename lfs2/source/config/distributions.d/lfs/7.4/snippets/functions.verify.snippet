readonly LFS_DOWNLOAD_PATH="$LFS_DOWNLOAD_FILENAME"

cd "$crudeOurPath" 1>/dev/null 2>/dev/null

function lfs_message()
{
	local messageKind="$1"
	local message="$2"
	
	echo "Verify:${LFS_DOWNLOAD_FILENAME}:${messageKind}:${message}" 1>&2
	if [ "$messageKind" = "FAIL" ]; then
		exit 1
	fi
}

function verifySize()
{
	local -r size=$1
	local -r actualSize=$("$LFS_BINARY_stat" --printf='%s' "$LFS_DOWNLOAD_PATH") 
	set +e
	test $actualSize -eq $size
	local -ir exitCode=$?
	set -e
	if [ $exitCode -ne 0 ]; then
		if [ "$LFS_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "$LFS_DOWNLOAD_PATH"
		fi
		lfs_exitError "${LFS_DOWNLOAD_PATH}: verifySize failed (actual was $actualSize, expected was $size)"
	fi
}

function verifyHash()
{
	local -r hashAlgorithm="$1"
	local -r hashValue="$2"
	
	local -r hashProgramPathVariable=LFS_BINARY_${hashAlgorithm}
	set +e
	${!hashProgramPathVariable} --check --strict --status <<-EOF
		$hashValue  $LFS_DOWNLOAD_PATH
	EOF
	local -ir exitCode=$?
	set -e
	if [ $exitCode -ne 0 ]; then
		local hashValueActual irrelevant
		IFS=' ' read -r hashValueActual irrelevant <<<"$(${!hashProgramPathVariable} "$LFS_DOWNLOAD_PATH")"
		
		if [ "$LFS_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "$LFS_DOWNLOAD_PATH"
		fi
		lfs_exitError "${LFS_DOWNLOAD_PATH}: verifyHash $hashAlgorithm failed (actual was $hashValueActual, expected was $hashValue)"
	fi
}

readonly decompressedPath="$LFS_DOWNLOAD_PATH".decompressed
readonly decompressedSuccessPath="$LFS_DOWNLOAD_PATH".decompressed.success

function decompress()
{
	if [ -f "$decompressedSuccessPath" ]; then
		return 0
	fi
	
	rm -rf "$decompressedPath"
	
	if [ "$compression" = "none" ]; then
		file_hardlinkOrCopy "$LFS_DOWNLOAD_PATH" "$decompressedPath"
	else
		case "$compression" in
			gzip|compress)
				gzip --decompress --stdout --no-name --quiet -- "$LFS_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			bzip2)
				bzip2 --decompress --stdout --quiet -- "$LFS_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			lzop)
				lzop --decompress --stdout --no-name --quiet -- "$LFS_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			lzip)
				lzip --decompress --quiet --stdout -- "$LFS_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			lzma)
				xz --format=lzma --decompress --stdout -- "$LFS_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			xz)
				xz --decompress --stdout --quiet --quiet -- "$LFS_DOWNLOAD_PATH" >"$decompressedPath"
			;;
		
			*)
				lfs_exitError "${LFS_DOWNLOAD_PATH}: Unknown compression option '$compression'"
			;;
		esac
	fi
	
	touch "$decompressedSuccessPath"
}

function verifySizeDecompressed()
{
	local -r size=$1
	local -r actualSize=$("$LFS_BINARY_stat" --printf='%s' "$decompressedPath") 
	set +e
	test $actualSize -eq $size
	local -ir exitCode=$?
	set -e
	if [ $exitCode -ne 0 ]; then
		if [ "$LFS_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "$decompressedPath"
		fi
		lfs_exitError "${LFS_DOWNLOAD_PATH}: verifySizeDecompressed ($decompressedPath) failed (actual was $actualSize, expected was $size)"
		exit 1
	fi
}

function verifyHashDecompressed()
{
	local -r hashAlgorithm="$1"
	local -r hashValue="$2"
	
	local -r hashProgramPathVariable=LFS_BINARY_${hashAlgorithm}
	set +e
	${!hashProgramPathVariable} --check --strict --status <<-EOF
		$hashValue  $LFS_DOWNLOAD_PATH
	EOF
	local -ir exitCode=$?
	set -e
	if [ $exitCode -ne 0 ]; then
		local hashValueActual irrelevant
		IFS=' ' read -r hashValueActual irrelevant <<<"$(${!hashProgramPathVariable} "$decompressedPath")"
		
		if [ "$LFS_DELETE_IF_UNVERIFIED" = "yes" ]; then
			rm -rf "$decompressedPath"
		fi
		lfs_exitError "${LFS_DOWNLOAD_PATH}: verifyHashDecompressed ($decompressedPath) $hashAlgorithm failed (actual was $hashValueActual, expected was $hashValue)"
	fi
}

function recordHashes()
{
	local -r hashesFile="$LFS_DOWNLOAD_PATH".hashes
	rm -rf "$hashesFile"
	{
		printf '\t\t%s %s' "size" "$("$LFS_BINARY_stat" --printf='%s' "$LFS_DOWNLOAD_PATH")"
		
		local hashAlgorithm
		local hashBinary
		local hashValue
		local irrelevant
		
		for hashAlgorithm in md5 sha1 sha224 sha256 sha384 sha512
		do
			local -r hashProgramPathVariable=LFS_BINARY_${hashAlgorithm}
			IFS=' ' read -r hashValue irrelevant ${!hashProgramPathVariable} "$LFS_DOWNLOAD_PATH"
			
			printf '\t\t%s %s\n' "$hashAlgorithm" "$hashValue"
		done
		
		printf '\t\t%s %s' "decompressed_size" "$("$LFS_BINARY_stat" --printf='%s' "$decompressedPath")"
		
		for hashAlgorithm in md5 sha1 sha224 sha256 sha384 sha512
		do
			local -r hashProgramPathVariable=LFS_BINARY_${hashAlgorithm}
			IFS=' ' read -r hashValue irrelevant ${!hashProgramPathVariable} "$decompressedPath"

			printf '\t\t%s %s\n' "decompressed_${hashAlgorithm}" "$hashValue"
		done
	} >"$hashesFile"
}
