
cd "$crudeOurPath" 1>/dev/null 2>/dev/null

# also uses curl_post, curl_put and curl_put_continueAt
function curl_download()
{
	if [ $continueAt -eq $size ]; then
		return 0
	fi
	
	local -r headersFilePath="$fileName".headers
	rm -rf "$headersFilePath"
	
	local -r stderrFilePath="$fileName".stderr
	rm -rf "$stderrFilePath"
	
	local -r downloadDetailsFilePath="$fileName".details
	rm -rf "$downloadDetailsFilePath"
	
	local -r asciiTraceFilePath="$fileName".trace
	rm -rf "$asciiTraceFilePath"
	
	local -r writeOutFilePath="$fileName".write-out
	rm -rf "$writeOutFilePath"
	
	declare -a curl_args=()
	declare -a curl_requestHeaders=()
	
	# -q as the first parameter prevents default configuration file loadings
	curl_args+=('-q' '--silent' '--show-error')
	
	curl_args+=('--user-agent')
	curl_args+=("$LFS_CURL_USERAGENT")
	
	curl_args+=('--referer')
	curl_args+=("${referer};auto")
	
	# Arguments that can be overridden by configuration
	curl_args+=('--max-redirs')
	curl_args+=("$LFS_CURL_MAX_REDIRECTS")
	
	curl_args+=('--retry')
	curl_args+=("$LFS_CURL_RETRIES")
	
	# NOTE: Whilst this sequences of commands can add multiple --netrc switches, only the last is acted upon, unlike --config, which is acted on multiple times
	# Technically, .netrc only exists in $HOME, but we want to give a little more flexibility
	# netrc files have lines likes machine host.domain.com login myself password secret (machine X, username Y, password X)
	
	if [ "$LFS_CURL_SUPPORTS_NETRC_OPTION" = yes ]; then
		if [ -z "$lfs_netrcFilePath" ]; then
			curl_argumentConfig --netrc-file "$CURL_HOME" .netrc
			curl_argumentConfig --netrc-file "$HOME" .netrc
			curl_argumentConfig --netrc-file "$etcPath" netrc
			curl_argumentConfig --netrc-file "$lfs_configPath" netrc
			curl_argumentConfig --netrc-file "$HOME" "$LFS_PROGRAM_NAME".netrc
		else
			curl_args+=('--netrc-file')
			curl_args+=("$lfs_netrcFilePath")
		fi
	elif [ -f ~/.netrc ]; then
		curl_args+=('--netrc')
	fi
	
	# Overridding of configuration occurs after setting are options; machine-wide always wins
	if [ -z "$lfs_curlrcFilePath" ]; then
		curl_argumentConfig --config "$CURL_HOME" .curlrc
		curl_argumentConfig --config "$HOME" .curlrc
		curl_argumentConfig --config "$etcPath" curlrc
		curl_argumentConfig --config "$lfs_configPath" curlrc
		local configFile
		for configFile in "$lfs_configPath"/curlrc.d/*.curlrc
		do
			if [ -f "$configFile" ]; then
				curl_args+=('--config')
				curl_args+=("$configFile")
			fi
		done
		curl_argumentConfig --config "$HOME" "$LFS_PROGRAM_NAME".curlrc
	else
		curl_args+=('--config')
		curl_args+=("$lfs_curlrcFilePath")
	fi
	
	# Override any setting of URL, TLS, etc after configuration loaded
	
	# more script-friendly output
	curl_args+=('--silent' '--show-error')
	
	# Uses HTTP Date header if available to set the timestamp of any downloaded file
	curl_args+=('--location')
	
	curl_args+=('--tlsv1')
	
	# Only enabled compression for uncompressed files, because a few badly configured servers (eg http://www.multiprecision.org/mpc/download/mpc-1.0.1.tar.gz) then stream the non-gz tarball
	if [ "$compression" != "gzip" ]; then
		curl_args+=('--compressed')
	fi
	
	curl_args+=('--remote-time')
	
	local curl_requestHeader_name
	for curl_requestHeader_name in "${!curl_requestHeaders[@]}"
	do
		# ,, converts to lowercase. Whilst headers are case insensitive, using consistent casing makes life easier when debugging
		curl_args+=('--header')
		curl_args+=("${curl_requestHeader_name,,}: ${curl_requestHeaders["$curl_requestHeader_name"]}")
	done
	
	# Verb
	case "$verb" in
		
		HEAD)
			curl_args+=('--request')
			curl_args+=('HEAD')
		;;
		
		GET)
			if [ $continueAt -ne -1 ]; then
				curl_args+=('--continue-at')
				curl_args+=($continueAt)
			fi
		;;
		
		POST)
			curl_args+=('--data-binary')
			curl_args+=("$curl_post")
		;;
		
		PUT)
			curl_args+=('--upload-file')
			curl_args+=("$curl_put")
			if [ -n "$curl_put_continueAt" ]; then
				curl_args+=('--continue-at')
				curl_args+=("$curl_put_continueAt")
			fi
		;;
		
		DELETE)
			curl_args+=('--request')
			curl_args+=('DELETE')
		;;
		
		*)
			lfs_message FAIL "Verb $verb is not supported"
		;;
		
	esac
	
	# URL
	curl_args+=('--url')
	curl_args+=("$url")
	
	curl_args+=('--output')
	curl_args+=("$fileName")
	
	# Headers file
	curl_args+=('--dump-header')
	curl_args+=("$headersFilePath")
	
	# stderr file
	curl_args+=('--stderr')
	curl_args+=("$stderrFilePath")
	
	# useful if debugging
	curl_args+=('--write-out')
	curl_args+=('%{http_code}\t%{url_effective}\t%{ssl_verify_result}\t%{http_connect}\t%{time_total}\t%{size_download}\t%{speed_download}\t%{num_redirects}\n')
	
	# tracing of the connection (useful if debugging)
	curl_args+=('--trace-time' '--trace-ascii')
	curl_args+=("$asciiTraceFilePath")
	
	$LFS_BINARY_curl "${curl_args[@]}" 1>"$writeOutFilePath"
}

function curl_argumentConfig()
{
	local -r configSwitch="$1"
	local -r fileParentFolderEnvironmentVariable="$2"
	local -r configFileName="$3"
	
	if [ -z "$fileParentFolderEnvironmentVariable" ]; then
		return 0
	fi
	
	local -r configFilePath="${fileParentFolderEnvironmentVariable}"/"${configFileName}"
	
	if [ ! -f "$configFilePath" ]; then
		return 0
	fi
	if [ ! -r "$configFilePath" ]; then
		return 0
	fi
	if [ ! -s "$configFilePath" ]; then
		return 0
	fi
	curl_args+=("$configSwitch")
	curl_args+=("$configFilePath")
}
